
H7Hopper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f28  08008d1c  08008d1c  00009d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc44  0800fc44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc4c  0800fc4c  00010c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fc50  0800fc50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000100  24000000  0800fc54  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007fc  24000100  0800fd54  00011100  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008fc  0800fd54  000118fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016815  00000000  00000000  0001112e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003087  00000000  00000000  00027943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001280  00000000  00000000  0002a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e18  00000000  00000000  0002bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000393ba  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f2e  00000000  00000000  00065e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168a7d  00000000  00000000  0007dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e67cd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000050f4  00000000  00000000  001e6810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001eb904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008d04 	.word	0x08008d04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08008d04 	.word	0x08008d04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b3a      	ldr	r3, [pc, #232]	@ (8000480 <MX_GPIO_Init+0x100>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039c:	4a38      	ldr	r2, [pc, #224]	@ (8000480 <MX_GPIO_Init+0x100>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003a6:	4b36      	ldr	r3, [pc, #216]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b32      	ldr	r3, [pc, #200]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ba:	4a31      	ldr	r2, [pc, #196]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003d8:	4a29      	ldr	r2, [pc, #164]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003e2:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b23      	ldr	r3, [pc, #140]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003f6:	4a22      	ldr	r2, [pc, #136]	@ (8000480 <MX_GPIO_Init+0x100>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000400:	4b1f      	ldr	r3, [pc, #124]	@ (8000480 <MX_GPIO_Init+0x100>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	481c      	ldr	r0, [pc, #112]	@ (8000484 <MX_GPIO_Init+0x104>)
 8000414:	f003 fcda 	bl	8003dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800041e:	4819      	ldr	r0, [pc, #100]	@ (8000484 <MX_GPIO_Init+0x104>)
 8000420:	f003 fcd4 	bl	8003dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 8000424:	2308      	movs	r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	@ (8000484 <MX_GPIO_Init+0x104>)
 800043c:	f003 fafe 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <MX_GPIO_Init+0x108>)
 8000456:	f003 faf1 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800045a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	@ (8000484 <MX_GPIO_Init+0x104>)
 8000474:	f003 fae2 	bl	8003a3c <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	@ 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58024400 	.word	0x58024400
 8000484:	58021000 	.word	0x58021000
 8000488:	58020800 	.word	0x58020800

0800048c <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000492:	4b7d      	ldr	r3, [pc, #500]	@ (8000688 <LCD_Test+0x1fc>)
 8000494:	2203      	movs	r2, #3
 8000496:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000498:	4b7b      	ldr	r3, [pc, #492]	@ (8000688 <LCD_Test+0x1fc>)
 800049a:	2200      	movs	r2, #0
 800049c:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 800049e:	4b7a      	ldr	r3, [pc, #488]	@ (8000688 <LCD_Test+0x1fc>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	735a      	strb	r2, [r3, #13]
	// #else
	// error "Unknown Screen"
	
	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 80004a4:	4979      	ldr	r1, [pc, #484]	@ (800068c <LCD_Test+0x200>)
 80004a6:	487a      	ldr	r0, [pc, #488]	@ (8000690 <LCD_Test+0x204>)
 80004a8:	f001 fb12 	bl	8001ad0 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 80004ac:	4b79      	ldr	r3, [pc, #484]	@ (8000694 <LCD_Test+0x208>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a75      	ldr	r2, [pc, #468]	@ (8000688 <LCD_Test+0x1fc>)
 80004b2:	2105      	movs	r1, #5
 80004b4:	4876      	ldr	r0, [pc, #472]	@ (8000690 <LCD_Test+0x204>)
 80004b6:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 80004b8:	4b76      	ldr	r3, [pc, #472]	@ (8000694 <LCD_Test+0x208>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	4976      	ldr	r1, [pc, #472]	@ (8000698 <LCD_Test+0x20c>)
 80004be:	4874      	ldr	r0, [pc, #464]	@ (8000690 <LCD_Test+0x204>)
 80004c0:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 f8fa 	bl	80006bc <LCD_SetBrightness>
	
	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 80004c8:	4b72      	ldr	r3, [pc, #456]	@ (8000694 <LCD_Test+0x208>)
 80004ca:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80004cc:	4b73      	ldr	r3, [pc, #460]	@ (800069c <LCD_Test+0x210>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	486f      	ldr	r0, [pc, #444]	@ (8000690 <LCD_Test+0x204>)
 80004d4:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
	#endif
	
  uint32_t tick = get_tick();
 80004d6:	f003 f90b 	bl	80036f0 <HAL_GetTick>
 80004da:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80004dc:	e06a      	b.n	80005b4 <LCD_Test+0x128>
	{
		delay_ms(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f003 f912 	bl	8003708 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80004e4:	f003 f904 	bl	80036f0 <HAL_GetTick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004f2:	d80f      	bhi.n	8000514 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80004f4:	f003 f8fc 	bl	80036f0 <HAL_GetTick>
 80004f8:	4602      	mov	r2, r0
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	2264      	movs	r2, #100	@ 0x64
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	4a66      	ldr	r2, [pc, #408]	@ (80006a0 <LCD_Test+0x214>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	099b      	lsrs	r3, r3, #6
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f8d5 	bl	80006bc <LCD_SetBrightness>
 8000512:	e04f      	b.n	80005b4 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8000514:	f003 f8ec 	bl	80036f0 <HAL_GetTick>
 8000518:	4602      	mov	r2, r0
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000522:	4293      	cmp	r3, r2
 8000524:	d83d      	bhi.n	80005a2 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000526:	f003 f8e3 	bl	80036f0 <HAL_GetTick>
 800052a:	4602      	mov	r2, r0
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000534:	4a5b      	ldr	r2, [pc, #364]	@ (80006a4 <LCD_Test+0x218>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	08da      	lsrs	r2, r3, #3
 800053c:	463b      	mov	r3, r7
 800053e:	495a      	ldr	r1, [pc, #360]	@ (80006a8 <LCD_Test+0x21c>)
 8000540:	4618      	mov	r0, r3
 8000542:	f007 ff3f 	bl	80083c4 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000546:	4b50      	ldr	r3, [pc, #320]	@ (8000688 <LCD_Test+0x1fc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	3b1e      	subs	r3, #30
 800054e:	b298      	uxth	r0, r3
 8000550:	4b4d      	ldr	r3, [pc, #308]	@ (8000688 <LCD_Test+0x1fc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	b29a      	uxth	r2, r3
 8000556:	463b      	mov	r3, r7
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2310      	movs	r3, #16
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2310      	movs	r3, #16
 8000560:	2101      	movs	r1, #1
 8000562:	f000 fb4f 	bl	8000c04 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000566:	4b4b      	ldr	r3, [pc, #300]	@ (8000694 <LCD_Test+0x208>)
 8000568:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800056a:	4b47      	ldr	r3, [pc, #284]	@ (8000688 <LCD_Test+0x1fc>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	1edd      	subs	r5, r3, #3
 8000570:	f003 f8be 	bl	80036f0 <HAL_GetTick>
 8000574:	4602      	mov	r2, r0
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800057e:	4a42      	ldr	r2, [pc, #264]	@ (8000688 <LCD_Test+0x1fc>)
 8000580:	6812      	ldr	r2, [r2, #0]
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	4a46      	ldr	r2, [pc, #280]	@ (80006a0 <LCD_Test+0x214>)
 8000588:	fba2 2303 	umull	r2, r3, r2, r3
 800058c:	09db      	lsrs	r3, r3, #7
 800058e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2203      	movs	r2, #3
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	462a      	mov	r2, r5
 800059a:	2100      	movs	r1, #0
 800059c:	483c      	ldr	r0, [pc, #240]	@ (8000690 <LCD_Test+0x204>)
 800059e:	47a0      	blx	r4
 80005a0:	e008      	b.n	80005b4 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 80005a2:	f003 f8a5 	bl	80036f0 <HAL_GetTick>
 80005a6:	4602      	mov	r2, r0
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d808      	bhi.n	80005c6 <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80005b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b8:	483c      	ldr	r0, [pc, #240]	@ (80006ac <LCD_Test+0x220>)
 80005ba:	f003 fbef 	bl	8003d9c <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d18c      	bne.n	80004de <LCD_Test+0x52>
 80005c4:	e004      	b.n	80005d0 <LCD_Test+0x144>
			break;
 80005c6:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80005c8:	e002      	b.n	80005d0 <LCD_Test+0x144>
	{
		delay_ms(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f003 f89c 	bl	8003708 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80005d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d4:	4835      	ldr	r0, [pc, #212]	@ (80006ac <LCD_Test+0x220>)
 80005d6:	f003 fbe1 	bl	8003d9c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d0f4      	beq.n	80005ca <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 80005e0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f885 	bl	80006f4 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80005ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000694 <LCD_Test+0x208>)
 80005ec:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80005ee:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <LCD_Test+0x1fc>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <LCD_Test+0x1fc>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	2100      	movs	r1, #0
 80005f8:	9101      	str	r1, [sp, #4]
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	4613      	mov	r3, r2
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	4823      	ldr	r0, [pc, #140]	@ (8000690 <LCD_Test+0x204>)
 8000604:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8000606:	463b      	mov	r3, r7
 8000608:	4929      	ldr	r1, [pc, #164]	@ (80006b0 <LCD_Test+0x224>)
 800060a:	4618      	mov	r0, r3
 800060c:	f007 feda 	bl	80083c4 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <LCD_Test+0x1fc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	b29a      	uxth	r2, r3
 8000616:	463b      	mov	r3, r7
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2310      	movs	r3, #16
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2310      	movs	r3, #16
 8000620:	2104      	movs	r1, #4
 8000622:	2004      	movs	r0, #4
 8000624:	f000 faee 	bl	8000c04 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000628:	f003 f89e 	bl	8003768 <HAL_GetDEVID>
 800062c:	4602      	mov	r2, r0
 800062e:	463b      	mov	r3, r7
 8000630:	4920      	ldr	r1, [pc, #128]	@ (80006b4 <LCD_Test+0x228>)
 8000632:	4618      	mov	r0, r3
 8000634:	f007 fec6 	bl	80083c4 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <LCD_Test+0x1fc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	b29a      	uxth	r2, r3
 800063e:	463b      	mov	r3, r7
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2310      	movs	r3, #16
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2310      	movs	r3, #16
 8000648:	2116      	movs	r1, #22
 800064a:	2004      	movs	r0, #4
 800064c:	f000 fada 	bl	8000c04 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <LCD_Test+0x20c>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	463b      	mov	r3, r7
 8000656:	4918      	ldr	r1, [pc, #96]	@ (80006b8 <LCD_Test+0x22c>)
 8000658:	4618      	mov	r0, r3
 800065a:	f007 feb3 	bl	80083c4 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <LCD_Test+0x1fc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	463b      	mov	r3, r7
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2310      	movs	r3, #16
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2310      	movs	r3, #16
 800066e:	2128      	movs	r1, #40	@ 0x28
 8000670:	2004      	movs	r0, #4
 8000672:	f000 fac7 	bl	8000c04 <LCD_ShowString>

	LCD_Light(100, 200);
 8000676:	21c8      	movs	r1, #200	@ 0xc8
 8000678:	2064      	movs	r0, #100	@ 0x64
 800067a:	f000 f83b 	bl	80006f4 <LCD_Light>
}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop
 8000688:	24000250 	.word	0x24000250
 800068c:	24000000 	.word	0x24000000
 8000690:	2400011c 	.word	0x2400011c
 8000694:	24000034 	.word	0x24000034
 8000698:	24000154 	.word	0x24000154
 800069c:	080097b4 	.word	0x080097b4
 80006a0:	10624dd3 	.word	0x10624dd3
 80006a4:	cccccccd 	.word	0xcccccccd
 80006a8:	08008d1c 	.word	0x08008d1c
 80006ac:	58020800 	.word	0x58020800
 80006b0:	08008d24 	.word	0x08008d24
 80006b4:	08008d34 	.word	0x08008d34
 80006b8:	08008d44 	.word	0x08008d44

080006bc <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 80006c4:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <LCD_SetBrightness+0x1c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	24000764 	.word	0x24000764

080006dc <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <LCD_GetBrightness+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24000764 	.word	0x24000764

080006f4 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80006fe:	f7ff ffed 	bl	80006dc <LCD_GetBrightness>
 8000702:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8000708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d05e      	beq.n	80007ce <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	429a      	cmp	r2, r3
 8000716:	d05c      	beq.n	80007d2 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8000718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000722:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000730:	ed97 7a07 	vldr	s14, [r7, #28]
 8000734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000738:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000746:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000754:	ed97 7a06 	vldr	s14, [r7, #24]
 8000758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800075c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8000760:	edd7 6a07 	vldr	s13, [r7, #28]
 8000764:	ed97 7a06 	vldr	s14, [r7, #24]
 8000768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800076c:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8000770:	f002 ffbe 	bl	80036f0 <HAL_GetTick>
 8000774:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f002 ffc6 	bl	8003708 <HAL_Delay>
		
		time_now = get_tick()-tick;
 800077c:	f002 ffb8 	bl	80036f0 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8000796:	ed97 7a06 	vldr	s14, [r7, #24]
 800079a:	edd7 7a05 	vldr	s15, [r7, #20]
 800079e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b0:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80007b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	f7ff ff7c 	bl	80006bc <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d204      	bcs.n	80007d6 <LCD_Light+0xe2>
		delay_ms(1);
 80007cc:	e7d3      	b.n	8000776 <LCD_Light+0x82>
		return;
 80007ce:	bf00      	nop
 80007d0:	e002      	b.n	80007d8 <LCD_Light+0xe4>
		return;
 80007d2:	bf00      	nop
 80007d4:	e000      	b.n	80007d8 <LCD_Light+0xe4>
		if(time_now >= time) break;
 80007d6:	bf00      	nop
		
	}
}
 80007d8:	3728      	adds	r7, #40	@ 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80007e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e4:	b097      	sub	sp, #92	@ 0x5c
 80007e6:	af02      	add	r7, sp, #8
 80007e8:	461e      	mov	r6, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80007ee:	460b      	mov	r3, r1
 80007f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80007f2:	4613      	mov	r3, r2
 80007f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f8:	4633      	mov	r3, r6
 80007fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80007fe:	466b      	mov	r3, sp
 8000800:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8000802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000804:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0=x;
 8000808:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800080a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp=POINT_COLOR; 
 800080e:	4baf      	ldr	r3, [pc, #700]	@ (8000acc <LCD_ShowChar+0x2ec>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8000816:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800081a:	2b0c      	cmp	r3, #12
 800081c:	d101      	bne.n	8000822 <LCD_ShowChar+0x42>
 800081e:	2106      	movs	r1, #6
 8000820:	e000      	b.n	8000824 <LCD_ShowChar+0x44>
 8000822:	2108      	movs	r1, #8
 8000824:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8000828:	1e4b      	subs	r3, r1, #1
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
 800082c:	460a      	mov	r2, r1
 800082e:	2300      	movs	r3, #0
 8000830:	4692      	mov	sl, r2
 8000832:	469b      	mov	fp, r3
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000840:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000844:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000848:	460b      	mov	r3, r1
 800084a:	005e      	lsls	r6, r3, #1
 800084c:	4603      	mov	r3, r0
 800084e:	3b01      	subs	r3, #1
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000852:	460a      	mov	r2, r1
 8000854:	2300      	movs	r3, #0
 8000856:	61ba      	str	r2, [r7, #24]
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	b2c3      	uxtb	r3, r0
 800085c:	2200      	movs	r2, #0
 800085e:	623b      	str	r3, [r7, #32]
 8000860:	627a      	str	r2, [r7, #36]	@ 0x24
 8000862:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8000866:	465b      	mov	r3, fp
 8000868:	6a3a      	ldr	r2, [r7, #32]
 800086a:	fb02 fc03 	mul.w	ip, r2, r3
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	4652      	mov	r2, sl
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	449c      	add	ip, r3
 8000878:	4652      	mov	r2, sl
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	fba2 8903 	umull	r8, r9, r2, r3
 8000880:	eb0c 0309 	add.w	r3, ip, r9
 8000884:	4699      	mov	r9, r3
 8000886:	f04f 0200 	mov.w	r2, #0
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000892:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000896:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800089a:	460a      	mov	r2, r1
 800089c:	2300      	movs	r3, #0
 800089e:	613a      	str	r2, [r7, #16]
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	b2c3      	uxtb	r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	60fa      	str	r2, [r7, #12]
 80008aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80008ae:	464b      	mov	r3, r9
 80008b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80008b4:	4652      	mov	r2, sl
 80008b6:	fb02 fc03 	mul.w	ip, r2, r3
 80008ba:	465b      	mov	r3, fp
 80008bc:	4642      	mov	r2, r8
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	449c      	add	ip, r3
 80008c4:	4642      	mov	r2, r8
 80008c6:	4653      	mov	r3, sl
 80008c8:	fba2 4503 	umull	r4, r5, r2, r3
 80008cc:	eb0c 0305 	add.w	r3, ip, r5
 80008d0:	461d      	mov	r5, r3
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	012b      	lsls	r3, r5, #4
 80008dc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80008e0:	0122      	lsls	r2, r4, #4
 80008e2:	460b      	mov	r3, r1
 80008e4:	4602      	mov	r2, r0
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	3307      	adds	r3, #7
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	ebad 0d03 	sub.w	sp, sp, r3
 80008f6:	ab02      	add	r3, sp, #8
 80008f8:	3301      	adds	r3, #1
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8000900:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000904:	4619      	mov	r1, r3
 8000906:	4872      	ldr	r0, [pc, #456]	@ (8000ad0 <LCD_ShowChar+0x2f0>)
 8000908:	f002 fa3e 	bl	8002d88 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800090c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000910:	4619      	mov	r1, r3
 8000912:	486f      	ldr	r0, [pc, #444]	@ (8000ad0 <LCD_ShowChar+0x2f0>)
 8000914:	f002 fa4a 	bl	8002dac <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8000918:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800091c:	3b20      	subs	r3, #32
 800091e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8000928:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800092c:	2b00      	cmp	r3, #0
 800092e:	f040 80a7 	bne.w	8000a80 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 8000932:	2300      	movs	r3, #0
 8000934:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000938:	e09a      	b.n	8000a70 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 800093a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d10e      	bne.n	8000960 <LCD_ShowChar+0x180>
 8000942:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000946:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 800094a:	4862      	ldr	r0, [pc, #392]	@ (8000ad4 <LCD_ShowChar+0x2f4>)
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4403      	add	r3, r0
 8000956:	440b      	add	r3, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800095e:	e00a      	b.n	8000976 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 8000960:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000964:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000968:	495b      	ldr	r1, [pc, #364]	@ (8000ad8 <LCD_ShowChar+0x2f8>)
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	440a      	add	r2, r1
 800096e:	4413      	add	r3, r2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			
			for(t1=0;t1<8;t1++)
 8000976:	2300      	movs	r3, #0
 8000978:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800097c:	e06d      	b.n	8000a5a <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 800097e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000982:	2b00      	cmp	r3, #0
 8000984:	da0e      	bge.n	80009a4 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000986:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <LCD_ShowChar+0x2ec>)
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	e00d      	b.n	80009c0 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80009a4:	4b4d      	ldr	r3, [pc, #308]	@ (8000adc <LCD_ShowChar+0x2fc>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	4b4b      	ldr	r3, [pc, #300]	@ (8000adc <LCD_ShowChar+0x2fc>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <LCD_ShowChar+0x2ec>)
 80009be:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80009c0:	0872      	lsrs	r2, r6, #1
 80009c2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80009c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80009ca:	085b      	lsrs	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461c      	mov	r4, r3
 80009d0:	4b3e      	ldr	r3, [pc, #248]	@ (8000acc <LCD_ShowChar+0x2ec>)
 80009d2:	8818      	ldrh	r0, [r3, #0]
 80009d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009d6:	fb01 f202 	mul.w	r2, r1, r2
 80009da:	4422      	add	r2, r4
 80009dc:	4601      	mov	r1, r0
 80009de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80009e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80009e6:	3301      	adds	r3, #1
 80009e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 80009ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d302      	bcc.n	8000a00 <LCD_ShowChar+0x220>
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 8000a00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000a0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000a10:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d304      	bcc.n	8000a22 <LCD_ShowChar+0x242>
 8000a18:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <LCD_ShowChar+0x2ec>)
 8000a1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000a1e:	8013      	strh	r3, [r2, #0]
 8000a20:	e0e6      	b.n	8000bf0 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8000a22:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000a24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d10e      	bne.n	8000a50 <LCD_ShowChar+0x270>
				{
					y=y0;
 8000a32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000a36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000a38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000a3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d30e      	bcc.n	8000a64 <LCD_ShowChar+0x284>
 8000a46:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <LCD_ShowChar+0x2ec>)
 8000a48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000a4c:	8013      	strh	r3, [r2, #0]
 8000a4e:	e0cf      	b.n	8000bf0 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8000a50:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a54:	3301      	adds	r3, #1
 8000a56:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000a5a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d98d      	bls.n	800097e <LCD_ShowChar+0x19e>
 8000a62:	e000      	b.n	8000a66 <LCD_ShowChar+0x286>
					break;
 8000a64:	bf00      	nop
		for(t=0;t<size;t++)
 8000a66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000a70:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000a74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f4ff af5e 	bcc.w	800093a <LCD_ShowChar+0x15a>
 8000a7e:	e09c      	b.n	8000bba <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000a86:	e091      	b.n	8000bac <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000a88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a8c:	2b0c      	cmp	r3, #12
 8000a8e:	d10e      	bne.n	8000aae <LCD_ShowChar+0x2ce>
 8000a90:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000a94:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8000a98:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <LCD_ShowChar+0x2f4>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4403      	add	r3, r0
 8000aa4:	440b      	add	r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000aac:	e00a      	b.n	8000ac4 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8000aae:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000ab2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ab6:	4908      	ldr	r1, [pc, #32]	@ (8000ad8 <LCD_ShowChar+0x2f8>)
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	440a      	add	r2, r1
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for(t1=0;t1<8;t1++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000aca:	e064      	b.n	8000b96 <LCD_ShowChar+0x3b6>
 8000acc:	24000020 	.word	0x24000020
 8000ad0:	2400011c 	.word	0x2400011c
 8000ad4:	08008d50 	.word	0x08008d50
 8000ad8:	080091c4 	.word	0x080091c4
 8000adc:	24000158 	.word	0x24000158
			{			    
				if(temp&0x80)
 8000ae0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da1a      	bge.n	8000b1e <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000ae8:	4b44      	ldr	r3, [pc, #272]	@ (8000bfc <LCD_ShowChar+0x41c>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <LCD_ShowChar+0x41c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b218      	sxth	r0, r3
 8000afe:	0872      	lsrs	r2, r6, #1
 8000b00:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8000b04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461c      	mov	r4, r3
 8000b0e:	b280      	uxth	r0, r0
 8000b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b12:	fb01 f202 	mul.w	r2, r1, r2
 8000b16:	4422      	add	r2, r4
 8000b18:	4601      	mov	r1, r0
 8000b1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8000b1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000b22:	3301      	adds	r3, #1
 8000b24:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 8000b28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d302      	bcc.n	8000b3c <LCD_ShowChar+0x35c>
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 8000b3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000b46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b48:	3301      	adds	r3, #1
 8000b4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000b4c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d304      	bcc.n	8000b5e <LCD_ShowChar+0x37e>
 8000b54:	4a29      	ldr	r2, [pc, #164]	@ (8000bfc <LCD_ShowChar+0x41c>)
 8000b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b5a:	8013      	strh	r3, [r2, #0]
 8000b5c:	e048      	b.n	8000bf0 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8000b5e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000b60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d10e      	bne.n	8000b8c <LCD_ShowChar+0x3ac>
				{
					y=y0;
 8000b6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000b72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000b74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b76:	3301      	adds	r3, #1
 8000b78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000b7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d30e      	bcc.n	8000ba0 <LCD_ShowChar+0x3c0>
 8000b82:	4a1e      	ldr	r2, [pc, #120]	@ (8000bfc <LCD_ShowChar+0x41c>)
 8000b84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b88:	8013      	strh	r3, [r2, #0]
 8000b8a:	e031      	b.n	8000bf0 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8000b8c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b90:	3301      	adds	r3, #1
 8000b92:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000b96:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	d9a0      	bls.n	8000ae0 <LCD_ShowChar+0x300>
 8000b9e:	e000      	b.n	8000ba2 <LCD_ShowChar+0x3c2>
					break;
 8000ba0:	bf00      	nop
		for(t=0;t<size;t++)
 8000ba2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000bac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000bb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f4ff af67 	bcc.w	8000a88 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8000bba:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8000bbe:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8000bc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bc6:	2b0c      	cmp	r3, #12
 8000bc8:	d101      	bne.n	8000bce <LCD_ShowChar+0x3ee>
 8000bca:	2306      	movs	r3, #6
 8000bcc:	e000      	b.n	8000bd0 <LCD_ShowChar+0x3f0>
 8000bce:	2308      	movs	r3, #8
 8000bd0:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bda:	4602      	mov	r2, r0
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <LCD_ShowChar+0x420>)
 8000bde:	f001 ff25 	bl	8002a2c <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8000be2:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <LCD_ShowChar+0x41c>)
 8000be4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000be8:	8013      	strh	r3, [r2, #0]
 8000bea:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8000bee:	e001      	b.n	8000bf4 <LCD_ShowChar+0x414>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000bf0:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8000bf4:	3754      	adds	r7, #84	@ 0x54
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	24000020 	.word	0x24000020
 8000c00:	2400011c 	.word	0x2400011c

08000c04 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	4603      	mov	r3, r0
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	807b      	strh	r3, [r7, #2]
	height+=y;
 8000c2e:	883a      	ldrh	r2, [r7, #0]
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))
 8000c36:	e024      	b.n	8000c82 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d307      	bcc.n	8000c50 <LCD_ShowString+0x4c>
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d21d      	bcs.n	8000c94 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	88f8      	ldrh	r0, [r7, #6]
 8000c64:	2400      	movs	r4, #0
 8000c66:	9400      	str	r4, [sp, #0]
 8000c68:	f7ff fdba 	bl	80007e0 <LCD_ShowChar>
        x+=size/2;
 8000c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	4413      	add	r3, r2
 8000c7a:	80fb      	strh	r3, [r7, #6]
        p++;
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7e:	3301      	adds	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    while((*p<='~')&&(*p>=' '))
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c88:	d805      	bhi.n	8000c96 <LCD_ShowString+0x92>
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b1f      	cmp	r3, #31
 8000c90:	d8d2      	bhi.n	8000c38 <LCD_ShowString+0x34>
    }  
}
 8000c92:	e000      	b.n	8000c96 <LCD_ShowString+0x92>
        if(y>=height)break;
 8000c94:	bf00      	nop
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
	...

08000ca0 <lcd_init>:

static int32_t lcd_init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8000caa:	2104      	movs	r1, #4
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <lcd_init+0x1c>)
 8000cae:	f007 f995 	bl	8007fdc <HAL_TIMEx_PWMN_Start>
	return result;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000764 	.word	0x24000764

08000cc0 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000cc4:	f002 fd14 	bl	80036f0 <HAL_GetTick>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce4:	481d      	ldr	r0, [pc, #116]	@ (8000d5c <lcd_writereg+0x8c>)
 8000ce6:	f003 f871 	bl	8003dcc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf0:	481a      	ldr	r0, [pc, #104]	@ (8000d5c <lcd_writereg+0x8c>)
 8000cf2:	f003 f86b 	bl	8003dcc <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000cf6:	f107 010f 	add.w	r1, r7, #15
 8000cfa:	2364      	movs	r3, #100	@ 0x64
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <lcd_writereg+0x90>)
 8000d00:	f005 ff42 	bl	8006b88 <HAL_SPI_Transmit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0e:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <lcd_writereg+0x8c>)
 8000d10:	f003 f85c 	bl	8003dcc <HAL_GPIO_WritePin>
	if(length > 0)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00c      	beq.n	8000d34 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <lcd_writereg+0x90>)
 8000d26:	f005 ff2f 	bl	8006b88 <HAL_SPI_Transmit>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d3a:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <lcd_writereg+0x8c>)
 8000d3c:	f003 f846 	bl	8003dcc <HAL_GPIO_WritePin>
	if(result>0){
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dd03      	ble.n	8000d4e <lcd_writereg+0x7e>
		result = -1;}
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e001      	b.n	8000d52 <lcd_writereg+0x82>
	else{
		result = 0;}
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
	return result;
 8000d52:	697b      	ldr	r3, [r7, #20]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	240001c8 	.word	0x240001c8

08000d64 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d76:	481b      	ldr	r0, [pc, #108]	@ (8000de4 <lcd_readreg+0x80>)
 8000d78:	f003 f828 	bl	8003dcc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d82:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <lcd_readreg+0x80>)
 8000d84:	f003 f822 	bl	8003dcc <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000d88:	1df9      	adds	r1, r7, #7
 8000d8a:	2364      	movs	r3, #100	@ 0x64
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <lcd_readreg+0x84>)
 8000d90:	f005 fefa 	bl	8006b88 <HAL_SPI_Transmit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <lcd_readreg+0x80>)
 8000da0:	f003 f814 	bl	8003dcc <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8000da4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000da8:	2201      	movs	r2, #1
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <lcd_readreg+0x84>)
 8000dae:	f006 f8d9 	bl	8006f64 <HAL_SPI_Receive>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc2:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <lcd_readreg+0x80>)
 8000dc4:	f003 f802 	bl	8003dcc <HAL_GPIO_WritePin>
	if(result>0){
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd03      	ble.n	8000dd6 <lcd_readreg+0x72>
		result = -1;}
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e001      	b.n	8000dda <lcd_readreg+0x76>
	else{
		result = 0;}
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
	return result;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58021000 	.word	0x58021000
 8000de8:	240001c8 	.word	0x240001c8

08000dec <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dfc:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <lcd_senddata+0x50>)
 8000dfe:	f002 ffe5 	bl	8003dcc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	2364      	movs	r3, #100	@ 0x64
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <lcd_senddata+0x54>)
 8000e0c:	f005 febc 	bl	8006b88 <HAL_SPI_Transmit>
 8000e10:	4603      	mov	r3, r0
 8000e12:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e1a:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <lcd_senddata+0x50>)
 8000e1c:	f002 ffd6 	bl	8003dcc <HAL_GPIO_WritePin>
	if(result>0){
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	dd03      	ble.n	8000e2e <lcd_senddata+0x42>
		result = -1;}
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e001      	b.n	8000e32 <lcd_senddata+0x46>
	else{
		result = 0;}
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
	return result;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58021000 	.word	0x58021000
 8000e40:	240001c8 	.word	0x240001c8

08000e44 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <lcd_recvdata+0x54>)
 8000e56:	f002 ffb9 	bl	8003dcc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <lcd_recvdata+0x58>)
 8000e66:	f006 f87d 	bl	8006f64 <HAL_SPI_Receive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <lcd_recvdata+0x54>)
 8000e76:	f002 ffa9 	bl	8003dcc <HAL_GPIO_WritePin>
	if(result>0){
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd03      	ble.n	8000e88 <lcd_recvdata+0x44>
		result = -1;}
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	e001      	b.n	8000e8c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
	return result;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	58021000 	.word	0x58021000
 8000e9c:	240001c8 	.word	0x240001c8

08000ea0 <MPU_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eb2:	f002 fd4b 	bl	800394c <HAL_MPU_Disable>

	/* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000ebe:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000ec2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 8000ec4:	231b      	movs	r3, #27
 8000ec6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fd68 	bl	80039bc <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000ef4:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000ef8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000efa:	2316      	movs	r3, #22
 8000efc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8000efe:	2305      	movs	r3, #5
 8000f00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fd4d 	bl	80039bc <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f22:	2004      	movs	r0, #4
 8000f24:	f002 fd2a 	bl	800397c <HAL_MPU_Enable>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d11b      	bne.n	8000f7a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f42:	f3bf 8f4f 	dsb	sy
}
 8000f46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f48:	f3bf 8f6f 	isb	sy
}
 8000f4c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f56:	f3bf 8f4f 	dsb	sy
}
 8000f5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f5c:	f3bf 8f6f 	isb	sy
}
 8000f60:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a28      	ldr	r2, [pc, #160]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6e:	f3bf 8f4f 	dsb	sy
}
 8000f72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f74:	f3bf 8f6f 	isb	sy
}
 8000f78:	e000      	b.n	8000f7c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f7a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d138      	bne.n	8000ffa <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	0b5b      	lsrs	r3, r3, #13
 8000fa2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fb0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	015a      	lsls	r2, r3, #5
 8000fb6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000fba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fc0:	4911      	ldr	r1, [pc, #68]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1ef      	bne.n	8000fb2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e5      	bne.n	8000fa8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fdc:	f3bf 8f4f 	dsb	sy
}
 8000fe0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a08      	ldr	r2, [pc, #32]	@ (8001008 <CPU_CACHE_Enable+0xd8>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fee:	f3bf 8f4f 	dsb	sy
}
 8000ff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff4:	f3bf 8f6f 	isb	sy
}
 8000ff8:	e000      	b.n	8000ffc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ffa:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <LED_Blink>:

static void LED_Blink(uint32_t Hdelay,uint32_t Ldelay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2108      	movs	r1, #8
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <LED_Blink+0x3c>)
 800101c:	f002 fed6 	bl	8003dcc <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fb6f 	bl	8003708 <HAL_Delay>
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2108      	movs	r1, #8
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <LED_Blink+0x3c>)
 8001030:	f002 fecc 	bl	8003dcc <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay-1);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fb65 	bl	8003708 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58021000 	.word	0x58021000

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  #ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
  #endif
  MPU_Config();
 8001050:	f7ff ff26 	bl	8000ea0 <MPU_Config>
  CPU_CACHE_Enable();
 8001054:	f7ff ff6c 	bl	8000f30 <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f002 fac4 	bl	80035e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f822 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f7ff f98e 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 8001064:	f000 fbe6 	bl	8001834 <MX_RTC_Init>
  MX_SPI4_Init();
 8001068:	f000 fc72 	bl	8001950 <MX_SPI4_Init>
  MX_TIM1_Init();
 800106c:	f002 f9a0 	bl	80033b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
//	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,10);
	LCD_Test();
 8001070:	f7ff fa0c 	bl	800048c <LCD_Test>
  InitScene();
 8001074:	f000 fa3c 	bl	80014f0 <InitScene>
  InitObstacles();
 8001078:	f000 fb0c 	bl	8001694 <InitObstacles>
    
  bgOffset = 0;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <main+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
  scrollSpeed = 2; // Ensure this is not zero
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <main+0x54>)
 8001084:	2202      	movs	r2, #2
 8001086:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    UpdatePhysics();
 8001088:	f000 fa74 	bl	8001574 <UpdatePhysics>
        
    // Force update background (ensure it's moving)
    ForceUpdateBackground();
 800108c:	f000 f99e 	bl	80013cc <ForceUpdateBackground>
    UpdateObstacles(); // Update obstacles
 8001090:	f000 fb2a 	bl	80016e8 <UpdateObstacles>
    
    // Update scene with new positions
    UpdateScene();
 8001094:	f000 f9ae 	bl	80013f4 <UpdateScene>
  {
 8001098:	bf00      	nop
 800109a:	e7f5      	b.n	8001088 <main+0x3c>
 800109c:	2400015c 	.word	0x2400015c
 80010a0:	2400002d 	.word	0x2400002d

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b09c      	sub	sp, #112	@ 0x70
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ae:	224c      	movs	r2, #76	@ 0x4c
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 f9a6 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2220      	movs	r2, #32
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 f9a0 	bl	8008404 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f002 feab 	bl	8003e20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <SystemClock_Config+0x104>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a35      	ldr	r2, [pc, #212]	@ (80011a8 <SystemClock_Config+0x104>)
 80010d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b33      	ldr	r3, [pc, #204]	@ (80011a8 <SystemClock_Config+0x104>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	4b31      	ldr	r3, [pc, #196]	@ (80011ac <SystemClock_Config+0x108>)
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	4a30      	ldr	r2, [pc, #192]	@ (80011ac <SystemClock_Config+0x108>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <SystemClock_Config+0x108>)
 80010f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010fc:	bf00      	nop
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <SystemClock_Config+0x104>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800110a:	d1f8      	bne.n	80010fe <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800110c:	f002 fe78 	bl	8003e00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001110:	f002 fb1e 	bl	8003750 <HAL_GetREVID>
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <SystemClock_Config+0x10c>)
 8001116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001118:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <SystemClock_Config+0x10c>)
 800111a:	f023 0318 	bic.w	r3, r3, #24
 800111e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001120:	2305      	movs	r3, #5
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	2302      	movs	r3, #2
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001136:	2305      	movs	r3, #5
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800113a:	2360      	movs	r3, #96	@ 0x60
 800113c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800114a:	2308      	movs	r3, #8
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800114e:	2300      	movs	r3, #0
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fe9a 	bl	8003e94 <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001166:	f000 fb5b 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	233f      	movs	r3, #63	@ 0x3f
 800116c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2303      	movs	r3, #3
 8001170:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001176:	2308      	movs	r3, #8
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fada 	bl	8004748 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800119a:	f000 fb41 	bl	8001820 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3770      	adds	r7, #112	@ 0x70
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	58024800 	.word	0x58024800
 80011ac:	58000400 	.word	0x58000400
 80011b0:	58024400 	.word	0x58024400

080011b4 <DrawFox>:

/* USER CODE BEGIN 4 */
void DrawFox(uint16_t x, uint16_t y) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	80fb      	strh	r3, [r7, #6]
 80011c0:	4613      	mov	r3, r2
 80011c2:	80bb      	strh	r3, [r7, #4]
  // Main body
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x, y, 16, 10, BROWN);
 80011c4:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <DrawFox+0x130>)
 80011c6:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80011c8:	88f9      	ldrh	r1, [r7, #6]
 80011ca:	88ba      	ldrh	r2, [r7, #4]
 80011cc:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	230a      	movs	r3, #10
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2310      	movs	r3, #16
 80011d8:	4843      	ldr	r0, [pc, #268]	@ (80012e8 <DrawFox+0x134>)
 80011da:	47a0      	blx	r4
  
  // Head
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 10, y - 6, 10, 10, BROWN);
 80011dc:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <DrawFox+0x130>)
 80011de:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	330a      	adds	r3, #10
 80011e4:	4619      	mov	r1, r3
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	3b06      	subs	r3, #6
 80011ea:	461a      	mov	r2, r3
 80011ec:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	230a      	movs	r3, #10
 80011f8:	483b      	ldr	r0, [pc, #236]	@ (80012e8 <DrawFox+0x134>)
 80011fa:	47a0      	blx	r4
  
  // Eyes
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 14, y - 4, 2, 2, WHITE);
 80011fc:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <DrawFox+0x130>)
 80011fe:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	330e      	adds	r3, #14
 8001204:	4619      	mov	r1, r3
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	3b04      	subs	r3, #4
 800120a:	461a      	mov	r2, r3
 800120c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2302      	movs	r3, #2
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2302      	movs	r3, #2
 8001218:	4833      	ldr	r0, [pc, #204]	@ (80012e8 <DrawFox+0x134>)
 800121a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 18, y - 4, 2, 2, WHITE);
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <DrawFox+0x130>)
 800121e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	3312      	adds	r3, #18
 8001224:	4619      	mov	r1, r3
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	3b04      	subs	r3, #4
 800122a:	461a      	mov	r2, r3
 800122c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2302      	movs	r3, #2
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2302      	movs	r3, #2
 8001238:	482b      	ldr	r0, [pc, #172]	@ (80012e8 <DrawFox+0x134>)
 800123a:	47a0      	blx	r4
  
  // Ears
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 10, y - 10, 3, 4, BROWN);
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <DrawFox+0x130>)
 800123e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	330a      	adds	r3, #10
 8001244:	4619      	mov	r1, r3
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	3b0a      	subs	r3, #10
 800124a:	461a      	mov	r2, r3
 800124c:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2304      	movs	r3, #4
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2303      	movs	r3, #3
 8001258:	4823      	ldr	r0, [pc, #140]	@ (80012e8 <DrawFox+0x134>)
 800125a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 17, y - 10, 3, 4, BROWN);
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <DrawFox+0x130>)
 800125e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	3311      	adds	r3, #17
 8001264:	4619      	mov	r1, r3
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	3b0a      	subs	r3, #10
 800126a:	461a      	mov	r2, r3
 800126c:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2304      	movs	r3, #4
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2303      	movs	r3, #3
 8001278:	481b      	ldr	r0, [pc, #108]	@ (80012e8 <DrawFox+0x134>)
 800127a:	47a0      	blx	r4
  
  // Tail
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 5, y + 2, 5, 4, BROWN);
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <DrawFox+0x130>)
 800127e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3b05      	subs	r3, #5
 8001284:	4619      	mov	r1, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	3302      	adds	r3, #2
 800128a:	461a      	mov	r2, r3
 800128c:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	2304      	movs	r3, #4
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2305      	movs	r3, #5
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <DrawFox+0x134>)
 800129a:	47a0      	blx	r4
  
  // Legs (attached to body's current position)
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 2, y + 10, 2, 5, BROWN);
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <DrawFox+0x130>)
 800129e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	3302      	adds	r3, #2
 80012a4:	4619      	mov	r1, r3
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	330a      	adds	r3, #10
 80012aa:	461a      	mov	r2, r3
 80012ac:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2305      	movs	r3, #5
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2302      	movs	r3, #2
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <DrawFox+0x134>)
 80012ba:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 12, y + 10, 2, 5, BROWN);
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <DrawFox+0x130>)
 80012be:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	330c      	adds	r3, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	330a      	adds	r3, #10
 80012ca:	461a      	mov	r2, r3
 80012cc:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2305      	movs	r3, #5
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <DrawFox+0x134>)
 80012da:	47a0      	blx	r4
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	24000034 	.word	0x24000034
 80012e8:	2400011c 	.word	0x2400011c

080012ec <DrawTree>:

void DrawTree(uint16_t x, uint16_t y) {
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80bb      	strh	r3, [r7, #4]
  // Tree trunk
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 1, y - 20, 3, 20, BROWN);
 80012fc:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <DrawTree+0xd8>)
 80012fe:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	3b01      	subs	r3, #1
 8001304:	4619      	mov	r1, r3
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	3b14      	subs	r3, #20
 800130a:	461a      	mov	r2, r3
 800130c:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	2314      	movs	r3, #20
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2303      	movs	r3, #3
 8001318:	482b      	ldr	r0, [pc, #172]	@ (80013c8 <DrawTree+0xdc>)
 800131a:	47a0      	blx	r4
  
  // Tree foliage (simple triangle shape made of rectangles)
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 6, y - 30, 13, 5, GREEN);
 800131c:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <DrawTree+0xd8>)
 800131e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	3b06      	subs	r3, #6
 8001324:	4619      	mov	r1, r3
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	3b1e      	subs	r3, #30
 800132a:	461a      	mov	r2, r3
 800132c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2305      	movs	r3, #5
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	230d      	movs	r3, #13
 8001338:	4823      	ldr	r0, [pc, #140]	@ (80013c8 <DrawTree+0xdc>)
 800133a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 5, y - 35, 11, 5, GREEN);
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <DrawTree+0xd8>)
 800133e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	3b05      	subs	r3, #5
 8001344:	4619      	mov	r1, r3
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	3b23      	subs	r3, #35	@ 0x23
 800134a:	461a      	mov	r2, r3
 800134c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2305      	movs	r3, #5
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	230b      	movs	r3, #11
 8001358:	481b      	ldr	r0, [pc, #108]	@ (80013c8 <DrawTree+0xdc>)
 800135a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 4, y - 40, 9, 5, GREEN);
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <DrawTree+0xd8>)
 800135e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	3b04      	subs	r3, #4
 8001364:	4619      	mov	r1, r3
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	3b28      	subs	r3, #40	@ 0x28
 800136a:	461a      	mov	r2, r3
 800136c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2305      	movs	r3, #5
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2309      	movs	r3, #9
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <DrawTree+0xdc>)
 800137a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 3, y - 45, 7, 5, GREEN);
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <DrawTree+0xd8>)
 800137e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	3b03      	subs	r3, #3
 8001384:	4619      	mov	r1, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	3b2d      	subs	r3, #45	@ 0x2d
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2305      	movs	r3, #5
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2307      	movs	r3, #7
 8001398:	480b      	ldr	r0, [pc, #44]	@ (80013c8 <DrawTree+0xdc>)
 800139a:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x - 2, y - 50, 5, 5, GREEN);
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <DrawTree+0xd8>)
 800139e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	3b02      	subs	r3, #2
 80013a4:	4619      	mov	r1, r3
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	3b32      	subs	r3, #50	@ 0x32
 80013aa:	461a      	mov	r2, r3
 80013ac:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2305      	movs	r3, #5
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2305      	movs	r3, #5
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <DrawTree+0xdc>)
 80013ba:	47a0      	blx	r4
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	24000034 	.word	0x24000034
 80013c8:	2400011c 	.word	0x2400011c

080013cc <ForceUpdateBackground>:
  if (bgOffset >= ST7735Ctx.Width) {
      bgOffset = 0;
  }
}

void ForceUpdateBackground(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  // Always update the background offset
  bgOffset += scrollSpeed;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <ForceUpdateBackground+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <ForceUpdateBackground+0x24>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <ForceUpdateBackground+0x24>)
 80013e0:	801a      	strh	r2, [r3, #0]
  
  // Create a very small delay to ensure timing is consistent
  HAL_Delay(5);
 80013e2:	2005      	movs	r0, #5
 80013e4:	f002 f990 	bl	8003708 <HAL_Delay>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2400002d 	.word	0x2400002d
 80013f0:	2400015c 	.word	0x2400015c

080013f4 <UpdateScene>:

void UpdateScene(void) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af02      	add	r7, sp, #8
  uint8_t i;
  
  // Always clear the entire sky area
  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width, groundLevel, LIGHTBLUE);
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <UpdateScene+0xdc>)
 80013fc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <UpdateScene+0xe0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a35      	ldr	r2, [pc, #212]	@ (80014d8 <UpdateScene+0xe4>)
 8001404:	8812      	ldrh	r2, [r2, #0]
 8001406:	4611      	mov	r1, r2
 8001408:	f647 527c 	movw	r2, #32124	@ 0x7d7c
 800140c:	9201      	str	r2, [sp, #4]
 800140e:	9100      	str	r1, [sp, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	4831      	ldr	r0, [pc, #196]	@ (80014dc <UpdateScene+0xe8>)
 8001416:	47a0      	blx	r4
  
  // Draw trees in their new positions
  for (i = 0; i < 5; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	e024      	b.n	8001468 <UpdateScene+0x74>
    int16_t treeX = (treePositions[i] - bgOffset) % ST7735Ctx.Width;
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a2f      	ldr	r2, [pc, #188]	@ (80014e0 <UpdateScene+0xec>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	461a      	mov	r2, r3
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <UpdateScene+0xf0>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <UpdateScene+0xe0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	fbb2 f1f3 	udiv	r1, r2, r3
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	80bb      	strh	r3, [r7, #4]
    if (treeX < 0) {
 800143e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da06      	bge.n	8001454 <UpdateScene+0x60>
      treeX += ST7735Ctx.Width;
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <UpdateScene+0xe0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29a      	uxth	r2, r3
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	80bb      	strh	r3, [r7, #4]
    }
    DrawTree(treeX, groundLevel);
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <UpdateScene+0xe4>)
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff45 	bl	80012ec <DrawTree>
  for (i = 0; i < 5; i++) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3301      	adds	r3, #1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d9d7      	bls.n	800141e <UpdateScene+0x2a>
  }
  
  // Redraw the ground
  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, groundLevel, ST7735Ctx.Width, 
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <UpdateScene+0xdc>)
 8001470:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <UpdateScene+0xe4>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <UpdateScene+0xe0>)
 800147a:	681a      	ldr	r2, [r3, #0]
                           ST7735Ctx.Height - groundLevel, GREEN);
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <UpdateScene+0xe0>)
 800147e:	685b      	ldr	r3, [r3, #4]
  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, groundLevel, ST7735Ctx.Width, 
 8001480:	4915      	ldr	r1, [pc, #84]	@ (80014d8 <UpdateScene+0xe4>)
 8001482:	8809      	ldrh	r1, [r1, #0]
 8001484:	1a5b      	subs	r3, r3, r1
 8001486:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800148a:	9101      	str	r1, [sp, #4]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	4602      	mov	r2, r0
 8001492:	2100      	movs	r1, #0
 8001494:	4811      	ldr	r0, [pc, #68]	@ (80014dc <UpdateScene+0xe8>)
 8001496:	47a0      	blx	r4
  ST7735_LCD_Driver.DrawHLine(&st7735_pObj, 0, groundLevel, ST7735Ctx.Width, BROWN);
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <UpdateScene+0xdc>)
 800149a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <UpdateScene+0xe4>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <UpdateScene+0xe0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	460a      	mov	r2, r1
 80014ae:	2100      	movs	r1, #0
 80014b0:	480a      	ldr	r0, [pc, #40]	@ (80014dc <UpdateScene+0xe8>)
 80014b2:	47a0      	blx	r4
  
  // Draw obstacles
  DrawObstacles();
 80014b4:	f000 f98c 	bl	80017d0 <DrawObstacles>
  
  // Draw fox with current position
  DrawFox(foxX, foxY);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <UpdateScene+0xf4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <UpdateScene+0xf8>)
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe76 	bl	80011b4 <DrawFox>
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	24000034 	.word	0x24000034
 80014d4:	24000250 	.word	0x24000250
 80014d8:	24000026 	.word	0x24000026
 80014dc:	2400011c 	.word	0x2400011c
 80014e0:	24000028 	.word	0x24000028
 80014e4:	2400015c 	.word	0x2400015c
 80014e8:	24000022 	.word	0x24000022
 80014ec:	24000024 	.word	0x24000024

080014f0 <InitScene>:
      isJumping = 1;
      foxVelocityY = -8; // Negative velocity for upward movement
  }
}

void InitScene(void) {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af02      	add	r7, sp, #8
  uint8_t text[20];
  
  // Clear the entire screen once
  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width, ST7735Ctx.Height, LIGHTBLUE); // Sky
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <InitScene+0x74>)
 80014f8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <InitScene+0x78>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <InitScene+0x78>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f647 517c 	movw	r1, #32124	@ 0x7d7c
 8001506:	9101      	str	r1, [sp, #4]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	4816      	ldr	r0, [pc, #88]	@ (800156c <InitScene+0x7c>)
 8001512:	47a0      	blx	r4
  
  
  // Initial ground drawing
  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, groundLevel, ST7735Ctx.Width, ST7735Ctx.Height - groundLevel, GREEN);
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <InitScene+0x74>)
 8001516:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <InitScene+0x80>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <InitScene+0x78>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <InitScene+0x78>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4912      	ldr	r1, [pc, #72]	@ (8001570 <InitScene+0x80>)
 8001528:	8809      	ldrh	r1, [r1, #0]
 800152a:	1a5b      	subs	r3, r3, r1
 800152c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8001530:	9101      	str	r1, [sp, #4]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	4602      	mov	r2, r0
 8001538:	2100      	movs	r1, #0
 800153a:	480c      	ldr	r0, [pc, #48]	@ (800156c <InitScene+0x7c>)
 800153c:	47a0      	blx	r4
  ST7735_LCD_Driver.DrawHLine(&st7735_pObj, 0, groundLevel, ST7735Ctx.Width, BROWN);
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <InitScene+0x74>)
 8001540:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <InitScene+0x80>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <InitScene+0x78>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	460a      	mov	r2, r1
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <InitScene+0x7c>)
 8001558:	47a0      	blx	r4
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	24000034 	.word	0x24000034
 8001568:	24000250 	.word	0x24000250
 800156c:	2400011c 	.word	0x2400011c
 8001570:	24000026 	.word	0x24000026

08001574 <UpdatePhysics>:

// Update fox position based on physics
void UpdatePhysics(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  // Check if KEY button is pressed and fox is not already jumping
  if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET && !isJumping) {
 8001578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157c:	481a      	ldr	r0, [pc, #104]	@ (80015e8 <UpdatePhysics+0x74>)
 800157e:	f002 fc0d 	bl	8003d9c <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d109      	bne.n	800159c <UpdatePhysics+0x28>
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <UpdatePhysics+0x78>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <UpdatePhysics+0x28>
      isJumping = 1;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <UpdatePhysics+0x78>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
      foxVelocityY = -8; // Negative velocity for upward movement
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <UpdatePhysics+0x7c>)
 8001598:	22f8      	movs	r2, #248	@ 0xf8
 800159a:	701a      	strb	r2, [r3, #0]
  }
  
  // Only update if fox is jumping
  if (isJumping) {
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <UpdatePhysics+0x78>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01f      	beq.n	80015e4 <UpdatePhysics+0x70>
      // Update position based on velocity
      foxY += foxVelocityY;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <UpdatePhysics+0x7c>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <UpdatePhysics+0x80>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <UpdatePhysics+0x80>)
 80015b6:	801a      	strh	r2, [r3, #0]
      
      // Apply gravity
      foxVelocityY += 1;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <UpdatePhysics+0x7c>)
 80015ba:	f993 3000 	ldrsb.w	r3, [r3]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b25a      	sxtb	r2, r3
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <UpdatePhysics+0x7c>)
 80015c8:	701a      	strb	r2, [r3, #0]
      
      // Check if back on ground
      if (foxY >= 65) {
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <UpdatePhysics+0x80>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	2b40      	cmp	r3, #64	@ 0x40
 80015d0:	d908      	bls.n	80015e4 <UpdatePhysics+0x70>
          foxY = 65;          // Reset to ground position
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <UpdatePhysics+0x80>)
 80015d4:	2241      	movs	r2, #65	@ 0x41
 80015d6:	801a      	strh	r2, [r3, #0]
          foxVelocityY = 0;   // Stop vertical movement
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <UpdatePhysics+0x7c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
          isJumping = 0;      // No longer jumping
 80015de:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <UpdatePhysics+0x78>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
      }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58020800 	.word	0x58020800
 80015ec:	2400015b 	.word	0x2400015b
 80015f0:	2400015a 	.word	0x2400015a
 80015f4:	24000024 	.word	0x24000024

080015f8 <DrawBush>:

void DrawBush(uint16_t x, uint16_t y) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	4613      	mov	r3, r2
 8001606:	80bb      	strh	r3, [r7, #4]
  // Bush base - positioned to be on ground level with height aligned with fox
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x, y - 5, 16, 15, BRRED);
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <DrawBush+0x94>)
 800160a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800160c:	88f9      	ldrh	r1, [r7, #6]
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	3b05      	subs	r3, #5
 8001612:	461a      	mov	r2, r3
 8001614:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	230f      	movs	r3, #15
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2310      	movs	r3, #16
 8001620:	481b      	ldr	r0, [pc, #108]	@ (8001690 <DrawBush+0x98>)
 8001622:	47a0      	blx	r4
  
  // Bush top (rounded effect with smaller rectangles)
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 2, y - 9, 12, 4, GREEN);
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <DrawBush+0x94>)
 8001626:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	3302      	adds	r3, #2
 800162c:	4619      	mov	r1, r3
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	3b09      	subs	r3, #9
 8001632:	461a      	mov	r2, r3
 8001634:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2304      	movs	r3, #4
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	230c      	movs	r3, #12
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <DrawBush+0x98>)
 8001642:	47a0      	blx	r4
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 4, y - 11, 8, 2, GREEN);
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <DrawBush+0x94>)
 8001646:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	3304      	adds	r3, #4
 800164c:	4619      	mov	r1, r3
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	3b0b      	subs	r3, #11
 8001652:	461a      	mov	r2, r3
 8001654:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	2302      	movs	r3, #2
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2308      	movs	r3, #8
 8001660:	480b      	ldr	r0, [pc, #44]	@ (8001690 <DrawBush+0x98>)
 8001662:	47a0      	blx	r4
  
  // Bush details
  ST7735_LCD_Driver.FillRect(&st7735_pObj, x + 7, y - 13, 2, 2, RED); // A little flower/berry
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <DrawBush+0x94>)
 8001666:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	3307      	adds	r3, #7
 800166c:	4619      	mov	r1, r3
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	3b0d      	subs	r3, #13
 8001672:	461a      	mov	r2, r3
 8001674:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	2302      	movs	r3, #2
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2302      	movs	r3, #2
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <DrawBush+0x98>)
 8001682:	47a0      	blx	r4
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	24000034 	.word	0x24000034
 8001690:	2400011c 	.word	0x2400011c

08001694 <InitObstacles>:

// Initialize obstacle system
void InitObstacles() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e00c      	b.n	80016ba <InitObstacles+0x26>
    obstacleActive[i] = 0;
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <InitObstacles+0x44>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
    obstaclePosX[i] = 0;
 80016aa:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <InitObstacles+0x48>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2100      	movs	r1, #0
 80016b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b13      	cmp	r3, #19
 80016be:	ddef      	ble.n	80016a0 <InitObstacles+0xc>
  }
  nextObstacleIndex = 0;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <InitObstacles+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
  lastObstacleTime = HAL_GetTick();
 80016c6:	f002 f813 	bl	80036f0 <HAL_GetTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <InitObstacles+0x50>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	24000188 	.word	0x24000188
 80016dc:	24000160 	.word	0x24000160
 80016e0:	240001a0 	.word	0x240001a0
 80016e4:	2400019c 	.word	0x2400019c

080016e8 <UpdateObstacles>:

// Update and manage obstacles
void UpdateObstacles() {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  uint32_t currentTime = HAL_GetTick();
 80016ee:	f001 ffff 	bl	80036f0 <HAL_GetTick>
 80016f2:	6038      	str	r0, [r7, #0]
  
  // Spawn new obstacle every obstacleInterval milliseconds
  if (currentTime - lastObstacleTime > obstacleInterval) {
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <UpdateObstacles+0xc4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	1ad2      	subs	r2, r2, r3
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <UpdateObstacles+0xc8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d922      	bls.n	800174a <UpdateObstacles+0x62>
    // Always create a new obstacle using circular buffer
    obstacleActive[nextObstacleIndex] = 1;
 8001704:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <UpdateObstacles+0xcc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <UpdateObstacles+0xd0>)
 800170c:	2101      	movs	r1, #1
 800170e:	5499      	strb	r1, [r3, r2]
    obstaclePosX[nextObstacleIndex] = ST7735Ctx.Width; // Start from right edge
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <UpdateObstacles+0xd4>)
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <UpdateObstacles+0xcc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	b289      	uxth	r1, r1
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <UpdateObstacles+0xd8>)
 800171e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    
    // Move to next buffer position (circular)
    nextObstacleIndex = (nextObstacleIndex + 1) % MAX_VISIBLE_OBSTACLES;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <UpdateObstacles+0xcc>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <UpdateObstacles+0xdc>)
 800172a:	fb83 1302 	smull	r1, r3, r3, r2
 800172e:	10d9      	asrs	r1, r3, #3
 8001730:	17d3      	asrs	r3, r2, #31
 8001732:	1ac9      	subs	r1, r1, r3
 8001734:	460b      	mov	r3, r1
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	1ad1      	subs	r1, r2, r3
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <UpdateObstacles+0xcc>)
 8001742:	701a      	strb	r2, [r3, #0]
    
    // Update spawn timer
    lastObstacleTime = currentTime;
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <UpdateObstacles+0xc4>)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6013      	str	r3, [r2, #0]
  }
  
  // Update obstacle positions and check collisions
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e025      	b.n	800179c <UpdateObstacles+0xb4>
    if (obstacleActive[i]) {
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <UpdateObstacles+0xd0>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01c      	beq.n	8001796 <UpdateObstacles+0xae>
      // Move obstacle to the left
      obstaclePosX[i] -= scrollSpeed;
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <UpdateObstacles+0xd8>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001764:	4a18      	ldr	r2, [pc, #96]	@ (80017c8 <UpdateObstacles+0xe0>)
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	b299      	uxth	r1, r3
 800176c:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <UpdateObstacles+0xd8>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      if (obstaclePosX[i] < -20) {
        obstacleActive[i] = 0; // Deactivate
      }
      
      // Check collision with fox
      if (obstaclePosX[i] > foxX - 15 && obstaclePosX[i] < foxX + 20) {
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <UpdateObstacles+0xe4>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	3b0e      	subs	r3, #14
 800177a:	4911      	ldr	r1, [pc, #68]	@ (80017c0 <UpdateObstacles+0xd8>)
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001782:	4293      	cmp	r3, r2
 8001784:	dc07      	bgt.n	8001796 <UpdateObstacles+0xae>
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <UpdateObstacles+0xe4>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	3313      	adds	r3, #19
 800178c:	490c      	ldr	r1, [pc, #48]	@ (80017c0 <UpdateObstacles+0xd8>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001794:	4293      	cmp	r3, r2
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b13      	cmp	r3, #19
 80017a0:	ddd6      	ble.n	8001750 <UpdateObstacles+0x68>
          // gameOver = 1; // Uncomment this to implement game over
        }
      }
    }
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2400019c 	.word	0x2400019c
 80017b0:	24000030 	.word	0x24000030
 80017b4:	240001a0 	.word	0x240001a0
 80017b8:	24000188 	.word	0x24000188
 80017bc:	24000250 	.word	0x24000250
 80017c0:	24000160 	.word	0x24000160
 80017c4:	66666667 	.word	0x66666667
 80017c8:	2400002d 	.word	0x2400002d
 80017cc:	24000022 	.word	0x24000022

080017d0 <DrawObstacles>:

// Draw all active obstacles
void DrawObstacles() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	e012      	b.n	8001802 <DrawObstacles+0x32>
    if (obstacleActive[i]) {
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <DrawObstacles+0x44>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <DrawObstacles+0x2c>
      DrawBush(obstaclePosX[i], groundLevel);
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <DrawObstacles+0x48>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <DrawObstacles+0x4c>)
 80017f2:	8812      	ldrh	r2, [r2, #0]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fefe 	bl	80015f8 <DrawBush>
  for (int i = 0; i < MAX_VISIBLE_OBSTACLES; i++) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b13      	cmp	r3, #19
 8001806:	dde9      	ble.n	80017dc <DrawObstacles+0xc>
    }
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000188 	.word	0x24000188
 8001818:	24000160 	.word	0x24000160
 800181c:	24000026 	.word	0x24000026

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  LED_Blink(500,500);
 8001824:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001828:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800182c:	f7ff fbee 	bl	800100c <LED_Blink>
  /* USER CODE END Error_Handler_Debug */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <MX_RTC_Init+0xb0>)
 800184e:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <MX_RTC_Init+0xb4>)
 8001850:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <MX_RTC_Init+0xb0>)
 8001854:	2200      	movs	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <MX_RTC_Init+0xb0>)
 800185a:	227f      	movs	r2, #127	@ 0x7f
 800185c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <MX_RTC_Init+0xb0>)
 8001860:	22ff      	movs	r2, #255	@ 0xff
 8001862:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_RTC_Init+0xb0>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_RTC_Init+0xb0>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_RTC_Init+0xb0>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_RTC_Init+0xb0>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800187c:	4819      	ldr	r0, [pc, #100]	@ (80018e4 <MX_RTC_Init+0xb0>)
 800187e:	f004 fe01 	bl	8006484 <HAL_RTC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001888:	f7ff ffca 	bl	8001820 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800188c:	2312      	movs	r3, #18
 800188e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001890:	2300      	movs	r3, #0
 8001892:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001894:	2300      	movs	r3, #0
 8001896:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <MX_RTC_Init+0xb0>)
 80018a8:	f004 fe6e 	bl	8006588 <HAL_RTC_SetTime>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80018b2:	f7ff ffb5 	bl	8001820 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018b6:	2301      	movs	r3, #1
 80018b8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80018ba:	2306      	movs	r3, #6
 80018bc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80018be:	2301      	movs	r3, #1
 80018c0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80018c2:	2320      	movs	r3, #32
 80018c4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2201      	movs	r2, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_RTC_Init+0xb0>)
 80018ce:	f004 fef9 	bl	80066c4 <HAL_RTC_SetDate>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80018d8:	f7ff ffa2 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	240001a4 	.word	0x240001a4
 80018e8:	58004000 	.word	0x58004000

080018ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0b2      	sub	sp, #200	@ 0xc8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	22c0      	movs	r2, #192	@ 0xc0
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 fd81 	bl	8008404 <memset>
  if(rtcHandle->Instance==RTC)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <HAL_RTC_MspInit+0x5c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d119      	bne.n	8001940 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800190c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fa3f 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001930:	f7ff ff76 	bl	8001820 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_RTC_MspInit+0x60>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_RTC_MspInit+0x60>)
 800193a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001940:	bf00      	nop
 8001942:	37c8      	adds	r7, #200	@ 0xc8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58004000 	.word	0x58004000
 800194c:	58024400 	.word	0x58024400

08001950 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <MX_SPI4_Init+0xac>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 800195c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001960:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001964:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001968:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 800196c:	2207      	movs	r2, #7
 800196e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 800197e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001982:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001986:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800198a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_SPI4_Init+0xa8>)
 80019e4:	f004 ffac 	bl	8006940 <HAL_SPI_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80019ee:	f7ff ff17 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	240001c8 	.word	0x240001c8
 80019fc:	40013400 	.word	0x40013400

08001a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0ba      	sub	sp, #232	@ 0xe8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	22c0      	movs	r2, #192	@ 0xc0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f006 fcef 	bl	8008404 <memset>
  if(spiHandle->Instance==SPI4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a26      	ldr	r2, [pc, #152]	@ (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d145      	bne.n	8001abc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f9af 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a50:	f7ff fee6 	bl	8001820 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a78:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001a90:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001aaa:	2305      	movs	r3, #5
 8001aac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <HAL_SPI_MspInit+0xcc>)
 8001ab8:	f001 ffc0 	bl	8003a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001abc:	bf00      	nop
 8001abe:	37e8      	adds	r7, #232	@ 0xe8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013400 	.word	0x40013400
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58021000 	.word	0x58021000

08001ad0 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e03a      	b.n	8001b5e <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	891a      	ldrh	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b68 <ST7735_RegisterBusIO+0x98>)
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <ST7735_RegisterBusIO+0x9c>)
 8001b32:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <ST7735_RegisterBusIO+0xa0>)
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <ST7735_RegisterBusIO+0xa4>)
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    pObj->Ctx.handle    = pObj;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30

    if(pObj->IO.Init != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4798      	blx	r3
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	e002      	b.n	8001b5e <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b5c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08002fd9 	.word	0x08002fd9
 8001b6c:	08003001 	.word	0x08003001
 8001b70:	0800302b 	.word	0x0800302b
 8001b74:	0800304f 	.word	0x0800304f

08001b78 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e3a6      	b.n	80022e0 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f103 0020 	add.w	r0, r3, #32
 8001b9c:	f107 0213 	add.w	r2, r7, #19
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	f001 fa92 	bl	80030cc <st7735_write_reg>
 8001ba8:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001baa:	2178      	movs	r1, #120	@ 0x78
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f001 fa60 	bl	8003072 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f103 0020 	add.w	r0, r3, #32
 8001bbc:	f107 0213 	add.w	r2, r7, #19
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	f001 fa82 	bl	80030cc <st7735_write_reg>
 8001bc8:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bca:	2178      	movs	r1, #120	@ 0x78
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f001 fa50 	bl	8003072 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f103 0020 	add.w	r0, r3, #32
 8001bdc:	f107 0213 	add.w	r2, r7, #19
 8001be0:	2301      	movs	r3, #1
 8001be2:	2111      	movs	r1, #17
 8001be4:	f001 fa72 	bl	80030cc <st7735_write_reg>
 8001be8:	4602      	mov	r2, r0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f103 0020 	add.w	r0, r3, #32
 8001bf6:	f107 0213 	add.w	r2, r7, #19
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	21b1      	movs	r1, #177	@ 0xb1
 8001bfe:	f001 fa65 	bl	80030cc <st7735_write_reg>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3320      	adds	r3, #32
 8001c12:	f107 0113 	add.w	r1, r7, #19
 8001c16:	2201      	movs	r2, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fa6c 	bl	80030f6 <st7735_send_data>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c26:	232c      	movs	r3, #44	@ 0x2c
 8001c28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3320      	adds	r3, #32
 8001c2e:	f107 0113 	add.w	r1, r7, #19
 8001c32:	2201      	movs	r2, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fa5e 	bl	80030f6 <st7735_send_data>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c42:	232d      	movs	r3, #45	@ 0x2d
 8001c44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3320      	adds	r3, #32
 8001c4a:	f107 0113 	add.w	r1, r7, #19
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fa50 	bl	80030f6 <st7735_send_data>
 8001c56:	4602      	mov	r2, r0
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f103 0020 	add.w	r0, r3, #32
 8001c68:	f107 0213 	add.w	r2, r7, #19
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	21b2      	movs	r1, #178	@ 0xb2
 8001c70:	f001 fa2c 	bl	80030cc <st7735_write_reg>
 8001c74:	4602      	mov	r2, r0
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c7c:	232c      	movs	r3, #44	@ 0x2c
 8001c7e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3320      	adds	r3, #32
 8001c84:	f107 0113 	add.w	r1, r7, #19
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fa33 	bl	80030f6 <st7735_send_data>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4413      	add	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c98:	232d      	movs	r3, #45	@ 0x2d
 8001c9a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3320      	adds	r3, #32
 8001ca0:	f107 0113 	add.w	r1, r7, #19
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fa25 	bl	80030f6 <st7735_send_data>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f103 0020 	add.w	r0, r3, #32
 8001cbe:	f107 0213 	add.w	r2, r7, #19
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	21b3      	movs	r1, #179	@ 0xb3
 8001cc6:	f001 fa01 	bl	80030cc <st7735_write_reg>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001cd2:	232c      	movs	r3, #44	@ 0x2c
 8001cd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3320      	adds	r3, #32
 8001cda:	f107 0113 	add.w	r1, r7, #19
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fa08 	bl	80030f6 <st7735_send_data>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4413      	add	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001cee:	232d      	movs	r3, #45	@ 0x2d
 8001cf0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3320      	adds	r3, #32
 8001cf6:	f107 0113 	add.w	r1, r7, #19
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 f9fa 	bl	80030f6 <st7735_send_data>
 8001d02:	4602      	mov	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3320      	adds	r3, #32
 8001d12:	f107 0113 	add.w	r1, r7, #19
 8001d16:	2201      	movs	r2, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 f9ec 	bl	80030f6 <st7735_send_data>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d26:	232c      	movs	r3, #44	@ 0x2c
 8001d28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3320      	adds	r3, #32
 8001d2e:	f107 0113 	add.w	r1, r7, #19
 8001d32:	2201      	movs	r2, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f9de 	bl	80030f6 <st7735_send_data>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d42:	232d      	movs	r3, #45	@ 0x2d
 8001d44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3320      	adds	r3, #32
 8001d4a:	f107 0113 	add.w	r1, r7, #19
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 f9d0 	bl	80030f6 <st7735_send_data>
 8001d56:	4602      	mov	r2, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f103 0020 	add.w	r0, r3, #32
 8001d68:	f107 0213 	add.w	r2, r7, #19
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	21b4      	movs	r1, #180	@ 0xb4
 8001d70:	f001 f9ac 	bl	80030cc <st7735_write_reg>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001d7c:	23a2      	movs	r3, #162	@ 0xa2
 8001d7e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f103 0020 	add.w	r0, r3, #32
 8001d86:	f107 0213 	add.w	r2, r7, #19
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	21c0      	movs	r1, #192	@ 0xc0
 8001d8e:	f001 f99d 	bl	80030cc <st7735_write_reg>
 8001d92:	4602      	mov	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4413      	add	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3320      	adds	r3, #32
 8001da2:	f107 0113 	add.w	r1, r7, #19
 8001da6:	2201      	movs	r2, #1
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 f9a4 	bl	80030f6 <st7735_send_data>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001db6:	2384      	movs	r3, #132	@ 0x84
 8001db8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	f107 0113 	add.w	r1, r7, #19
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 f996 	bl	80030f6 <st7735_send_data>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001dd2:	23c5      	movs	r3, #197	@ 0xc5
 8001dd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f103 0020 	add.w	r0, r3, #32
 8001ddc:	f107 0213 	add.w	r2, r7, #19
 8001de0:	2301      	movs	r3, #1
 8001de2:	21c1      	movs	r1, #193	@ 0xc1
 8001de4:	f001 f972 	bl	80030cc <st7735_write_reg>
 8001de8:	4602      	mov	r2, r0
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001df0:	230a      	movs	r3, #10
 8001df2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f103 0020 	add.w	r0, r3, #32
 8001dfa:	f107 0213 	add.w	r2, r7, #19
 8001dfe:	2301      	movs	r3, #1
 8001e00:	21c2      	movs	r1, #194	@ 0xc2
 8001e02:	f001 f963 	bl	80030cc <st7735_write_reg>
 8001e06:	4602      	mov	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3320      	adds	r3, #32
 8001e16:	f107 0113 	add.w	r1, r7, #19
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 f96a 	bl	80030f6 <st7735_send_data>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	4413      	add	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001e2a:	238a      	movs	r3, #138	@ 0x8a
 8001e2c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f103 0020 	add.w	r0, r3, #32
 8001e34:	f107 0213 	add.w	r2, r7, #19
 8001e38:	2301      	movs	r3, #1
 8001e3a:	21c3      	movs	r1, #195	@ 0xc3
 8001e3c:	f001 f946 	bl	80030cc <st7735_write_reg>
 8001e40:	4602      	mov	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001e48:	232a      	movs	r3, #42	@ 0x2a
 8001e4a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3320      	adds	r3, #32
 8001e50:	f107 0113 	add.w	r1, r7, #19
 8001e54:	2201      	movs	r2, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 f94d 	bl	80030f6 <st7735_send_data>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	4413      	add	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001e64:	238a      	movs	r3, #138	@ 0x8a
 8001e66:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f103 0020 	add.w	r0, r3, #32
 8001e6e:	f107 0213 	add.w	r2, r7, #19
 8001e72:	2301      	movs	r3, #1
 8001e74:	21c4      	movs	r1, #196	@ 0xc4
 8001e76:	f001 f929 	bl	80030cc <st7735_write_reg>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001e82:	23ee      	movs	r3, #238	@ 0xee
 8001e84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3320      	adds	r3, #32
 8001e8a:	f107 0113 	add.w	r1, r7, #19
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 f930 	bl	80030f6 <st7735_send_data>
 8001e96:	4602      	mov	r2, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001e9e:	230e      	movs	r3, #14
 8001ea0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f103 0020 	add.w	r0, r3, #32
 8001ea8:	f107 0213 	add.w	r2, r7, #19
 8001eac:	2301      	movs	r3, #1
 8001eae:	21c5      	movs	r1, #197	@ 0xc5
 8001eb0:	f001 f90c 	bl	80030cc <st7735_write_reg>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7b1b      	ldrb	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f103 0020 	add.w	r0, r3, #32
 8001eca:	f107 0213 	add.w	r2, r7, #19
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2121      	movs	r1, #33	@ 0x21
 8001ed2:	f001 f8fb 	bl	80030cc <st7735_write_reg>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e00c      	b.n	8001efa <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f103 0020 	add.w	r0, r3, #32
 8001ee6:	f107 0213 	add.w	r2, r7, #19
 8001eea:	2300      	movs	r3, #0
 8001eec:	2120      	movs	r1, #32
 8001eee:	f001 f8ed 	bl	80030cc <st7735_write_reg>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f103 0020 	add.w	r0, r3, #32
 8001f00:	f107 0208 	add.w	r2, r7, #8
 8001f04:	2301      	movs	r3, #1
 8001f06:	213a      	movs	r1, #58	@ 0x3a
 8001f08:	f001 f8e0 	bl	80030cc <st7735_write_reg>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001f14:	2302      	movs	r3, #2
 8001f16:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f103 0020 	add.w	r0, r3, #32
 8001f1e:	f107 0213 	add.w	r2, r7, #19
 8001f22:	2301      	movs	r3, #1
 8001f24:	21e0      	movs	r1, #224	@ 0xe0
 8001f26:	f001 f8d1 	bl	80030cc <st7735_write_reg>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001f32:	231c      	movs	r3, #28
 8001f34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3320      	adds	r3, #32
 8001f3a:	f107 0113 	add.w	r1, r7, #19
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 f8d8 	bl	80030f6 <st7735_send_data>
 8001f46:	4602      	mov	r2, r0
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3320      	adds	r3, #32
 8001f56:	f107 0113 	add.w	r1, r7, #19
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f8ca 	bl	80030f6 <st7735_send_data>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001f6a:	2312      	movs	r3, #18
 8001f6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3320      	adds	r3, #32
 8001f72:	f107 0113 	add.w	r1, r7, #19
 8001f76:	2201      	movs	r2, #1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 f8bc 	bl	80030f6 <st7735_send_data>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4413      	add	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001f86:	2337      	movs	r3, #55	@ 0x37
 8001f88:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	f107 0113 	add.w	r1, r7, #19
 8001f92:	2201      	movs	r2, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f8ae 	bl	80030f6 <st7735_send_data>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001fa2:	2332      	movs	r3, #50	@ 0x32
 8001fa4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3320      	adds	r3, #32
 8001faa:	f107 0113 	add.w	r1, r7, #19
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f8a0 	bl	80030f6 <st7735_send_data>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4413      	add	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001fbe:	2329      	movs	r3, #41	@ 0x29
 8001fc0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3320      	adds	r3, #32
 8001fc6:	f107 0113 	add.w	r1, r7, #19
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 f892 	bl	80030f6 <st7735_send_data>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001fda:	232d      	movs	r3, #45	@ 0x2d
 8001fdc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	f107 0113 	add.w	r1, r7, #19
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f884 	bl	80030f6 <st7735_send_data>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001ff6:	2329      	movs	r3, #41	@ 0x29
 8001ff8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3320      	adds	r3, #32
 8001ffe:	f107 0113 	add.w	r1, r7, #19
 8002002:	2201      	movs	r2, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f001 f876 	bl	80030f6 <st7735_send_data>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002012:	2325      	movs	r3, #37	@ 0x25
 8002014:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3320      	adds	r3, #32
 800201a:	f107 0113 	add.w	r1, r7, #19
 800201e:	2201      	movs	r2, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f001 f868 	bl	80030f6 <st7735_send_data>
 8002026:	4602      	mov	r2, r0
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 800202e:	232b      	movs	r3, #43	@ 0x2b
 8002030:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3320      	adds	r3, #32
 8002036:	f107 0113 	add.w	r1, r7, #19
 800203a:	2201      	movs	r2, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f85a 	bl	80030f6 <st7735_send_data>
 8002042:	4602      	mov	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4413      	add	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 800204a:	2339      	movs	r3, #57	@ 0x39
 800204c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3320      	adds	r3, #32
 8002052:	f107 0113 	add.w	r1, r7, #19
 8002056:	2201      	movs	r2, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f84c 	bl	80030f6 <st7735_send_data>
 800205e:	4602      	mov	r2, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3320      	adds	r3, #32
 800206e:	f107 0113 	add.w	r1, r7, #19
 8002072:	2201      	movs	r2, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f001 f83e 	bl	80030f6 <st7735_send_data>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002082:	2301      	movs	r3, #1
 8002084:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3320      	adds	r3, #32
 800208a:	f107 0113 	add.w	r1, r7, #19
 800208e:	2201      	movs	r2, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f001 f830 	bl	80030f6 <st7735_send_data>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 800209e:	2303      	movs	r3, #3
 80020a0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3320      	adds	r3, #32
 80020a6:	f107 0113 	add.w	r1, r7, #19
 80020aa:	2201      	movs	r2, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f822 	bl	80030f6 <st7735_send_data>
 80020b2:	4602      	mov	r2, r0
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80020ba:	2310      	movs	r3, #16
 80020bc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3320      	adds	r3, #32
 80020c2:	f107 0113 	add.w	r1, r7, #19
 80020c6:	2201      	movs	r2, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 f814 	bl	80030f6 <st7735_send_data>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4413      	add	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 80020d6:	2303      	movs	r3, #3
 80020d8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f103 0020 	add.w	r0, r3, #32
 80020e0:	f107 0213 	add.w	r2, r7, #19
 80020e4:	2301      	movs	r3, #1
 80020e6:	21e1      	movs	r1, #225	@ 0xe1
 80020e8:	f000 fff0 	bl	80030cc <st7735_write_reg>
 80020ec:	4602      	mov	r2, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 80020f4:	231d      	movs	r3, #29
 80020f6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3320      	adds	r3, #32
 80020fc:	f107 0113 	add.w	r1, r7, #19
 8002100:	2201      	movs	r2, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fff7 	bl	80030f6 <st7735_send_data>
 8002108:	4602      	mov	r2, r0
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4413      	add	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002110:	2307      	movs	r3, #7
 8002112:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3320      	adds	r3, #32
 8002118:	f107 0113 	add.w	r1, r7, #19
 800211c:	2201      	movs	r2, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ffe9 	bl	80030f6 <st7735_send_data>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 800212c:	2306      	movs	r3, #6
 800212e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3320      	adds	r3, #32
 8002134:	f107 0113 	add.w	r1, r7, #19
 8002138:	2201      	movs	r2, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ffdb 	bl	80030f6 <st7735_send_data>
 8002140:	4602      	mov	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002148:	232e      	movs	r3, #46	@ 0x2e
 800214a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3320      	adds	r3, #32
 8002150:	f107 0113 	add.w	r1, r7, #19
 8002154:	2201      	movs	r2, #1
 8002156:	4618      	mov	r0, r3
 8002158:	f000 ffcd 	bl	80030f6 <st7735_send_data>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002164:	232c      	movs	r3, #44	@ 0x2c
 8002166:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3320      	adds	r3, #32
 800216c:	f107 0113 	add.w	r1, r7, #19
 8002170:	2201      	movs	r2, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ffbf 	bl	80030f6 <st7735_send_data>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002180:	2329      	movs	r3, #41	@ 0x29
 8002182:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3320      	adds	r3, #32
 8002188:	f107 0113 	add.w	r1, r7, #19
 800218c:	2201      	movs	r2, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f000 ffb1 	bl	80030f6 <st7735_send_data>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4413      	add	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800219c:	232d      	movs	r3, #45	@ 0x2d
 800219e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3320      	adds	r3, #32
 80021a4:	f107 0113 	add.w	r1, r7, #19
 80021a8:	2201      	movs	r2, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 ffa3 	bl	80030f6 <st7735_send_data>
 80021b0:	4602      	mov	r2, r0
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021b8:	232e      	movs	r3, #46	@ 0x2e
 80021ba:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3320      	adds	r3, #32
 80021c0:	f107 0113 	add.w	r1, r7, #19
 80021c4:	2201      	movs	r2, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 ff95 	bl	80030f6 <st7735_send_data>
 80021cc:	4602      	mov	r2, r0
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021d4:	232e      	movs	r3, #46	@ 0x2e
 80021d6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3320      	adds	r3, #32
 80021dc:	f107 0113 	add.w	r1, r7, #19
 80021e0:	2201      	movs	r2, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 ff87 	bl	80030f6 <st7735_send_data>
 80021e8:	4602      	mov	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80021f0:	2337      	movs	r3, #55	@ 0x37
 80021f2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3320      	adds	r3, #32
 80021f8:	f107 0113 	add.w	r1, r7, #19
 80021fc:	2201      	movs	r2, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 ff79 	bl	80030f6 <st7735_send_data>
 8002204:	4602      	mov	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 800220c:	233f      	movs	r3, #63	@ 0x3f
 800220e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3320      	adds	r3, #32
 8002214:	f107 0113 	add.w	r1, r7, #19
 8002218:	2201      	movs	r2, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f000 ff6b 	bl	80030f6 <st7735_send_data>
 8002220:	4602      	mov	r2, r0
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3320      	adds	r3, #32
 8002230:	f107 0113 	add.w	r1, r7, #19
 8002234:	2201      	movs	r2, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f000 ff5d 	bl	80030f6 <st7735_send_data>
 800223c:	4602      	mov	r2, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3320      	adds	r3, #32
 800224c:	f107 0113 	add.w	r1, r7, #19
 8002250:	2201      	movs	r2, #1
 8002252:	4618      	mov	r0, r3
 8002254:	f000 ff4f 	bl	80030f6 <st7735_send_data>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002260:	2302      	movs	r3, #2
 8002262:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3320      	adds	r3, #32
 8002268:	f107 0113 	add.w	r1, r7, #19
 800226c:	2201      	movs	r2, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff41 	bl	80030f6 <st7735_send_data>
 8002274:	4602      	mov	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4413      	add	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 800227c:	2310      	movs	r3, #16
 800227e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3320      	adds	r3, #32
 8002284:	f107 0113 	add.w	r1, r7, #19
 8002288:	2201      	movs	r2, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f000 ff33 	bl	80030f6 <st7735_send_data>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4413      	add	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f103 0020 	add.w	r0, r3, #32
 80022a2:	f107 0213 	add.w	r2, r7, #19
 80022a6:	2301      	movs	r3, #1
 80022a8:	2113      	movs	r1, #19
 80022aa:	f000 ff0f 	bl	80030cc <st7735_write_reg>
 80022ae:	4602      	mov	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4413      	add	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f103 0020 	add.w	r0, r3, #32
 80022bc:	f107 0213 	add.w	r2, r7, #19
 80022c0:	2301      	movs	r3, #1
 80022c2:	2129      	movs	r1, #41	@ 0x29
 80022c4:	f000 ff02 	bl	80030cc <st7735_write_reg>
 80022c8:	4602      	mov	r2, r0
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f944 	bl	8002560 <ST7735_SetOrientation>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ea:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80022ec:	697b      	ldr	r3, [r7, #20]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3320      	adds	r3, #32
 800231a:	f107 0208 	add.w	r2, r7, #8
 800231e:	21da      	movs	r1, #218	@ 0xda
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fec0 	bl	80030a6 <st7735_read_reg>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e02d      	b.n	8002390 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0020 	add.w	r0, r3, #32
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	3301      	adds	r3, #1
 8002340:	461a      	mov	r2, r3
 8002342:	21db      	movs	r1, #219	@ 0xdb
 8002344:	f000 feaf 	bl	80030a6 <st7735_read_reg>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01c      	b.n	8002390 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 0020 	add.w	r0, r3, #32
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	3302      	adds	r3, #2
 8002362:	461a      	mov	r2, r3
 8002364:	21dc      	movs	r1, #220	@ 0xdc
 8002366:	f000 fe9e 	bl	80030a6 <st7735_read_reg>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e00b      	b.n	8002390 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8002378:	7abb      	ldrb	r3, [r7, #10]
 800237a:	461a      	mov	r2, r3
 800237c:	7a7b      	ldrb	r3, [r7, #9]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	431a      	orrs	r2, r3
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002390:	68fb      	ldr	r3, [r7, #12]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f103 0020 	add.w	r0, r3, #32
 80023ae:	f107 020b 	add.w	r2, r7, #11
 80023b2:	2300      	movs	r3, #0
 80023b4:	2113      	movs	r1, #19
 80023b6:	f000 fe89 	bl	80030cc <st7735_write_reg>
 80023ba:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023bc:	210a      	movs	r1, #10
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fe57 	bl	8003072 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 0020 	add.w	r0, r3, #32
 80023ca:	f107 020b 	add.w	r2, r7, #11
 80023ce:	2300      	movs	r3, #0
 80023d0:	2129      	movs	r1, #41	@ 0x29
 80023d2:	f000 fe7b 	bl	80030cc <st7735_write_reg>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023de:	210a      	movs	r1, #10
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fe46 	bl	8003072 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0020 	add.w	r0, r3, #32
 80023ec:	f107 020b 	add.w	r2, r7, #11
 80023f0:	2300      	movs	r3, #0
 80023f2:	2136      	movs	r1, #54	@ 0x36
 80023f4:	f000 fe6a 	bl	80030cc <st7735_write_reg>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <ST7735_DisplayOn+0xc0>)
 8002402:	7b1b      	ldrb	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <ST7735_DisplayOn+0xc0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <ST7735_DisplayOn+0xc4>)
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e006      	b.n	800242c <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <ST7735_DisplayOn+0xc0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a0f      	ldr	r2, [pc, #60]	@ (8002460 <ST7735_DisplayOn+0xc4>)
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800242a:	b2db      	uxtb	r3, r3
 800242c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3320      	adds	r3, #32
 8002432:	f107 010b 	add.w	r1, r7, #11
 8002436:	2201      	movs	r2, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fe5c 	bl	80030f6 <st7735_send_data>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002450:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000250 	.word	0x24000250
 8002460:	24000080 	.word	0x24000080

08002464 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f103 0020 	add.w	r0, r3, #32
 8002476:	f107 020b 	add.w	r2, r7, #11
 800247a:	2300      	movs	r3, #0
 800247c:	2113      	movs	r1, #19
 800247e:	f000 fe25 	bl	80030cc <st7735_write_reg>
 8002482:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002484:	210a      	movs	r1, #10
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fdf3 	bl	8003072 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0020 	add.w	r0, r3, #32
 8002492:	f107 020b 	add.w	r2, r7, #11
 8002496:	2300      	movs	r3, #0
 8002498:	2128      	movs	r1, #40	@ 0x28
 800249a:	f000 fe17 	bl	80030cc <st7735_write_reg>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80024a6:	210a      	movs	r1, #10
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fde2 	bl	8003072 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0020 	add.w	r0, r3, #32
 80024b4:	f107 020b 	add.w	r2, r7, #11
 80024b8:	2300      	movs	r3, #0
 80024ba:	2136      	movs	r1, #54	@ 0x36
 80024bc:	f000 fe06 	bl	80030cc <st7735_write_reg>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <ST7735_DisplayOff+0xc0>)
 80024ca:	7b1b      	ldrb	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <ST7735_DisplayOff+0xc0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <ST7735_DisplayOff+0xc4>)
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	e006      	b.n	80024f4 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <ST7735_DisplayOff+0xc0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <ST7735_DisplayOff+0xc4>)
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3320      	adds	r3, #32
 80024fa:	f107 010b 	add.w	r1, r7, #11
 80024fe:	2201      	movs	r2, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fdf8 	bl	80030f6 <st7735_send_data>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002518:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	24000250 	.word	0x24000250
 8002528:	24000080 	.word	0x24000080

0800252c <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af02      	add	r7, sp, #8
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <ST7735_SetOrientation+0x1a>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d119      	bne.n	80025ae <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7b5b      	ldrb	r3, [r3, #13]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d106      	bne.n	8002590 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002582:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <ST7735_SetOrientation+0x114>)
 8002584:	2250      	movs	r2, #80	@ 0x50
 8002586:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8002588:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <ST7735_SetOrientation+0x114>)
 800258a:	22a0      	movs	r2, #160	@ 0xa0
 800258c:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800258e:	e028      	b.n	80025e2 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	7b5b      	ldrb	r3, [r3, #13]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <ST7735_SetOrientation+0x40>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7b5b      	ldrb	r3, [r3, #13]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d120      	bne.n	80025e2 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80025a6:	4b33      	ldr	r3, [pc, #204]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025a8:	22a0      	movs	r2, #160	@ 0xa0
 80025aa:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025ac:	e019      	b.n	80025e2 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	7b5b      	ldrb	r3, [r3, #13]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d106      	bne.n	80025c4 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025b8:	22a0      	movs	r2, #160	@ 0xa0
 80025ba:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025be:	2250      	movs	r2, #80	@ 0x50
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e00f      	b.n	80025e4 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7b5b      	ldrb	r3, [r3, #13]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <ST7735_SetOrientation+0x74>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7b5b      	ldrb	r3, [r3, #13]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d107      	bne.n	80025e4 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025d6:	22a0      	movs	r2, #160	@ 0xa0
 80025d8:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80025da:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e000      	b.n	80025e4 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025e2:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025ea:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7b1a      	ldrb	r2, [r3, #12]
 80025f0:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025f2:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7b5a      	ldrb	r2, [r3, #13]
 80025f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025fa:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <ST7735_SetOrientation+0x114>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <ST7735_SetOrientation+0x114>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fbdf 	bl	8002dd0 <ST7735_SetDisplayWindow>
 8002612:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <ST7735_SetOrientation+0x114>)
 8002616:	7b1b      	ldrb	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <ST7735_SetOrientation+0x114>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <ST7735_SetOrientation+0x118>)
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e006      	b.n	8002640 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <ST7735_SetOrientation+0x114>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <ST7735_SetOrientation+0x118>)
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800263e:	b2db      	uxtb	r3, r3
 8002640:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f103 0020 	add.w	r0, r3, #32
 8002648:	f107 020b 	add.w	r2, r7, #11
 800264c:	2301      	movs	r3, #1
 800264e:	2136      	movs	r1, #54	@ 0x36
 8002650:	f000 fd3c 	bl	80030cc <st7735_write_reg>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002666:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	24000250 	.word	0x24000250
 8002678:	24000080 	.word	0x24000080

0800267c <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <ST7735_GetOrientation+0x20>)
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	24000250 	.word	0x24000250

080026a0 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80026ac:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d821      	bhi.n	80026f8 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80026b4:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026b6:	7b5b      	ldrb	r3, [r3, #13]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10e      	bne.n	80026da <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80026bc:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026be:	7b1b      	ldrb	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	331a      	adds	r3, #26
 80026c8:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3301      	adds	r3, #1
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	e033      	b.n	800273a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3318      	adds	r3, #24
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	e02f      	b.n	800273a <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80026da:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026dc:	7b5b      	ldrb	r3, [r3, #13]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d12b      	bne.n	800273a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80026e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026e4:	7b1b      	ldrb	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d127      	bne.n	800273a <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3302      	adds	r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e020      	b.n	800273a <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80026f8:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <ST7735_SetCursor+0x174>)
 80026fa:	7b5b      	ldrb	r3, [r3, #13]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10e      	bne.n	800271e <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002700:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <ST7735_SetCursor+0x174>)
 8002702:	7b1b      	ldrb	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3301      	adds	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	331a      	adds	r3, #26
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e011      	b.n	800273a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3318      	adds	r3, #24
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e00d      	b.n	800273a <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <ST7735_SetCursor+0x174>)
 8002720:	7b5b      	ldrb	r3, [r3, #13]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d109      	bne.n	800273a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <ST7735_SetCursor+0x174>)
 8002728:	7b1b      	ldrb	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3302      	adds	r3, #2
 8002738:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f103 0020 	add.w	r0, r3, #32
 8002740:	f107 0213 	add.w	r2, r7, #19
 8002744:	2300      	movs	r3, #0
 8002746:	212a      	movs	r1, #42	@ 0x2a
 8002748:	f000 fcc0 	bl	80030cc <st7735_write_reg>
 800274c:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b2db      	uxtb	r3, r3
 8002754:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3320      	adds	r3, #32
 800275a:	f107 0113 	add.w	r1, r7, #19
 800275e:	2201      	movs	r2, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fcc8 	bl	80030f6 <st7735_send_data>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3320      	adds	r3, #32
 8002778:	f107 0113 	add.w	r1, r7, #19
 800277c:	2201      	movs	r2, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fcb9 	bl	80030f6 <st7735_send_data>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f103 0020 	add.w	r0, r3, #32
 8002792:	f107 0213 	add.w	r2, r7, #19
 8002796:	2300      	movs	r3, #0
 8002798:	212b      	movs	r1, #43	@ 0x2b
 800279a:	f000 fc97 	bl	80030cc <st7735_write_reg>
 800279e:	4602      	mov	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3320      	adds	r3, #32
 80027b2:	f107 0113 	add.w	r1, r7, #19
 80027b6:	2201      	movs	r2, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc9c 	bl	80030f6 <st7735_send_data>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	4413      	add	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3320      	adds	r3, #32
 80027d0:	f107 0113 	add.w	r1, r7, #19
 80027d4:	2201      	movs	r2, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fc8d 	bl	80030f6 <st7735_send_data>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f103 0020 	add.w	r0, r3, #32
 80027ea:	f107 0213 	add.w	r2, r7, #19
 80027ee:	2300      	movs	r3, #0
 80027f0:	212c      	movs	r1, #44	@ 0x2c
 80027f2:	f000 fc6b 	bl	80030cc <st7735_write_reg>
 80027f6:	4602      	mov	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002808:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800280a:	697b      	ldr	r3, [r7, #20]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	24000250 	.word	0x24000250

08002818 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b090      	sub	sp, #64	@ 0x40
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	330a      	adds	r3, #10
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	330b      	adds	r3, #11
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	441a      	add	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	441a      	add	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	330d      	adds	r3, #13
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4413      	add	r3, r2
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3312      	adds	r3, #18
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3313      	adds	r3, #19
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	441a      	add	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	441a      	add	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3315      	adds	r3, #21
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4413      	add	r3, r2
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3316      	adds	r3, #22
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	3317      	adds	r3, #23
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	441a      	add	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3318      	adds	r3, #24
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	441a      	add	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3319      	adds	r3, #25
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	4413      	add	r3, r2
 80028a4:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	3302      	adds	r3, #2
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3303      	adds	r3, #3
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	441a      	add	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3304      	adds	r3, #4
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	441a      	add	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3305      	adds	r3, #5
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4413      	add	r3, r2
 80028cc:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	4413      	add	r3, r2
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80028de:	4b51      	ldr	r3, [pc, #324]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa6a 	bl	8002dd0 <ST7735_SetDisplayWindow>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
 8002908:	e087      	b.n	8002a1a <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800290a:	4b46      	ldr	r3, [pc, #280]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 800290c:	7b1b      	ldrb	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002912:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4a44      	ldr	r2, [pc, #272]	@ (8002a28 <ST7735_DrawBitmap+0x210>)
 8002918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800291c:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e005      	b.n	8002932 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a28 <ST7735_DrawBitmap+0x210>)
 800292c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002930:	b2db      	uxtb	r3, r3
 8002932:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f103 0020 	add.w	r0, r3, #32
 800293a:	f107 0213 	add.w	r2, r7, #19
 800293e:	2301      	movs	r3, #1
 8002940:	2136      	movs	r1, #54	@ 0x36
 8002942:	f000 fbc3 	bl	80030cc <st7735_write_reg>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002950:	637b      	str	r3, [r7, #52]	@ 0x34
 8002952:	e062      	b.n	8002a1a <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fea1 	bl	80026a0 <ST7735_SetCursor>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
 800296a:	e056      	b.n	8002a1a <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3320      	adds	r3, #32
 800297c:	f107 0114 	add.w	r1, r7, #20
 8002980:	2202      	movs	r2, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fbb7 	bl	80030f6 <st7735_send_data>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8002994:	e009      	b.n	80029aa <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8002996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002998:	3302      	adds	r3, #2
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pbmp += 2;
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	3302      	adds	r3, #2
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
      }while(counter < size);
 80029a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3e0      	bcc.n	800296c <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80029ac:	7b1b      	ldrb	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80029b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <ST7735_DrawBitmap+0x210>)
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e006      	b.n	80029d6 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80029c8:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <ST7735_DrawBitmap+0x210>)
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f103 0020 	add.w	r0, r3, #32
 80029de:	f107 0213 	add.w	r2, r7, #19
 80029e2:	2301      	movs	r3, #1
 80029e4:	2136      	movs	r1, #54	@ 0x36
 80029e6:	f000 fb71 	bl	80030cc <st7735_write_reg>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f6:	e010      	b.n	8002a1a <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <ST7735_DrawBitmap+0x20c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9e1 	bl	8002dd0 <ST7735_SetDisplayWindow>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
  }

  return ret;
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3738      	adds	r7, #56	@ 0x38
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	24000250 	.word	0x24000250
 8002a28:	24000080 	.word	0x24000080

08002a2c <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	441a      	add	r2, r3
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <ST7735_FillRGBRect+0xcc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d806      	bhi.n	8002a5e <ST7735_FillRGBRect+0x32>
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a54:	441a      	add	r2, r3
 8002a56:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <ST7735_FillRGBRect+0xcc>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d903      	bls.n	8002a66 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	e042      	b.n	8002aec <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e03b      	b.n	8002ae4 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff fe12 	bl	80026a0 <ST7735_SetCursor>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	e029      	b.n	8002ade <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e013      	b.n	8002ab8 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	7811      	ldrb	r1, [r2, #0]
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <ST7735_FillRGBRect+0xd0>)
 8002a9a:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	7811      	ldrb	r1, [r2, #0]
 8002aa8:	4a14      	ldr	r2, [pc, #80]	@ (8002afc <ST7735_FillRGBRect+0xd0>)
 8002aaa:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3302      	adds	r3, #2
 8002ab0:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3e7      	bcc.n	8002a90 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f103 0020 	add.w	r0, r3, #32
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	461a      	mov	r2, r3
 8002acc:	490b      	ldr	r1, [pc, #44]	@ (8002afc <ST7735_FillRGBRect+0xd0>)
 8002ace:	f000 fb12 	bl	80030f6 <st7735_send_data>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002adc:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3bf      	bcc.n	8002a6c <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002aec:	69fb      	ldr	r3, [r7, #28]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	24000250 	.word	0x24000250
 8002afc:	24000260 	.word	0x24000260

08002b00 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	441a      	add	r2, r3
 8002b18:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <ST7735_DrawHLine+0x98>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d903      	bls.n	8002b28 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e032      	b.n	8002b8e <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fdb7 	bl	80026a0 <ST7735_SetCursor>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e026      	b.n	8002b8e <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e010      	b.n	8002b68 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	0a1a      	lsrs	r2, r3, #8
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	b2d1      	uxtb	r1, r2
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <ST7735_DrawHLine+0x9c>)
 8002b52:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	3301      	adds	r3, #1
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	b2d1      	uxtb	r1, r2
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <ST7735_DrawHLine+0x9c>)
 8002b60:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	3301      	adds	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3ea      	bcc.n	8002b46 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f103 0020 	add.w	r0, r3, #32
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <ST7735_DrawHLine+0x9c>)
 8002b7e:	f000 faba 	bl	80030f6 <st7735_send_data>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	24000250 	.word	0x24000250
 8002b9c:	240004e0 	.word	0x240004e0

08002ba0 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	441a      	add	r2, r3
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <ST7735_DrawVLine+0x64>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d903      	bls.n	8002bc8 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e018      	b.n	8002bfa <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e011      	b.n	8002bf2 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f841 	bl	8002c60 <ST7735_SetPixel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002be8:	617b      	str	r3, [r7, #20]
        break;
 8002bea:	e006      	b.n	8002bfa <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3e9      	bcc.n	8002bce <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002bfa:	697b      	ldr	r3, [r7, #20]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	24000250 	.word	0x24000250

08002c08 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	e014      	b.n	8002c4e <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f7ff ff66 	bl	8002b00 <ST7735_DrawHLine>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c3e:	61fb      	str	r3, [r7, #28]
      break;
 8002c40:	e009      	b.n	8002c56 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3301      	adds	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d3e6      	bcc.n	8002c24 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002c56:	69fb      	ldr	r3, [r7, #28]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002c8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <ST7735_SetPixel+0x84>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d204      	bcs.n	8002c9e <ST7735_SetPixel+0x3e>
 8002c94:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <ST7735_SetPixel+0x84>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d303      	bcc.n	8002ca6 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e019      	b.n	8002cda <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff fcf8 	bl	80026a0 <ST7735_SetCursor>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00d      	b.n	8002cda <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	f107 0112 	add.w	r1, r7, #18
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fa14 	bl	80030f6 <st7735_send_data>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cd8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002cda:	697b      	ldr	r3, [r7, #20]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	24000250 	.word	0x24000250

08002ce8 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff fcd0 	bl	80026a0 <ST7735_SetCursor>
 8002d00:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3320      	adds	r3, #32
 8002d06:	f107 0211 	add.w	r2, r7, #17
 8002d0a:	212e      	movs	r1, #46	@ 0x2e
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f9ca 	bl	80030a6 <st7735_read_reg>
 8002d12:	4602      	mov	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4413      	add	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3320      	adds	r3, #32
 8002d1e:	f107 0111 	add.w	r1, r7, #17
 8002d22:	2201      	movs	r2, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f9f8 	bl	800311a <st7735_recv_data>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4413      	add	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3320      	adds	r3, #32
 8002d36:	f107 0113 	add.w	r1, r7, #19
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f9ec 	bl	800311a <st7735_recv_data>
 8002d42:	4602      	mov	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3320      	adds	r3, #32
 8002d4e:	f107 0112 	add.w	r1, r7, #18
 8002d52:	2201      	movs	r2, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f9e0 	bl	800311a <st7735_recv_data>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4413      	add	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	461a      	mov	r2, r3
 8002d66:	7cbb      	ldrb	r3, [r7, #18]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	441a      	add	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002d7c:	697b      	ldr	r3, [r7, #20]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <ST7735_GetXSize+0x20>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	24000250 	.word	0x24000250

08002dac <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <ST7735_GetYSize+0x20>)
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	24000250 	.word	0x24000250

08002dd0 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002dde:	4b7d      	ldr	r3, [pc, #500]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d821      	bhi.n	8002e2a <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002de6:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002de8:	7b5b      	ldrb	r3, [r3, #13]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10e      	bne.n	8002e0c <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002dee:	4b79      	ldr	r3, [pc, #484]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002df0:	7b1b      	ldrb	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	331a      	adds	r3, #26
 8002dfa:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	e036      	b.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3318      	adds	r3, #24
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	e032      	b.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e0c:	4b71      	ldr	r3, [pc, #452]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e0e:	7b5b      	ldrb	r3, [r3, #13]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d12e      	bne.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e16:	7b1b      	ldrb	r3, [r3, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d12a      	bne.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3301      	adds	r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	e023      	b.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e2c:	7b5b      	ldrb	r3, [r3, #13]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d111      	bne.n	8002e56 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002e32:	4b68      	ldr	r3, [pc, #416]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e34:	7b1b      	ldrb	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	331a      	adds	r3, #26
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	e014      	b.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3318      	adds	r3, #24
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	e00d      	b.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e56:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e58:	7b5b      	ldrb	r3, [r3, #13]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d109      	bne.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd4 <ST7735_SetDisplayWindow+0x204>)
 8002e60:	7b1b      	ldrb	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d105      	bne.n	8002e72 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f103 0020 	add.w	r0, r3, #32
 8002e78:	f107 0213 	add.w	r2, r7, #19
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	212a      	movs	r1, #42	@ 0x2a
 8002e80:	f000 f924 	bl	80030cc <st7735_write_reg>
 8002e84:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3320      	adds	r3, #32
 8002e92:	f107 0113 	add.w	r1, r7, #19
 8002e96:	2201      	movs	r2, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f92c 	bl	80030f6 <st7735_send_data>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3320      	adds	r3, #32
 8002eb0:	f107 0113 	add.w	r1, r7, #19
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f91d 	bl	80030f6 <st7735_send_data>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3320      	adds	r3, #32
 8002ed6:	f107 0113 	add.w	r1, r7, #19
 8002eda:	2201      	movs	r2, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f90a 	bl	80030f6 <st7735_send_data>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3320      	adds	r3, #32
 8002f00:	f107 0113 	add.w	r1, r7, #19
 8002f04:	2201      	movs	r2, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f8f5 	bl	80030f6 <st7735_send_data>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f103 0020 	add.w	r0, r3, #32
 8002f1a:	f107 0213 	add.w	r2, r7, #19
 8002f1e:	2300      	movs	r3, #0
 8002f20:	212b      	movs	r1, #43	@ 0x2b
 8002f22:	f000 f8d3 	bl	80030cc <st7735_write_reg>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3320      	adds	r3, #32
 8002f3a:	f107 0113 	add.w	r1, r7, #19
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f8d8 	bl	80030f6 <st7735_send_data>
 8002f46:	4602      	mov	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3320      	adds	r3, #32
 8002f58:	f107 0113 	add.w	r1, r7, #19
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f8c9 	bl	80030f6 <st7735_send_data>
 8002f64:	4602      	mov	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	4413      	add	r3, r2
 8002f72:	3b01      	subs	r3, #1
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3320      	adds	r3, #32
 8002f7e:	f107 0113 	add.w	r1, r7, #19
 8002f82:	2201      	movs	r2, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f8b6 	bl	80030f6 <st7735_send_data>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3320      	adds	r3, #32
 8002fa8:	f107 0113 	add.w	r1, r7, #19
 8002fac:	2201      	movs	r2, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f8a1 	bl	80030f6 <st7735_send_data>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4413      	add	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fc6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002fc8:	697b      	ldr	r3, [r7, #20]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	24000250 	.word	0x24000250

08002fd8 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	7afa      	ldrb	r2, [r7, #11]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4798      	blx	r3
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	460b      	mov	r3, r1
 800300e:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	7af8      	ldrb	r0, [r7, #11]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68b8      	ldr	r0, [r7, #8]
 8003042:	4798      	blx	r3
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68b8      	ldr	r0, [r7, #8]
 8003066:	4798      	blx	r3
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4798      	blx	r3
 8003082:	4603      	mov	r3, r0
 8003084:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003086:	bf00      	nop
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4798      	blx	r3
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f5      	bhi.n	8003088 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	460b      	mov	r3, r1
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6910      	ldr	r0, [r2, #16]
 80030bc:	7af9      	ldrb	r1, [r7, #11]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4798      	blx	r3
 80030c2:	4603      	mov	r3, r0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	460b      	mov	r3, r1
 80030da:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681c      	ldr	r4, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6918      	ldr	r0, [r3, #16]
 80030e4:	7af9      	ldrb	r1, [r7, #11]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	47a0      	blx	r4
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6910      	ldr	r0, [r2, #16]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4798      	blx	r3
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	6910      	ldr	r0, [r2, #16]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4798      	blx	r3
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <HAL_MspInit+0x30>)
 8003148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800314c:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <HAL_MspInit+0x30>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_MspInit+0x30>)
 8003158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	58024400 	.word	0x58024400

08003174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <NMI_Handler+0x4>

0800317c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <HardFault_Handler+0x4>

08003184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <MemManage_Handler+0x4>

0800318c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <BusFault_Handler+0x4>

08003194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <UsageFault_Handler+0x4>

0800319c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ca:	f000 fa7d 	bl	80036c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f005 f906 	bl	8008414 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	24080000 	.word	0x24080000
 8003234:	00000400 	.word	0x00000400
 8003238:	24000760 	.word	0x24000760
 800323c:	24000900 	.word	0x24000900

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003244:	4b43      	ldr	r3, [pc, #268]	@ (8003354 <SystemInit+0x114>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	4a42      	ldr	r2, [pc, #264]	@ (8003354 <SystemInit+0x114>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003254:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <SystemInit+0x118>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2b06      	cmp	r3, #6
 800325e:	d807      	bhi.n	8003270 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003260:	4b3d      	ldr	r3, [pc, #244]	@ (8003358 <SystemInit+0x118>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	4a3b      	ldr	r2, [pc, #236]	@ (8003358 <SystemInit+0x118>)
 800326a:	f043 0307 	orr.w	r3, r3, #7
 800326e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003270:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <SystemInit+0x11c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a39      	ldr	r2, [pc, #228]	@ (800335c <SystemInit+0x11c>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800327c:	4b37      	ldr	r3, [pc, #220]	@ (800335c <SystemInit+0x11c>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <SystemInit+0x11c>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4935      	ldr	r1, [pc, #212]	@ (800335c <SystemInit+0x11c>)
 8003288:	4b35      	ldr	r3, [pc, #212]	@ (8003360 <SystemInit+0x120>)
 800328a:	4013      	ands	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800328e:	4b32      	ldr	r3, [pc, #200]	@ (8003358 <SystemInit+0x118>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800329a:	4b2f      	ldr	r3, [pc, #188]	@ (8003358 <SystemInit+0x118>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 030f 	bic.w	r3, r3, #15
 80032a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003358 <SystemInit+0x118>)
 80032a4:	f043 0307 	orr.w	r3, r3, #7
 80032a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032aa:	4b2c      	ldr	r3, [pc, #176]	@ (800335c <SystemInit+0x11c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032b0:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <SystemInit+0x11c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032b6:	4b29      	ldr	r3, [pc, #164]	@ (800335c <SystemInit+0x11c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032bc:	4b27      	ldr	r3, [pc, #156]	@ (800335c <SystemInit+0x11c>)
 80032be:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <SystemInit+0x124>)
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032c2:	4b26      	ldr	r3, [pc, #152]	@ (800335c <SystemInit+0x11c>)
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <SystemInit+0x128>)
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032c8:	4b24      	ldr	r3, [pc, #144]	@ (800335c <SystemInit+0x11c>)
 80032ca:	4a28      	ldr	r2, [pc, #160]	@ (800336c <SystemInit+0x12c>)
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032ce:	4b23      	ldr	r3, [pc, #140]	@ (800335c <SystemInit+0x11c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032d4:	4b21      	ldr	r3, [pc, #132]	@ (800335c <SystemInit+0x11c>)
 80032d6:	4a25      	ldr	r2, [pc, #148]	@ (800336c <SystemInit+0x12c>)
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032da:	4b20      	ldr	r3, [pc, #128]	@ (800335c <SystemInit+0x11c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <SystemInit+0x11c>)
 80032e2:	4a22      	ldr	r2, [pc, #136]	@ (800336c <SystemInit+0x12c>)
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032e6:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <SystemInit+0x11c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <SystemInit+0x11c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <SystemInit+0x11c>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032f8:	4b18      	ldr	r3, [pc, #96]	@ (800335c <SystemInit+0x11c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <SystemInit+0x130>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <SystemInit+0x134>)
 8003304:	4013      	ands	r3, r2
 8003306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800330a:	d202      	bcs.n	8003312 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <SystemInit+0x138>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003312:	4b12      	ldr	r3, [pc, #72]	@ (800335c <SystemInit+0x11c>)
 8003314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d113      	bne.n	8003348 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003320:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <SystemInit+0x11c>)
 8003322:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003326:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <SystemInit+0x11c>)
 8003328:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800332c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003330:	4b12      	ldr	r3, [pc, #72]	@ (800337c <SystemInit+0x13c>)
 8003332:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003336:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <SystemInit+0x11c>)
 800333a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800333e:	4a07      	ldr	r2, [pc, #28]	@ (800335c <SystemInit+0x11c>)
 8003340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003344:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000ed00 	.word	0xe000ed00
 8003358:	52002000 	.word	0x52002000
 800335c:	58024400 	.word	0x58024400
 8003360:	eaf6ed7f 	.word	0xeaf6ed7f
 8003364:	02020200 	.word	0x02020200
 8003368:	01ff0000 	.word	0x01ff0000
 800336c:	01010280 	.word	0x01010280
 8003370:	5c001000 	.word	0x5c001000
 8003374:	ffff0000 	.word	0xffff0000
 8003378:	51008108 	.word	0x51008108
 800337c:	52004000 	.word	0x52004000

08003380 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003384:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <ExitRun0Mode+0x2c>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a08      	ldr	r2, [pc, #32]	@ (80033ac <ExitRun0Mode+0x2c>)
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003390:	bf00      	nop
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <ExitRun0Mode+0x2c>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f9      	beq.n	8003392 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	58024800 	.word	0x58024800

080033b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b096      	sub	sp, #88	@ 0x58
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	615a      	str	r2, [r3, #20]
 80033d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	222c      	movs	r2, #44	@ 0x2c
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 f811 	bl	8008404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e2:	4b39      	ldr	r3, [pc, #228]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80033e4:	4a39      	ldr	r2, [pc, #228]	@ (80034cc <MX_TIM1_Init+0x11c>)
 80033e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 80033e8:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80033ea:	220b      	movs	r2, #11
 80033ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ee:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80033f4:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80033f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fc:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003402:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <MX_TIM1_Init+0x118>)
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <MX_TIM1_Init+0x118>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800340e:	482e      	ldr	r0, [pc, #184]	@ (80034c8 <MX_TIM1_Init+0x118>)
 8003410:	f004 f903 	bl	800761a <HAL_TIM_PWM_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800341a:	f7fe fa01 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800342a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800342e:	4619      	mov	r1, r3
 8003430:	4825      	ldr	r0, [pc, #148]	@ (80034c8 <MX_TIM1_Init+0x118>)
 8003432:	f004 fe95 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800343c:	f7fe f9f0 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003440:	2360      	movs	r3, #96	@ 0x60
 8003442:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003448:	2300      	movs	r3, #0
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800344c:	2308      	movs	r3, #8
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800345c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003460:	2204      	movs	r2, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4818      	ldr	r0, [pc, #96]	@ (80034c8 <MX_TIM1_Init+0x118>)
 8003466:	f004 f92f 	bl	80076c8 <HAL_TIM_PWM_ConfigChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003470:	f7fe f9d6 	bl	8001820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003488:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800348c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4807      	ldr	r0, [pc, #28]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80034aa:	f004 fee7 	bl	800827c <HAL_TIMEx_ConfigBreakDeadTime>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80034b4:	f7fe f9b4 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034b8:	4803      	ldr	r0, [pc, #12]	@ (80034c8 <MX_TIM1_Init+0x118>)
 80034ba:	f000 f82b 	bl	8003514 <HAL_TIM_MspPostInit>

}
 80034be:	bf00      	nop
 80034c0:	3758      	adds	r7, #88	@ 0x58
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	24000764 	.word	0x24000764
 80034cc:	40010000 	.word	0x40010000

080034d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	@ (800350c <HAL_TIM_PWM_MspInit+0x3c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_TIM_PWM_MspInit+0x40>)
 80034e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e8:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_TIM_PWM_MspInit+0x40>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <HAL_TIM_PWM_MspInit+0x40>)
 80034f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40010000 	.word	0x40010000
 8003510:	58024400 	.word	0x58024400

08003514 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a13      	ldr	r2, [pc, #76]	@ (8003580 <HAL_TIM_MspPostInit+0x6c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d11f      	bne.n	8003576 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003536:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <HAL_TIM_MspPostInit+0x70>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353c:	4a11      	ldr	r2, [pc, #68]	@ (8003584 <HAL_TIM_MspPostInit+0x70>)
 800353e:	f043 0310 	orr.w	r3, r3, #16
 8003542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003546:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_TIM_MspPostInit+0x70>)
 8003548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003558:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	@ (8003588 <HAL_TIM_MspPostInit+0x74>)
 8003572:	f000 fa63 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	58024400 	.word	0x58024400
 8003588:	58021000 	.word	0x58021000

0800358c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800358c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80035c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003590:	f7ff fef6 	bl	8003380 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003594:	f7ff fe54 	bl	8003240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003598:	480c      	ldr	r0, [pc, #48]	@ (80035cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800359a:	490d      	ldr	r1, [pc, #52]	@ (80035d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800359c:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a0:	e002      	b.n	80035a8 <LoopCopyDataInit>

080035a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a6:	3304      	adds	r3, #4

080035a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ac:	d3f9      	bcc.n	80035a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035b0:	4c0a      	ldr	r4, [pc, #40]	@ (80035dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b4:	e001      	b.n	80035ba <LoopFillZerobss>

080035b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b8:	3204      	adds	r2, #4

080035ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035bc:	d3fb      	bcc.n	80035b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035be:	f004 ff2f 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c2:	f7fd fd43 	bl	800104c <main>
  bx  lr
 80035c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80035cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80035d0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80035d4:	0800fc54 	.word	0x0800fc54
  ldr r2, =_sbss
 80035d8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80035dc:	240008fc 	.word	0x240008fc

080035e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <ADC3_IRQHandler>
	...

080035e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ea:	2003      	movs	r0, #3
 80035ec:	f000 f97c 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f0:	f001 fa60 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b15      	ldr	r3, [pc, #84]	@ (800364c <HAL_Init+0x68>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	4913      	ldr	r1, [pc, #76]	@ (8003650 <HAL_Init+0x6c>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <HAL_Init+0x68>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	4a0e      	ldr	r2, [pc, #56]	@ (8003650 <HAL_Init+0x6c>)
 8003618:	5cd3      	ldrb	r3, [r2, r3]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	4a0b      	ldr	r2, [pc, #44]	@ (8003654 <HAL_Init+0x70>)
 8003626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003628:	4a0b      	ldr	r2, [pc, #44]	@ (8003658 <HAL_Init+0x74>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800362e:	2000      	movs	r0, #0
 8003630:	f000 f814 	bl	800365c <HAL_InitTick>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e002      	b.n	8003644 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800363e:	f7ff fd7f 	bl	8003140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	58024400 	.word	0x58024400
 8003650:	0800fc00 	.word	0x0800fc00
 8003654:	240000a4 	.word	0x240000a4
 8003658:	240000a0 	.word	0x240000a0

0800365c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003664:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_InitTick+0x60>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e021      	b.n	80036b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003670:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <HAL_InitTick+0x64>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_InitTick+0x60>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800367e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f953 	bl	8003932 <HAL_SYSTICK_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00e      	b.n	80036b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d80a      	bhi.n	80036b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369c:	2200      	movs	r2, #0
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036a4:	f000 f92b 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a8:	4a06      	ldr	r2, [pc, #24]	@ (80036c4 <HAL_InitTick+0x68>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	240000ac 	.word	0x240000ac
 80036c0:	240000a0 	.word	0x240000a0
 80036c4:	240000a8 	.word	0x240000a8

080036c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	240000ac 	.word	0x240000ac
 80036ec:	240007b0 	.word	0x240007b0

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	240007b0 	.word	0x240007b0

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	240000ac 	.word	0x240000ac

08003750 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_GetREVID+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0c1b      	lsrs	r3, r3, #16
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	5c001000 	.word	0x5c001000

08003768 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_GetDEVID+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	5c001000 	.word	0x5c001000

08003784 <__NVIC_SetPriorityGrouping>:
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b2:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x40>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60d3      	str	r3, [r2, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00
 80037c8:	05fa0000 	.word	0x05fa0000

080037cc <__NVIC_GetPriorityGrouping>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <__NVIC_GetPriorityGrouping+0x18>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0307 	and.w	r3, r3, #7
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_SetPriority>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	@ (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	@ (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff47 	bl	8003784 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff5e 	bl	80037cc <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ffb2 	bl	80038a4 <SysTick_Config>
 8003940:	4603      	mov	r3, r0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003950:	f3bf 8f5f 	dmb	sy
}
 8003954:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003956:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <HAL_MPU_Disable+0x28>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <HAL_MPU_Disable+0x28>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003960:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_MPU_Disable+0x2c>)
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00
 8003978:	e000ed90 	.word	0xe000ed90

0800397c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003984:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <HAL_MPU_Enable+0x38>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_MPU_Enable+0x3c>)
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	4a09      	ldr	r2, [pc, #36]	@ (80039b8 <HAL_MPU_Enable+0x3c>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003998:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800399a:	f3bf 8f4f 	dsb	sy
}
 800399e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039a0:	f3bf 8f6f 	isb	sy
}
 80039a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000ed90 	.word	0xe000ed90
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	785a      	ldrb	r2, [r3, #1]
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_MPU_ConfigRegion+0x7c>)
 80039ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <HAL_MPU_ConfigRegion+0x7c>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	4a19      	ldr	r2, [pc, #100]	@ (8003a38 <HAL_MPU_ConfigRegion+0x7c>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80039d8:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <HAL_MPU_ConfigRegion+0x7c>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7b1b      	ldrb	r3, [r3, #12]
 80039e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7adb      	ldrb	r3, [r3, #11]
 80039ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7a9b      	ldrb	r3, [r3, #10]
 80039f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7b5b      	ldrb	r3, [r3, #13]
 80039fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7b9b      	ldrb	r3, [r3, #14]
 8003a02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7bdb      	ldrb	r3, [r3, #15]
 8003a0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7a5b      	ldrb	r3, [r3, #9]
 8003a12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7a1b      	ldrb	r3, [r3, #8]
 8003a1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a28:	6113      	str	r3, [r2, #16]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000ed90 	.word	0xe000ed90

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a4a:	4b89      	ldr	r3, [pc, #548]	@ (8003c70 <HAL_GPIO_Init+0x234>)
 8003a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a4e:	e194      	b.n	8003d7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8186 	beq.w	8003d74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d005      	beq.n	8003a80 <HAL_GPIO_Init+0x44>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d130      	bne.n	8003ae2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0201 	and.w	r2, r3, #1
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d017      	beq.n	8003b1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d123      	bne.n	8003b72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0203 	and.w	r2, r3, #3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80e0 	beq.w	8003d74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <HAL_GPIO_Init+0x238>)
 8003bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bba:	4a2e      	ldr	r2, [pc, #184]	@ (8003c74 <HAL_GPIO_Init+0x238>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <HAL_GPIO_Init+0x238>)
 8003bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bd2:	4a29      	ldr	r2, [pc, #164]	@ (8003c78 <HAL_GPIO_Init+0x23c>)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a20      	ldr	r2, [pc, #128]	@ (8003c7c <HAL_GPIO_Init+0x240>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d052      	beq.n	8003ca4 <HAL_GPIO_Init+0x268>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <HAL_GPIO_Init+0x244>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_GPIO_Init+0x22e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <HAL_GPIO_Init+0x248>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02b      	beq.n	8003c66 <HAL_GPIO_Init+0x22a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_GPIO_Init+0x24c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d025      	beq.n	8003c62 <HAL_GPIO_Init+0x226>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_GPIO_Init+0x250>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01f      	beq.n	8003c5e <HAL_GPIO_Init+0x222>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_GPIO_Init+0x254>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x21e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1a      	ldr	r2, [pc, #104]	@ (8003c94 <HAL_GPIO_Init+0x258>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x21a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <HAL_GPIO_Init+0x25c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x216>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a18      	ldr	r2, [pc, #96]	@ (8003c9c <HAL_GPIO_Init+0x260>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x212>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <HAL_GPIO_Init+0x264>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x20e>
 8003c46:	2309      	movs	r3, #9
 8003c48:	e02d      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	e02b      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	e029      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e027      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c56:	2306      	movs	r3, #6
 8003c58:	e025      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c5a:	2305      	movs	r3, #5
 8003c5c:	e023      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	e021      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c62:	2303      	movs	r3, #3
 8003c64:	e01f      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e01d      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e01b      	b.n	8003ca6 <HAL_GPIO_Init+0x26a>
 8003c6e:	bf00      	nop
 8003c70:	58000080 	.word	0x58000080
 8003c74:	58024400 	.word	0x58024400
 8003c78:	58000400 	.word	0x58000400
 8003c7c:	58020000 	.word	0x58020000
 8003c80:	58020400 	.word	0x58020400
 8003c84:	58020800 	.word	0x58020800
 8003c88:	58020c00 	.word	0x58020c00
 8003c8c:	58021000 	.word	0x58021000
 8003c90:	58021400 	.word	0x58021400
 8003c94:	58021800 	.word	0x58021800
 8003c98:	58021c00 	.word	0x58021c00
 8003c9c:	58022000 	.word	0x58022000
 8003ca0:	58022400 	.word	0x58022400
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	f002 0203 	and.w	r2, r2, #3
 8003cac:	0092      	lsls	r2, r2, #2
 8003cae:	4093      	lsls	r3, r2
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb6:	4938      	ldr	r1, [pc, #224]	@ (8003d98 <HAL_GPIO_Init+0x35c>)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f47f ae63 	bne.w	8003a50 <HAL_GPIO_Init+0x14>
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3724      	adds	r7, #36	@ 0x24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	58000400 	.word	0x58000400

08003d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e001      	b.n	8003dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003de8:	e003      	b.n	8003df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	58024800 	.word	0x58024800

08003e20 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_PWREx_ConfigSupply+0x70>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d00a      	beq.n	8003e4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e34:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <HAL_PWREx_ConfigSupply+0x70>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e01f      	b.n	8003e86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e01d      	b.n	8003e86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_PWREx_ConfigSupply+0x70>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	490f      	ldr	r1, [pc, #60]	@ (8003e90 <HAL_PWREx_ConfigSupply+0x70>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e5a:	f7ff fc49 	bl	80036f0 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e60:	e009      	b.n	8003e76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e62:	f7ff fc45 	bl	80036f0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e70:	d901      	bls.n	8003e76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e76:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_PWREx_ConfigSupply+0x70>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e82:	d1ee      	bne.n	8003e62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	58024800 	.word	0x58024800

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f000 bc48 	b.w	8004738 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8088 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b99      	ldr	r3, [pc, #612]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec0:	4b96      	ldr	r3, [pc, #600]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d007      	beq.n	8003edc <HAL_RCC_OscConfig+0x48>
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	2b18      	cmp	r3, #24
 8003ed0:	d111      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x62>
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b8f      	ldr	r3, [pc, #572]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d06d      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x130>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d169      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f000 bc21 	b.w	8004738 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x7a>
 8003f00:	4b86      	ldr	r3, [pc, #536]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a85      	ldr	r2, [pc, #532]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e02e      	b.n	8003f6c <HAL_RCC_OscConfig+0xd8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x9c>
 8003f16:	4b81      	ldr	r3, [pc, #516]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a80      	ldr	r2, [pc, #512]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b7e      	ldr	r3, [pc, #504]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7d      	ldr	r2, [pc, #500]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e01d      	b.n	8003f6c <HAL_RCC_OscConfig+0xd8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0xc0>
 8003f3a:	4b78      	ldr	r3, [pc, #480]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a77      	ldr	r2, [pc, #476]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b75      	ldr	r3, [pc, #468]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a74      	ldr	r2, [pc, #464]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0xd8>
 8003f54:	4b71      	ldr	r3, [pc, #452]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a70      	ldr	r2, [pc, #448]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b6e      	ldr	r3, [pc, #440]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6d      	ldr	r2, [pc, #436]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7ff fbbc 	bl	80036f0 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7ff fbb8 	bl	80036f0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	@ 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e3d4      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f8e:	4b63      	ldr	r3, [pc, #396]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0xe8>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7ff fba8 	bl	80036f0 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7ff fba4 	bl	80036f0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	@ 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e3c0      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fb6:	4b59      	ldr	r3, [pc, #356]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x110>
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80ca 	beq.w	8004168 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd4:	4b51      	ldr	r3, [pc, #324]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fde:	4b4f      	ldr	r3, [pc, #316]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_RCC_OscConfig+0x166>
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b18      	cmp	r3, #24
 8003fee:	d156      	bne.n	800409e <HAL_RCC_OscConfig+0x20a>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d151      	bne.n	800409e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffa:	4b48      	ldr	r3, [pc, #288]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x17e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e392      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004012:	4b42      	ldr	r3, [pc, #264]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 0219 	bic.w	r2, r3, #25
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	493f      	ldr	r1, [pc, #252]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7ff fb64 	bl	80036f0 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402c:	f7ff fb60 	bl	80036f0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e37c      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403e:	4b37      	ldr	r3, [pc, #220]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404a:	f7ff fb81 	bl	8003750 <HAL_GetREVID>
 800404e:	4603      	mov	r3, r0
 8004050:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004054:	4293      	cmp	r3, r2
 8004056:	d817      	bhi.n	8004088 <HAL_RCC_OscConfig+0x1f4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d108      	bne.n	8004072 <HAL_RCC_OscConfig+0x1de>
 8004060:	4b2e      	ldr	r3, [pc, #184]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004068:	4a2c      	ldr	r2, [pc, #176]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	e07a      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b2a      	ldr	r3, [pc, #168]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	031b      	lsls	r3, r3, #12
 8004080:	4926      	ldr	r1, [pc, #152]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004086:	e06f      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b24      	ldr	r3, [pc, #144]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	4921      	ldr	r1, [pc, #132]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	e064      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d047      	beq.n	8004136 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040a6:	4b1d      	ldr	r3, [pc, #116]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0219 	bic.w	r2, r3, #25
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	491a      	ldr	r1, [pc, #104]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7ff fb1a 	bl	80036f0 <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c0:	f7ff fb16 	bl	80036f0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e332      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	f7ff fb37 	bl	8003750 <HAL_GetREVID>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d819      	bhi.n	8004120 <HAL_RCC_OscConfig+0x28c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d108      	bne.n	8004106 <HAL_RCC_OscConfig+0x272>
 80040f4:	4b09      	ldr	r3, [pc, #36]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80040fc:	4a07      	ldr	r2, [pc, #28]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004102:	6053      	str	r3, [r2, #4]
 8004104:	e030      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
 8004106:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	031b      	lsls	r3, r3, #12
 8004114:	4901      	ldr	r1, [pc, #4]	@ (800411c <HAL_RCC_OscConfig+0x288>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
 800411a:	e025      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
 800411c:	58024400 	.word	0x58024400
 8004120:	4b9a      	ldr	r3, [pc, #616]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	4997      	ldr	r1, [pc, #604]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	e018      	b.n	8004168 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b95      	ldr	r3, [pc, #596]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a94      	ldr	r2, [pc, #592]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7ff fad5 	bl	80036f0 <HAL_GetTick>
 8004146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414a:	f7ff fad1 	bl	80036f0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e2ed      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800415c:	4b8b      	ldr	r3, [pc, #556]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a9 	beq.w	80042c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004176:	4b85      	ldr	r3, [pc, #532]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004180:	4b82      	ldr	r3, [pc, #520]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d007      	beq.n	800419c <HAL_RCC_OscConfig+0x308>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b18      	cmp	r3, #24
 8004190:	d13a      	bne.n	8004208 <HAL_RCC_OscConfig+0x374>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d135      	bne.n	8004208 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800419c:	4b7b      	ldr	r3, [pc, #492]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x320>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b80      	cmp	r3, #128	@ 0x80
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e2c1      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b4:	f7ff facc 	bl	8003750 <HAL_GetREVID>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041be:	4293      	cmp	r3, r2
 80041c0:	d817      	bhi.n	80041f2 <HAL_RCC_OscConfig+0x35e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d108      	bne.n	80041dc <HAL_RCC_OscConfig+0x348>
 80041ca:	4b70      	ldr	r3, [pc, #448]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041d2:	4a6e      	ldr	r2, [pc, #440]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041da:	e075      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041dc:	4b6b      	ldr	r3, [pc, #428]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	069b      	lsls	r3, r3, #26
 80041ea:	4968      	ldr	r1, [pc, #416]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f0:	e06a      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041f2:	4b66      	ldr	r3, [pc, #408]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	4962      	ldr	r1, [pc, #392]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004202:	4313      	orrs	r3, r2
 8004204:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004206:	e05f      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d042      	beq.n	8004296 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004210:	4b5e      	ldr	r3, [pc, #376]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a5d      	ldr	r2, [pc, #372]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7ff fa68 	bl	80036f0 <HAL_GetTick>
 8004220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004224:	f7ff fa64 	bl	80036f0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e280      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004236:	4b55      	ldr	r3, [pc, #340]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004242:	f7ff fa85 	bl	8003750 <HAL_GetREVID>
 8004246:	4603      	mov	r3, r0
 8004248:	f241 0203 	movw	r2, #4099	@ 0x1003
 800424c:	4293      	cmp	r3, r2
 800424e:	d817      	bhi.n	8004280 <HAL_RCC_OscConfig+0x3ec>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2b20      	cmp	r3, #32
 8004256:	d108      	bne.n	800426a <HAL_RCC_OscConfig+0x3d6>
 8004258:	4b4c      	ldr	r3, [pc, #304]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004260:	4a4a      	ldr	r2, [pc, #296]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004262:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004266:	6053      	str	r3, [r2, #4]
 8004268:	e02e      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
 800426a:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	4944      	ldr	r1, [pc, #272]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
 800427e:	e023      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
 8004280:	4b42      	ldr	r3, [pc, #264]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	493f      	ldr	r1, [pc, #252]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
 8004294:	e018      	b.n	80042c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004296:	4b3d      	ldr	r3, [pc, #244]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3c      	ldr	r2, [pc, #240]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800429c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7ff fa25 	bl	80036f0 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042aa:	f7ff fa21 	bl	80036f0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e23d      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042bc:	4b33      	ldr	r3, [pc, #204]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d036      	beq.n	8004342 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d019      	beq.n	8004310 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042dc:	4b2b      	ldr	r3, [pc, #172]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80042de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e0:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7ff fa02 	bl	80036f0 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f0:	f7ff f9fe 	bl	80036f0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e21a      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004302:	4b22      	ldr	r3, [pc, #136]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x45c>
 800430e:	e018      	b.n	8004342 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004310:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7ff f9e8 	bl	80036f0 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004324:	f7ff f9e4 	bl	80036f0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e200      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004336:	4b15      	ldr	r3, [pc, #84]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d039      	beq.n	80043c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01c      	beq.n	8004390 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800435c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004360:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004362:	f7ff f9c5 	bl	80036f0 <HAL_GetTick>
 8004366:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436a:	f7ff f9c1 	bl	80036f0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1dd      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800437c:	4b03      	ldr	r3, [pc, #12]	@ (800438c <HAL_RCC_OscConfig+0x4f8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x4d6>
 8004388:	e01b      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004390:	4b9b      	ldr	r3, [pc, #620]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a9a      	ldr	r2, [pc, #616]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800439a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800439c:	f7ff f9a8 	bl	80036f0 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a4:	f7ff f9a4 	bl	80036f0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1c0      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b6:	4b92      	ldr	r3, [pc, #584]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8081 	beq.w	80044d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004604 <HAL_RCC_OscConfig+0x770>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a8b      	ldr	r2, [pc, #556]	@ (8004604 <HAL_RCC_OscConfig+0x770>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043dc:	f7ff f988 	bl	80036f0 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e4:	f7ff f984 	bl	80036f0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1a0      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f6:	4b83      	ldr	r3, [pc, #524]	@ (8004604 <HAL_RCC_OscConfig+0x770>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x584>
 800440a:	4b7d      	ldr	r3, [pc, #500]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	4a7c      	ldr	r2, [pc, #496]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6713      	str	r3, [r2, #112]	@ 0x70
 8004416:	e02d      	b.n	8004474 <HAL_RCC_OscConfig+0x5e0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10c      	bne.n	800443a <HAL_RCC_OscConfig+0x5a6>
 8004420:	4b77      	ldr	r3, [pc, #476]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a76      	ldr	r2, [pc, #472]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
 800442c:	4b74      	ldr	r3, [pc, #464]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a73      	ldr	r2, [pc, #460]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004432:	f023 0304 	bic.w	r3, r3, #4
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
 8004438:	e01c      	b.n	8004474 <HAL_RCC_OscConfig+0x5e0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b05      	cmp	r3, #5
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x5c8>
 8004442:	4b6f      	ldr	r3, [pc, #444]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	4a6e      	ldr	r2, [pc, #440]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
 800444e:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	4a6b      	ldr	r2, [pc, #428]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6713      	str	r3, [r2, #112]	@ 0x70
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0x5e0>
 800445c:	4b68      	ldr	r3, [pc, #416]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	4a67      	ldr	r2, [pc, #412]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	@ 0x70
 8004468:	4b65      	ldr	r3, [pc, #404]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	4a64      	ldr	r2, [pc, #400]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7ff f938 	bl	80036f0 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004482:	e00a      	b.n	800449a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7ff f934 	bl	80036f0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e14e      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800449a:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0ee      	beq.n	8004484 <HAL_RCC_OscConfig+0x5f0>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7ff f922 	bl	80036f0 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b0:	f7ff f91e 	bl	80036f0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e138      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ee      	bne.n	80044b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 812d 	beq.w	8004736 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044dc:	4b48      	ldr	r3, [pc, #288]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e4:	2b18      	cmp	r3, #24
 80044e6:	f000 80bd 	beq.w	8004664 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	f040 809e 	bne.w	8004630 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b42      	ldr	r3, [pc, #264]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a41      	ldr	r2, [pc, #260]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80044fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7ff f8f6 	bl	80036f0 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7ff f8f2 	bl	80036f0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e10e      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800451a:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004526:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004528:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800452a:	4b37      	ldr	r3, [pc, #220]	@ (8004608 <HAL_RCC_OscConfig+0x774>)
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	430a      	orrs	r2, r1
 800453a:	4931      	ldr	r1, [pc, #196]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	3b01      	subs	r3, #1
 8004546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454e:	3b01      	subs	r3, #1
 8004550:	025b      	lsls	r3, r3, #9
 8004552:	b29b      	uxth	r3, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	3b01      	subs	r3, #1
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004570:	4923      	ldr	r1, [pc, #140]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004576:	4b22      	ldr	r3, [pc, #136]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004582:	4b1f      	ldr	r3, [pc, #124]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004586:	4b21      	ldr	r3, [pc, #132]	@ (800460c <HAL_RCC_OscConfig+0x778>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800458e:	00d2      	lsls	r2, r2, #3
 8004590:	491b      	ldr	r1, [pc, #108]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	f023 020c 	bic.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	4917      	ldr	r1, [pc, #92]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045a8:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f023 0202 	bic.w	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	4912      	ldr	r1, [pc, #72]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045be:	4a10      	ldr	r2, [pc, #64]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4a07      	ldr	r2, [pc, #28]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ea:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <HAL_RCC_OscConfig+0x76c>)
 80045f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7ff f87b 	bl	80036f0 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045fc:	e011      	b.n	8004622 <HAL_RCC_OscConfig+0x78e>
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
 8004604:	58024800 	.word	0x58024800
 8004608:	fffffc0c 	.word	0xfffffc0c
 800460c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7ff f86e 	bl	80036f0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e08a      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x77c>
 800462e:	e082      	b.n	8004736 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004630:	4b43      	ldr	r3, [pc, #268]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7ff f858 	bl	80036f0 <HAL_GetTick>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7ff f854 	bl	80036f0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e070      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004656:	4b3a      	ldr	r3, [pc, #232]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x7b0>
 8004662:	e068      	b.n	8004736 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004664:	4b36      	ldr	r3, [pc, #216]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800466a:	4b35      	ldr	r3, [pc, #212]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	2b01      	cmp	r3, #1
 8004676:	d031      	beq.n	80046dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f003 0203 	and.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d12a      	bne.n	80046dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d122      	bne.n	80046dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d11a      	bne.n	80046dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d111      	bne.n	80046dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e02b      	b.n	8004738 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046e0:	4b17      	ldr	r3, [pc, #92]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 80046e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d01f      	beq.n	8004736 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	4a11      	ldr	r2, [pc, #68]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004702:	f7fe fff5 	bl	80036f0 <HAL_GetTick>
 8004706:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004708:	bf00      	nop
 800470a:	f7fe fff1 	bl	80036f0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	4293      	cmp	r3, r2
 8004714:	d0f9      	beq.n	800470a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471a:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <HAL_RCC_OscConfig+0x8b0>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004722:	00d2      	lsls	r2, r2, #3
 8004724:	4906      	ldr	r1, [pc, #24]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004726:	4313      	orrs	r3, r2
 8004728:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800472a:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <HAL_RCC_OscConfig+0x8ac>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3730      	adds	r7, #48	@ 0x30
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	ffff0007 	.word	0xffff0007

08004748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e19c      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b8a      	ldr	r3, [pc, #552]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d910      	bls.n	800478c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b87      	ldr	r3, [pc, #540]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 020f 	bic.w	r2, r3, #15
 8004772:	4985      	ldr	r1, [pc, #532]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b83      	ldr	r3, [pc, #524]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e184      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	4b7b      	ldr	r3, [pc, #492]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d908      	bls.n	80047ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047a8:	4b78      	ldr	r3, [pc, #480]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4975      	ldr	r1, [pc, #468]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	4b70      	ldr	r3, [pc, #448]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d908      	bls.n	80047e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047d6:	4b6d      	ldr	r3, [pc, #436]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	496a      	ldr	r1, [pc, #424]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	4b64      	ldr	r3, [pc, #400]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004800:	429a      	cmp	r2, r3
 8004802:	d908      	bls.n	8004816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004804:	4b61      	ldr	r3, [pc, #388]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	495e      	ldr	r1, [pc, #376]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004812:	4313      	orrs	r3, r2
 8004814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	4b59      	ldr	r3, [pc, #356]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800482e:	429a      	cmp	r2, r3
 8004830:	d908      	bls.n	8004844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004832:	4b56      	ldr	r3, [pc, #344]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4953      	ldr	r1, [pc, #332]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004840:	4313      	orrs	r3, r2
 8004842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d010      	beq.n	8004872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b4d      	ldr	r3, [pc, #308]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	429a      	cmp	r2, r3
 800485e:	d908      	bls.n	8004872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004860:	4b4a      	ldr	r3, [pc, #296]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f023 020f 	bic.w	r2, r3, #15
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4947      	ldr	r1, [pc, #284]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800486e:	4313      	orrs	r3, r2
 8004870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d055      	beq.n	800492a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800487e:	4b43      	ldr	r3, [pc, #268]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4940      	ldr	r1, [pc, #256]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800488c:	4313      	orrs	r3, r2
 800488e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004898:	4b3c      	ldr	r3, [pc, #240]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d121      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0f6      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b0:	4b36      	ldr	r3, [pc, #216]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0ea      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048c8:	4b30      	ldr	r3, [pc, #192]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0de      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048d8:	4b2c      	ldr	r3, [pc, #176]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0d6      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e8:	4b28      	ldr	r3, [pc, #160]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f023 0207 	bic.w	r2, r3, #7
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4925      	ldr	r1, [pc, #148]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fa:	f7fe fef9 	bl	80036f0 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004900:	e00a      	b.n	8004918 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004902:	f7fe fef5 	bl	80036f0 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e0be      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004918:	4b1c      	ldr	r3, [pc, #112]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	429a      	cmp	r2, r3
 8004928:	d1eb      	bne.n	8004902 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	4b14      	ldr	r3, [pc, #80]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	429a      	cmp	r2, r3
 8004944:	d208      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f023 020f 	bic.w	r2, r3, #15
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	490e      	ldr	r1, [pc, #56]	@ (800498c <HAL_RCC_ClockConfig+0x244>)
 8004954:	4313      	orrs	r3, r2
 8004956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d214      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 020f 	bic.w	r2, r3, #15
 800496e:	4906      	ldr	r1, [pc, #24]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e086      	b.n	8004a96 <HAL_RCC_ClockConfig+0x34e>
 8004988:	52002000 	.word	0x52002000
 800498c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d208      	bcs.n	80049be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ac:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	4939      	ldr	r1, [pc, #228]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d208      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	492e      	ldr	r1, [pc, #184]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d208      	bcs.n	8004a1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a08:	4b25      	ldr	r3, [pc, #148]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	4922      	ldr	r1, [pc, #136]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d208      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4917      	ldr	r1, [pc, #92]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a48:	f000 f834 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	4912      	ldr	r1, [pc, #72]	@ (8004aa4 <HAL_RCC_ClockConfig+0x35c>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a66:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <HAL_RCC_ClockConfig+0x358>)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <HAL_RCC_ClockConfig+0x35c>)
 8004a70:	5cd3      	ldrb	r3, [r2, r3]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa8 <HAL_RCC_ClockConfig+0x360>)
 8004a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a80:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <HAL_RCC_ClockConfig+0x364>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <HAL_RCC_ClockConfig+0x368>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fde6 	bl	800365c <HAL_InitTick>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	0800fc00 	.word	0x0800fc00
 8004aa8:	240000a4 	.word	0x240000a4
 8004aac:	240000a0 	.word	0x240000a0
 8004ab0:	240000a8 	.word	0x240000a8

08004ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	@ 0x24
 8004ab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aba:	4bb3      	ldr	r3, [pc, #716]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ac2:	2b18      	cmp	r3, #24
 8004ac4:	f200 8155 	bhi.w	8004d72 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004d73 	.word	0x08004d73
 8004ad8:	08004d73 	.word	0x08004d73
 8004adc:	08004d73 	.word	0x08004d73
 8004ae0:	08004d73 	.word	0x08004d73
 8004ae4:	08004d73 	.word	0x08004d73
 8004ae8:	08004d73 	.word	0x08004d73
 8004aec:	08004d73 	.word	0x08004d73
 8004af0:	08004b5b 	.word	0x08004b5b
 8004af4:	08004d73 	.word	0x08004d73
 8004af8:	08004d73 	.word	0x08004d73
 8004afc:	08004d73 	.word	0x08004d73
 8004b00:	08004d73 	.word	0x08004d73
 8004b04:	08004d73 	.word	0x08004d73
 8004b08:	08004d73 	.word	0x08004d73
 8004b0c:	08004d73 	.word	0x08004d73
 8004b10:	08004b61 	.word	0x08004b61
 8004b14:	08004d73 	.word	0x08004d73
 8004b18:	08004d73 	.word	0x08004d73
 8004b1c:	08004d73 	.word	0x08004d73
 8004b20:	08004d73 	.word	0x08004d73
 8004b24:	08004d73 	.word	0x08004d73
 8004b28:	08004d73 	.word	0x08004d73
 8004b2c:	08004d73 	.word	0x08004d73
 8004b30:	08004b67 	.word	0x08004b67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b34:	4b94      	ldr	r3, [pc, #592]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b40:	4b91      	ldr	r3, [pc, #580]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	08db      	lsrs	r3, r3, #3
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	4a90      	ldr	r2, [pc, #576]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b52:	e111      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b54:	4b8d      	ldr	r3, [pc, #564]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b56:	61bb      	str	r3, [r7, #24]
      break;
 8004b58:	e10e      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b5c:	61bb      	str	r3, [r7, #24]
      break;
 8004b5e:	e10b      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b60:	4b8c      	ldr	r3, [pc, #560]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b62:	61bb      	str	r3, [r7, #24]
      break;
 8004b64:	e108      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b66:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b70:	4b85      	ldr	r3, [pc, #532]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b7c:	4b82      	ldr	r3, [pc, #520]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b86:	4b80      	ldr	r3, [pc, #512]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	08db      	lsrs	r3, r3, #3
 8004b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80e1 	beq.w	8004d6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	f000 8083 	beq.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x204>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f200 80a1 	bhi.w	8004cfc <HAL_RCC_GetSysClockFreq+0x248>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x114>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d056      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bc6:	e099      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02d      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	4a6b      	ldr	r2, [pc, #428]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b62      	ldr	r3, [pc, #392]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c2e:	e087      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c72:	e065      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b40      	ldr	r3, [pc, #256]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cb6:	e043      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004da4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cde:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cfa:	e021      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	0a5b      	lsrs	r3, r3, #9
 8004d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d64:	ee17 3a90 	vmov	r3, s15
 8004d68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d6a:	e005      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d72:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d74:	61bb      	str	r3, [r7, #24]
      break;
 8004d76:	bf00      	nop
  }

  return sysclockfreq;
 8004d78:	69bb      	ldr	r3, [r7, #24]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	@ 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	03d09000 	.word	0x03d09000
 8004d90:	003d0900 	.word	0x003d0900
 8004d94:	017d7840 	.word	0x017d7840
 8004d98:	46000000 	.word	0x46000000
 8004d9c:	4c742400 	.word	0x4c742400
 8004da0:	4a742400 	.word	0x4a742400
 8004da4:	4bbebc20 	.word	0x4bbebc20

08004da8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b0ca      	sub	sp, #296	@ 0x128
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004dcc:	2500      	movs	r5, #0
 8004dce:	ea54 0305 	orrs.w	r3, r4, r5
 8004dd2:	d049      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dde:	d02f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004de4:	d828      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dea:	d01a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004df0:	d822      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dfa:	d007      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dfc:	e01c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfe:	4bb8      	ldr	r3, [pc, #736]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4ab7      	ldr	r2, [pc, #732]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e0a:	e01a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	3308      	adds	r3, #8
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 f9d1 	bl	80061bc <RCCEx_PLL2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e20:	e00f      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	3328      	adds	r3, #40	@ 0x28
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fa78 	bl	8006320 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e4a:	4ba5      	ldr	r3, [pc, #660]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e58:	4aa1      	ldr	r2, [pc, #644]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e74:	f04f 0900 	mov.w	r9, #0
 8004e78:	ea58 0309 	orrs.w	r3, r8, r9
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d82a      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e88:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004eb3 	.word	0x08004eb3
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ee7 	.word	0x08004ee7
 8004ea0:	08004ee7 	.word	0x08004ee7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4a8d      	ldr	r2, [pc, #564]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eb0:	e01a      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f97e 	bl	80061bc <RCCEx_PLL2_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec6:	e00f      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ecc:	3328      	adds	r3, #40	@ 0x28
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fa25 	bl	8006320 <RCCEx_PLL3_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004edc:	e004      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef4:	f023 0107 	bic.w	r1, r3, #7
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efe:	4a78      	ldr	r2, [pc, #480]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f1a:	f04f 0b00 	mov.w	fp, #0
 8004f1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f22:	d04c      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2e:	d030      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f34:	d829      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f38:	d02d      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f3c:	d825      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f3e:	2b80      	cmp	r3, #128	@ 0x80
 8004f40:	d018      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f42:	2b80      	cmp	r3, #128	@ 0x80
 8004f44:	d821      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d007      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f4e:	e01c      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f50:	4b63      	ldr	r3, [pc, #396]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	4a62      	ldr	r2, [pc, #392]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f5c:	e01c      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	3308      	adds	r3, #8
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f928 	bl	80061bc <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f72:	e011      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	3328      	adds	r3, #40	@ 0x28
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f9cf 	bl	8006320 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	4a4c      	ldr	r2, [pc, #304]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004fca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004fd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	d053      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fea:	d035      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ff0:	d82e      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ff6:	d031      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ffc:	d828      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005002:	d01a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005008:	d822      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800500e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005012:	d007      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005014:	e01c      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005016:	4b32      	ldr	r3, [pc, #200]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	4a31      	ldr	r2, [pc, #196]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005022:	e01c      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	3308      	adds	r3, #8
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f8c5 	bl	80061bc <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005038:	e011      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	3328      	adds	r3, #40	@ 0x28
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f001 f96c 	bl	8006320 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800504e:	e006      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005056:	e002      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800505c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005076:	4a1a      	ldr	r2, [pc, #104]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6593      	str	r3, [r2, #88]	@ 0x58
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005092:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800509c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d056      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b2:	d038      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80050b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b8:	d831      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050be:	d034      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80050c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050c4:	d82b      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ca:	d01d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80050cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050d0:	d825      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80050d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050dc:	e01f      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e4:	4ba2      	ldr	r3, [pc, #648]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	4aa1      	ldr	r2, [pc, #644]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050f0:	e01c      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	3308      	adds	r3, #8
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f85e 	bl	80061bc <RCCEx_PLL2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005106:	e011      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	3328      	adds	r3, #40	@ 0x28
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f905 	bl	8006320 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005134:	4b8e      	ldr	r3, [pc, #568]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005138:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005144:	4a8a      	ldr	r2, [pc, #552]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800516a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d03a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517a:	2b30      	cmp	r3, #48	@ 0x30
 800517c:	d01f      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800517e:	2b30      	cmp	r3, #48	@ 0x30
 8005180:	d819      	bhi.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d00c      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005186:	2b20      	cmp	r3, #32
 8005188:	d815      	bhi.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800518e:	2b10      	cmp	r3, #16
 8005190:	d111      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4b77      	ldr	r3, [pc, #476]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a76      	ldr	r2, [pc, #472]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800519e:	e011      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	3308      	adds	r3, #8
 80051a6:	2102      	movs	r1, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 f807 	bl	80061bc <RCCEx_PLL2_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051b4:	e006      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051cc:	4b68      	ldr	r3, [pc, #416]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	4a65      	ldr	r2, [pc, #404]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051dc:	430b      	orrs	r3, r1
 80051de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051e0:	e003      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005200:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005204:	460b      	mov	r3, r1
 8005206:	4313      	orrs	r3, r2
 8005208:	d051      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005214:	d035      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800521a:	d82e      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800521c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005220:	d031      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005222:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005226:	d828      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522c:	d01a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	d822      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523c:	d007      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800523e:	e01c      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4a4a      	ldr	r2, [pc, #296]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800524c:	e01c      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	3308      	adds	r3, #8
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f000 ffb0 	bl	80061bc <RCCEx_PLL2_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	3328      	adds	r3, #40	@ 0x28
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f001 f857 	bl	8006320 <RCCEx_PLL3_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005290:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005294:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529e:	4a34      	ldr	r2, [pc, #208]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052be:	2300      	movs	r3, #0
 80052c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d056      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d8:	d033      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052de:	d82c      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052e4:	d02f      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80052e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ea:	d826      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052f0:	d02b      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80052f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052f6:	d820      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052fc:	d012      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005302:	d81a      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d022      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530c:	d115      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	3308      	adds	r3, #8
 8005314:	2101      	movs	r1, #1
 8005316:	4618      	mov	r0, r3
 8005318:	f000 ff50 	bl	80061bc <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005322:	e015      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	3328      	adds	r3, #40	@ 0x28
 800532a:	2101      	movs	r1, #1
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fff7 	bl	8006320 <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005338:	e00a      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005342:	bf00      	nop
 8005344:	e004      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800534e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005358:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005366:	4a02      	ldr	r2, [pc, #8]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6513      	str	r3, [r2, #80]	@ 0x50
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005392:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005396:	460b      	mov	r3, r1
 8005398:	4313      	orrs	r3, r2
 800539a:	d055      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a8:	d033      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80053aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ae:	d82c      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b4:	d02f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ba:	d826      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053c0:	d02b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80053c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053c6:	d820      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053cc:	d012      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053d2:	d81a      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80053d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053dc:	d115      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	3308      	adds	r3, #8
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fee8 	bl	80061bc <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053f2:	e015      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f8:	3328      	adds	r3, #40	@ 0x28
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 ff8f 	bl	8006320 <RCCEx_PLL3_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005408:	e00a      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800541e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005428:	4ba3      	ldr	r3, [pc, #652]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005438:	4a9f      	ldr	r2, [pc, #636]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800543a:	430b      	orrs	r3, r1
 800543c:	6593      	str	r3, [r2, #88]	@ 0x58
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800545e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d037      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005472:	d00e      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005478:	d816      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800547e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005482:	d111      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4b8c      	ldr	r3, [pc, #560]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	4a8b      	ldr	r2, [pc, #556]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005490:	e00f      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	3308      	adds	r3, #8
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fe8e 	bl	80061bc <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054a6:	e004      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80054b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054ba:	4b7f      	ldr	r3, [pc, #508]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c8:	4a7b      	ldr	r2, [pc, #492]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ca:	430b      	orrs	r3, r1
 80054cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d039      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d81c      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005545 	.word	0x08005545
 800550c:	08005519 	.word	0x08005519
 8005510:	08005527 	.word	0x08005527
 8005514:	08005545 	.word	0x08005545
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005518:	4b67      	ldr	r3, [pc, #412]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	4a66      	ldr	r2, [pc, #408]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005524:	e00f      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552a:	3308      	adds	r3, #8
 800552c:	2102      	movs	r1, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fe44 	bl	80061bc <RCCEx_PLL2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800554e:	4b5a      	ldr	r3, [pc, #360]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	f023 0103 	bic.w	r1, r3, #3
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555c:	4a56      	ldr	r2, [pc, #344]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800555e:	430b      	orrs	r3, r1
 8005560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005582:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	f000 809f 	beq.w	80056cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558e:	4b4b      	ldr	r3, [pc, #300]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a4a      	ldr	r2, [pc, #296]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005598:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559a:	f7fe f8a9 	bl	80036f0 <HAL_GetTick>
 800559e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a2:	e00b      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fe f8a4 	bl	80036f0 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b64      	cmp	r3, #100	@ 0x64
 80055b2:	d903      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055bc:	4b3f      	ldr	r3, [pc, #252]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0ed      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80055c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d179      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055d0:	4b39      	ldr	r3, [pc, #228]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055dc:	4053      	eors	r3, r2
 80055de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d015      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e6:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f2:	4b31      	ldr	r3, [pc, #196]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f6:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055fe:	4b2e      	ldr	r3, [pc, #184]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005602:	4a2d      	ldr	r2, [pc, #180]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005608:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800560a:	4a2b      	ldr	r2, [pc, #172]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005610:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800561a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561e:	d118      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fe f866 	bl	80036f0 <HAL_GetTick>
 8005624:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005628:	e00d      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fe f861 	bl	80036f0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	f241 3388 	movw	r3, #5000	@ 0x1388
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005644:	e005      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005646:	4b1c      	ldr	r3, [pc, #112]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0eb      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005656:	2b00      	cmp	r3, #0
 8005658:	d129      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800566a:	d10e      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800566c:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800567c:	091a      	lsrs	r2, r3, #4
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005680:	4013      	ands	r3, r2
 8005682:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005684:	430b      	orrs	r3, r1
 8005686:	6113      	str	r3, [r2, #16]
 8005688:	e005      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800568a:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005690:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005694:	6113      	str	r3, [r2, #16]
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005698:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a6:	4a04      	ldr	r2, [pc, #16]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ac:	e00e      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80056b8:	58024400 	.word	0x58024400
 80056bc:	58024800 	.word	0x58024800
 80056c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f002 0301 	and.w	r3, r2, #1
 80056d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f000 8089 	beq.w	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f4:	2b28      	cmp	r3, #40	@ 0x28
 80056f6:	d86b      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80056f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	080057d9 	.word	0x080057d9
 8005704:	080057d1 	.word	0x080057d1
 8005708:	080057d1 	.word	0x080057d1
 800570c:	080057d1 	.word	0x080057d1
 8005710:	080057d1 	.word	0x080057d1
 8005714:	080057d1 	.word	0x080057d1
 8005718:	080057d1 	.word	0x080057d1
 800571c:	080057d1 	.word	0x080057d1
 8005720:	080057a5 	.word	0x080057a5
 8005724:	080057d1 	.word	0x080057d1
 8005728:	080057d1 	.word	0x080057d1
 800572c:	080057d1 	.word	0x080057d1
 8005730:	080057d1 	.word	0x080057d1
 8005734:	080057d1 	.word	0x080057d1
 8005738:	080057d1 	.word	0x080057d1
 800573c:	080057d1 	.word	0x080057d1
 8005740:	080057bb 	.word	0x080057bb
 8005744:	080057d1 	.word	0x080057d1
 8005748:	080057d1 	.word	0x080057d1
 800574c:	080057d1 	.word	0x080057d1
 8005750:	080057d1 	.word	0x080057d1
 8005754:	080057d1 	.word	0x080057d1
 8005758:	080057d1 	.word	0x080057d1
 800575c:	080057d1 	.word	0x080057d1
 8005760:	080057d9 	.word	0x080057d9
 8005764:	080057d1 	.word	0x080057d1
 8005768:	080057d1 	.word	0x080057d1
 800576c:	080057d1 	.word	0x080057d1
 8005770:	080057d1 	.word	0x080057d1
 8005774:	080057d1 	.word	0x080057d1
 8005778:	080057d1 	.word	0x080057d1
 800577c:	080057d1 	.word	0x080057d1
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057d1 	.word	0x080057d1
 8005790:	080057d1 	.word	0x080057d1
 8005794:	080057d1 	.word	0x080057d1
 8005798:	080057d1 	.word	0x080057d1
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	080057d9 	.word	0x080057d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a8:	3308      	adds	r3, #8
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fd05 	bl	80061bc <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057b8:	e00f      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057be:	3328      	adds	r3, #40	@ 0x28
 80057c0:	2101      	movs	r1, #1
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fdac 	bl	8006320 <RCCEx_PLL3_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057ce:	e004      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d6:	e000      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80057d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057e2:	4bbf      	ldr	r3, [pc, #764]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f0:	4abb      	ldr	r2, [pc, #748]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 0302 	and.w	r3, r2, #2
 800580c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005816:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d041      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005826:	2b05      	cmp	r3, #5
 8005828:	d824      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	0800587d 	.word	0x0800587d
 8005834:	08005849 	.word	0x08005849
 8005838:	0800585f 	.word	0x0800585f
 800583c:	0800587d 	.word	0x0800587d
 8005840:	0800587d 	.word	0x0800587d
 8005844:	0800587d 	.word	0x0800587d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	3308      	adds	r3, #8
 800584e:	2101      	movs	r1, #1
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fcb3 	bl	80061bc <RCCEx_PLL2_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800585c:	e00f      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	3328      	adds	r3, #40	@ 0x28
 8005864:	2101      	movs	r1, #1
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fd5a 	bl	8006320 <RCCEx_PLL3_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005872:	e004      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800587a:	e000      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800587c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005886:	4b96      	ldr	r3, [pc, #600]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	f023 0107 	bic.w	r1, r3, #7
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005894:	4a92      	ldr	r2, [pc, #584]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005896:	430b      	orrs	r3, r1
 8005898:	6553      	str	r3, [r2, #84]	@ 0x54
 800589a:	e003      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 0304 	and.w	r3, r2, #4
 80058b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d044      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d825      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80058d0:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	08005925 	.word	0x08005925
 80058dc:	080058f1 	.word	0x080058f1
 80058e0:	08005907 	.word	0x08005907
 80058e4:	08005925 	.word	0x08005925
 80058e8:	08005925 	.word	0x08005925
 80058ec:	08005925 	.word	0x08005925
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	3308      	adds	r3, #8
 80058f6:	2101      	movs	r1, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fc5f 	bl	80061bc <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005904:	e00f      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	3328      	adds	r3, #40	@ 0x28
 800590c:	2101      	movs	r1, #1
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fd06 	bl	8006320 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800592e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	f023 0107 	bic.w	r1, r3, #7
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800593e:	4a68      	ldr	r2, [pc, #416]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005940:	430b      	orrs	r3, r1
 8005942:	6593      	str	r3, [r2, #88]	@ 0x58
 8005944:	e003      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f002 0320 	and.w	r3, r2, #32
 800595a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800595e:	2300      	movs	r3, #0
 8005960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d055      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800597a:	d033      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800597c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005980:	d82c      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d02f      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d826      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800598e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005992:	d02b      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005994:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005998:	d820      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800599a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599e:	d012      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a4:	d81a      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d022      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ae:	d115      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	3308      	adds	r3, #8
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fbff 	bl	80061bc <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059c4:	e015      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	3328      	adds	r3, #40	@ 0x28
 80059cc:	2102      	movs	r1, #2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fca6 	bl	8006320 <RCCEx_PLL3_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059da:	e00a      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059e2:	e006      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059e4:	bf00      	nop
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059fa:	4b39      	ldr	r3, [pc, #228]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	4a35      	ldr	r2, [pc, #212]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d058      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a46:	d033      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a4c:	d82c      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a52:	d02f      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a58:	d826      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a5e:	d02b      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a64:	d820      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a6a:	d012      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a70:	d81a      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d022      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7a:	d115      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	3308      	adds	r3, #8
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb99 	bl	80061bc <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a90:	e015      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	3328      	adds	r3, #40	@ 0x28
 8005a98:	2102      	movs	r1, #2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fc40 	bl	8006320 <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005aa6:	e00a      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac6:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ad6:	4a02      	ldr	r2, [pc, #8]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d055      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b18:	d033      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b1e:	d82c      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b24:	d02f      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2a:	d826      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b30:	d02b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005b32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b36:	d820      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b3c:	d012      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b42:	d81a      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d022      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4c:	d115      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	3308      	adds	r3, #8
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fb30 	bl	80061bc <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b62:	e015      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	3328      	adds	r3, #40	@ 0x28
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fbd7 	bl	8006320 <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b78:	e00a      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b80:	e006      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b82:	bf00      	nop
 8005b84:	e004      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b86:	bf00      	nop
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b98:	4ba1      	ldr	r3, [pc, #644]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ba8:	4a9d      	ldr	r2, [pc, #628]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f002 0308 	and.w	r3, r2, #8
 8005bc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d01e      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bea:	3328      	adds	r3, #40	@ 0x28
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fb96 	bl	8006320 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c00:	4b87      	ldr	r3, [pc, #540]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c10:	4a83      	ldr	r2, [pc, #524]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c12:	430b      	orrs	r3, r1
 8005c14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f002 0310 	and.w	r3, r2, #16
 8005c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d01e      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	3328      	adds	r3, #40	@ 0x28
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fb67 	bl	8006320 <RCCEx_PLL3_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c5e:	4b70      	ldr	r3, [pc, #448]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d03e      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca0:	d022      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca6:	d81b      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb0:	d00b      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005cb2:	e015      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	3308      	adds	r3, #8
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fa7d 	bl	80061bc <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cc8:	e00f      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	3328      	adds	r3, #40	@ 0x28
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb24 	bl	8006320 <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d02:	4a47      	ldr	r2, [pc, #284]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d20:	2300      	movs	r3, #0
 8005d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	d03b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d3a:	d01f      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d40:	d818      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d46:	d003      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d4c:	d007      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d4e:	e011      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d50:	4b33      	ldr	r3, [pc, #204]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	4a32      	ldr	r2, [pc, #200]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d5c:	e00f      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	3328      	adds	r3, #40	@ 0x28
 8005d64:	2101      	movs	r1, #1
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fada 	bl	8006320 <RCCEx_PLL3_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d72:	e004      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d7a:	e000      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d86:	4b26      	ldr	r3, [pc, #152]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	4a22      	ldr	r2, [pc, #136]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005db4:	2300      	movs	r3, #0
 8005db6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005db8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d034      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d007      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005dd2:	e011      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b12      	ldr	r3, [pc, #72]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4a11      	ldr	r2, [pc, #68]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005de0:	e00e      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	3308      	adds	r3, #8
 8005de8:	2102      	movs	r1, #2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f9e6 	bl	80061bc <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e16:	4a02      	ldr	r2, [pc, #8]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e1c:	e006      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e42:	460b      	mov	r3, r1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d00c      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	3328      	adds	r3, #40	@ 0x28
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fa65 	bl	8006320 <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e70:	2300      	movs	r3, #0
 8005e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	d038      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e8a:	d018      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e90:	d811      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e96:	d014      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9c:	d80b      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d011      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea6:	d106      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4bc3      	ldr	r3, [pc, #780]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	4ac2      	ldr	r2, [pc, #776]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ebc:	e004      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee0:	4ab5      	ldr	r2, [pc, #724]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005efe:	2300      	movs	r3, #0
 8005f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f0c:	4baa      	ldr	r3, [pc, #680]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1a:	4aa7      	ldr	r2, [pc, #668]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f2e:	2300      	movs	r3, #0
 8005f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f3c:	4b9e      	ldr	r3, [pc, #632]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f4c:	4a9a      	ldr	r2, [pc, #616]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f60:	2300      	movs	r3, #0
 8005f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f6e:	4b92      	ldr	r3, [pc, #584]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f90:	2300      	movs	r3, #0
 8005f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f9e:	4b86      	ldr	r3, [pc, #536]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	4a85      	ldr	r2, [pc, #532]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fa8:	6113      	str	r3, [r2, #16]
 8005faa:	4b83      	ldr	r3, [pc, #524]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005fb6:	4a80      	ldr	r2, [pc, #512]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fd8:	4b77      	ldr	r3, [pc, #476]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	4a74      	ldr	r2, [pc, #464]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006008:	4b6b      	ldr	r3, [pc, #428]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800600a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006018:	4a67      	ldr	r2, [pc, #412]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800601a:	430b      	orrs	r3, r1
 800601c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	2100      	movs	r1, #0
 8006028:	62b9      	str	r1, [r7, #40]	@ 0x28
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006030:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d011      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	3308      	adds	r3, #8
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f8ba 	bl	80061bc <RCCEx_PLL2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	2100      	movs	r1, #0
 8006068:	6239      	str	r1, [r7, #32]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006070:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d011      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	3308      	adds	r3, #8
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f89a 	bl	80061bc <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	2100      	movs	r1, #0
 80060a8:	61b9      	str	r1, [r7, #24]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060b4:	460b      	mov	r3, r1
 80060b6:	4313      	orrs	r3, r2
 80060b8:	d011      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	3308      	adds	r3, #8
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f87a 	bl	80061bc <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	2100      	movs	r1, #0
 80060e8:	6139      	str	r1, [r7, #16]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d011      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	3328      	adds	r3, #40	@ 0x28
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f90c 	bl	8006320 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	2100      	movs	r1, #0
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006134:	460b      	mov	r3, r1
 8006136:	4313      	orrs	r3, r2
 8006138:	d011      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	3328      	adds	r3, #40	@ 0x28
 8006140:	2101      	movs	r1, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f8ec 	bl	8006320 <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	2100      	movs	r1, #0
 8006168:	6039      	str	r1, [r7, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d011      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	3328      	adds	r3, #40	@ 0x28
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f8cc 	bl	8006320 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800618e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800619e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061b8:	58024400 	.word	0x58024400

080061bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061ca:	4b53      	ldr	r3, [pc, #332]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d101      	bne.n	80061da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e099      	b.n	800630e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061da:	4b4f      	ldr	r3, [pc, #316]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a4e      	ldr	r2, [pc, #312]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80061e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e6:	f7fd fa83 	bl	80036f0 <HAL_GetTick>
 80061ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ec:	e008      	b.n	8006200 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ee:	f7fd fa7f 	bl	80036f0 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e086      	b.n	800630e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006200:	4b45      	ldr	r3, [pc, #276]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800620c:	4b42      	ldr	r3, [pc, #264]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	493f      	ldr	r1, [pc, #252]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	3b01      	subs	r3, #1
 8006226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	3b01      	subs	r3, #1
 8006230:	025b      	lsls	r3, r3, #9
 8006232:	b29b      	uxth	r3, r3
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	3b01      	subs	r3, #1
 800624a:	061b      	lsls	r3, r3, #24
 800624c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006250:	4931      	ldr	r1, [pc, #196]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006256:	4b30      	ldr	r3, [pc, #192]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	492d      	ldr	r1, [pc, #180]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006264:	4313      	orrs	r3, r2
 8006266:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006268:	4b2b      	ldr	r3, [pc, #172]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	f023 0220 	bic.w	r2, r3, #32
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	4928      	ldr	r1, [pc, #160]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800627a:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a26      	ldr	r2, [pc, #152]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006280:	f023 0310 	bic.w	r3, r3, #16
 8006284:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006286:	4b24      	ldr	r3, [pc, #144]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800628a:	4b24      	ldr	r3, [pc, #144]	@ (800631c <RCCEx_PLL2_Config+0x160>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	69d2      	ldr	r2, [r2, #28]
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4920      	ldr	r1, [pc, #128]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800629a:	4b1f      	ldr	r3, [pc, #124]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	4a1e      	ldr	r2, [pc, #120]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062a0:	f043 0310 	orr.w	r3, r3, #16
 80062a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062b8:	e00f      	b.n	80062da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d106      	bne.n	80062ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062c0:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	4a14      	ldr	r2, [pc, #80]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062cc:	e005      	b.n	80062da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ce:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	4a11      	ldr	r2, [pc, #68]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062da:	4b0f      	ldr	r3, [pc, #60]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e6:	f7fd fa03 	bl	80036f0 <HAL_GetTick>
 80062ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062ec:	e008      	b.n	8006300 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062ee:	f7fd f9ff 	bl	80036f0 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006300:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <RCCEx_PLL2_Config+0x15c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0f0      	beq.n	80062ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
 800631c:	ffff0007 	.word	0xffff0007

08006320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800632e:	4b53      	ldr	r3, [pc, #332]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d101      	bne.n	800633e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e099      	b.n	8006472 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800633e:	4b4f      	ldr	r3, [pc, #316]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4e      	ldr	r2, [pc, #312]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634a:	f7fd f9d1 	bl	80036f0 <HAL_GetTick>
 800634e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006350:	e008      	b.n	8006364 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006352:	f7fd f9cd 	bl	80036f0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e086      	b.n	8006472 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006364:	4b45      	ldr	r3, [pc, #276]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006370:	4b42      	ldr	r3, [pc, #264]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	051b      	lsls	r3, r3, #20
 800637e:	493f      	ldr	r1, [pc, #252]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006380:	4313      	orrs	r3, r2
 8006382:	628b      	str	r3, [r1, #40]	@ 0x28
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	3b01      	subs	r3, #1
 800638a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	3b01      	subs	r3, #1
 8006394:	025b      	lsls	r3, r3, #9
 8006396:	b29b      	uxth	r3, r3
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	3b01      	subs	r3, #1
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063b4:	4931      	ldr	r1, [pc, #196]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063ba:	4b30      	ldr	r3, [pc, #192]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	492d      	ldr	r1, [pc, #180]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063cc:	4b2b      	ldr	r3, [pc, #172]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	4928      	ldr	r1, [pc, #160]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063de:	4b27      	ldr	r3, [pc, #156]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	4a26      	ldr	r2, [pc, #152]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ea:	4b24      	ldr	r3, [pc, #144]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ee:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <RCCEx_PLL3_Config+0x160>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	69d2      	ldr	r2, [r2, #28]
 80063f6:	00d2      	lsls	r2, r2, #3
 80063f8:	4920      	ldr	r1, [pc, #128]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063fe:	4b1f      	ldr	r3, [pc, #124]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	4a1e      	ldr	r2, [pc, #120]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006408:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006410:	4b1a      	ldr	r3, [pc, #104]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	4a19      	ldr	r2, [pc, #100]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006416:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800641a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800641c:	e00f      	b.n	800643e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d106      	bne.n	8006432 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006424:	4b15      	ldr	r3, [pc, #84]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006428:	4a14      	ldr	r2, [pc, #80]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 800642a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800642e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006430:	e005      	b.n	800643e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006432:	4b12      	ldr	r3, [pc, #72]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	4a11      	ldr	r2, [pc, #68]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800643c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800643e:	4b0f      	ldr	r3, [pc, #60]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a0e      	ldr	r2, [pc, #56]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644a:	f7fd f951 	bl	80036f0 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006450:	e008      	b.n	8006464 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006452:	f7fd f94d 	bl	80036f0 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e006      	b.n	8006472 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <RCCEx_PLL3_Config+0x15c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400
 8006480:	ffff0007 	.word	0xffff0007

08006484 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d071      	beq.n	800657a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb fa1e 	bl	80018ec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d050      	beq.n	8006568 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	22ca      	movs	r2, #202	@ 0xca
 80064cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2253      	movs	r2, #83	@ 0x53
 80064d4:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9a0 	bl	800681c <RTC_EnterInitMode>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d124      	bne.n	8006530 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <HAL_RTC_Init+0x100>)
 80064f2:	400b      	ands	r3, r1
 80064f4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6899      	ldr	r1, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	0419      	lsls	r1, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9ac 	bl	8006884 <RTC_ExitInitMode>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d113      	bne.n	800655e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0203 	bic.w	r2, r2, #3
 8006544:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	22ff      	movs	r2, #255	@ 0xff
 8006564:	625a      	str	r2, [r3, #36]	@ 0x24
 8006566:	e001      	b.n	800656c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	ff8fffbf 	.word	0xff8fffbf

08006588 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_RTC_SetTime+0x1a>
 800659e:	2302      	movs	r3, #2
 80065a0:	e089      	b.n	80066b6 <HAL_RTC_SetTime+0x12e>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	22ca      	movs	r2, #202	@ 0xca
 80065b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2253      	movs	r2, #83	@ 0x53
 80065c0:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f92a 	bl	800681c <RTC_EnterInitMode>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80065cc:	7cfb      	ldrb	r3, [r7, #19]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d161      	bne.n	8006696 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d126      	bne.n	8006626 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 f985 	bl	8006900 <RTC_ByteToBcd2>
 80065f6:	4603      	mov	r3, r0
 80065f8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f97e 	bl	8006900 <RTC_ByteToBcd2>
 8006604:	4603      	mov	r3, r0
 8006606:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006608:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	789b      	ldrb	r3, [r3, #2]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f976 	bl	8006900 <RTC_ByteToBcd2>
 8006614:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006616:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	78db      	ldrb	r3, [r3, #3]
 800661e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e018      	b.n	8006658 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006646:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800664c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	4b18      	ldr	r3, [pc, #96]	@ (80066c0 <HAL_RTC_SetTime+0x138>)
 8006660:	400b      	ands	r3, r1
 8006662:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006672:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6899      	ldr	r1, [r3, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	431a      	orrs	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f8f9 	bl	8006884 <RTC_ExitInitMode>
 8006692:	4603      	mov	r3, r0
 8006694:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	22ff      	movs	r2, #255	@ 0xff
 800669c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}
 80066be:	bf00      	nop
 80066c0:	007f7f7f 	.word	0x007f7f7f

080066c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_RTC_SetDate+0x1a>
 80066da:	2302      	movs	r3, #2
 80066dc:	e073      	b.n	80067c6 <HAL_RTC_SetDate+0x102>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10e      	bne.n	8006712 <HAL_RTC_SetDate+0x4e>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	b2db      	uxtb	r3, r3
 800670a:	330a      	adds	r3, #10
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	78db      	ldrb	r3, [r3, #3]
 800671c:	4618      	mov	r0, r3
 800671e:	f000 f8ef 	bl	8006900 <RTC_ByteToBcd2>
 8006722:	4603      	mov	r3, r0
 8006724:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f8e8 	bl	8006900 <RTC_ByteToBcd2>
 8006730:	4603      	mov	r3, r0
 8006732:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006734:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	789b      	ldrb	r3, [r3, #2]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f8e0 	bl	8006900 <RTC_ByteToBcd2>
 8006740:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006742:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	e00e      	b.n	8006770 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800675e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006764:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	22ca      	movs	r2, #202	@ 0xca
 8006776:	625a      	str	r2, [r3, #36]	@ 0x24
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2253      	movs	r2, #83	@ 0x53
 800677e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f84b 	bl	800681c <RTC_EnterInitMode>
 8006786:	4603      	mov	r3, r0
 8006788:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800678a:	7cfb      	ldrb	r3, [r7, #19]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6979      	ldr	r1, [r7, #20]
 8006796:	4b0e      	ldr	r3, [pc, #56]	@ (80067d0 <HAL_RTC_SetDate+0x10c>)
 8006798:	400b      	ands	r3, r1
 800679a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f871 	bl	8006884 <RTC_ExitInitMode>
 80067a2:	4603      	mov	r3, r0
 80067a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	22ff      	movs	r2, #255	@ 0xff
 80067ac:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80067ae:	7cfb      	ldrb	r3, [r7, #19]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80067c4:	7cfb      	ldrb	r3, [r7, #19]


}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd90      	pop	{r4, r7, pc}
 80067ce:	bf00      	nop
 80067d0:	00ffff3f 	.word	0x00ffff3f

080067d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006818 <HAL_RTC_WaitForSynchro+0x44>)
 80067e2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80067e4:	f7fc ff84 	bl	80036f0 <HAL_GetTick>
 80067e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067ea:	e009      	b.n	8006800 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ec:	f7fc ff80 	bl	80036f0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067fa:	d901      	bls.n	8006800 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e007      	b.n	8006810 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ee      	beq.n	80067ec <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	0003ff5f 	.word	0x0003ff5f

0800681c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d120      	bne.n	8006878 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800683e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006840:	f7fc ff56 	bl	80036f0 <HAL_GetTick>
 8006844:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006846:	e00d      	b.n	8006864 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006848:	f7fc ff52 	bl	80036f0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006856:	d905      	bls.n	8006864 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2203      	movs	r2, #3
 8006860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <RTC_EnterInitMode+0x5c>
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d1e7      	bne.n	8006848 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006890:	4b1a      	ldr	r3, [pc, #104]	@ (80068fc <RTC_ExitInitMode+0x78>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a19      	ldr	r2, [pc, #100]	@ (80068fc <RTC_ExitInitMode+0x78>)
 8006896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800689c:	4b17      	ldr	r3, [pc, #92]	@ (80068fc <RTC_ExitInitMode+0x78>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10c      	bne.n	80068c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff93 	bl	80067d4 <HAL_RTC_WaitForSynchro>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01e      	beq.n	80068f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2203      	movs	r2, #3
 80068b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e017      	b.n	80068f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068c2:	4b0e      	ldr	r3, [pc, #56]	@ (80068fc <RTC_ExitInitMode+0x78>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	4a0d      	ldr	r2, [pc, #52]	@ (80068fc <RTC_ExitInitMode+0x78>)
 80068c8:	f023 0320 	bic.w	r3, r3, #32
 80068cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff ff80 	bl	80067d4 <HAL_RTC_WaitForSynchro>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068e6:	4b05      	ldr	r3, [pc, #20]	@ (80068fc <RTC_ExitInitMode+0x78>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4a04      	ldr	r2, [pc, #16]	@ (80068fc <RTC_ExitInitMode+0x78>)
 80068ec:	f043 0320 	orr.w	r3, r3, #32
 80068f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58004000 	.word	0x58004000

08006900 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006912:	e005      	b.n	8006920 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	3b0a      	subs	r3, #10
 800691e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	2b09      	cmp	r3, #9
 8006924:	d8f6      	bhi.n	8006914 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	b2da      	uxtb	r2, r3
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	4313      	orrs	r3, r2
 8006932:	b2db      	uxtb	r3, r3
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e10f      	b.n	8006b72 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a87      	ldr	r2, [pc, #540]	@ (8006b7c <HAL_SPI_Init+0x23c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <HAL_SPI_Init+0x42>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a86      	ldr	r2, [pc, #536]	@ (8006b80 <HAL_SPI_Init+0x240>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00a      	beq.n	8006982 <HAL_SPI_Init+0x42>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a84      	ldr	r2, [pc, #528]	@ (8006b84 <HAL_SPI_Init+0x244>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d005      	beq.n	8006982 <HAL_SPI_Init+0x42>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d901      	bls.n	8006982 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0f7      	b.n	8006b72 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fe2e 	bl	80075e4 <SPI_GetPacketSize>
 8006988:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b7c <HAL_SPI_Init+0x23c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00c      	beq.n	80069ae <HAL_SPI_Init+0x6e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a79      	ldr	r2, [pc, #484]	@ (8006b80 <HAL_SPI_Init+0x240>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <HAL_SPI_Init+0x6e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a78      	ldr	r2, [pc, #480]	@ (8006b84 <HAL_SPI_Init+0x244>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Init+0x6e>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d811      	bhi.n	80069d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80069b2:	4a72      	ldr	r2, [pc, #456]	@ (8006b7c <HAL_SPI_Init+0x23c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a70      	ldr	r2, [pc, #448]	@ (8006b80 <HAL_SPI_Init+0x240>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_SPI_Init+0x8c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6f      	ldr	r2, [pc, #444]	@ (8006b84 <HAL_SPI_Init+0x244>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d104      	bne.n	80069d6 <HAL_SPI_Init+0x96>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b10      	cmp	r3, #16
 80069d0:	d901      	bls.n	80069d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e0cd      	b.n	8006b72 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fb f808 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006a12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a1c:	d119      	bne.n	8006a52 <HAL_SPI_Init+0x112>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a26:	d103      	bne.n	8006a30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a40:	d107      	bne.n	8006a52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00f      	beq.n	8006a7e <HAL_SPI_Init+0x13e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d90b      	bls.n	8006a7e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e007      	b.n	8006a8e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69da      	ldr	r2, [r3, #28]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa0:	ea42 0103 	orr.w	r1, r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aee:	ea42 0103 	orr.w	r1, r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d113      	bne.n	8006b2e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0201 	bic.w	r2, r2, #1
 8006b3c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40013000 	.word	0x40013000
 8006b80:	40003800 	.word	0x40003800
 8006b84:	40003c00 	.word	0x40003c00

08006b88 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3320      	adds	r3, #32
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ba0:	f7fc fda6 	bl	80036f0 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d001      	beq.n	8006bb6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e1d1      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <HAL_SPI_Transmit+0x3a>
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e1c9      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_SPI_Transmit+0x4c>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e1c2      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2203      	movs	r2, #3
 8006be0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006c2c:	d108      	bne.n	8006c40 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e009      	b.n	8006c54 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006c52:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	4b96      	ldr	r3, [pc, #600]	@ (8006eb4 <HAL_SPI_Transmit+0x32c>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	88f9      	ldrh	r1, [r7, #6]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c80:	d107      	bne.n	8006c92 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b0f      	cmp	r3, #15
 8006c98:	d947      	bls.n	8006d2a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c9a:	e03f      	b.n	8006d1c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d114      	bne.n	8006cd4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006cd2:	e023      	b.n	8006d1c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cd4:	f7fc fd0c 	bl	80036f0 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d803      	bhi.n	8006cec <HAL_SPI_Transmit+0x164>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cea:	d102      	bne.n	8006cf2 <HAL_SPI_Transmit+0x16a>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d114      	bne.n	8006d1c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fba8 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e11e      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1b9      	bne.n	8006c9c <HAL_SPI_Transmit+0x114>
 8006d28:	e0f1      	b.n	8006f0e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b07      	cmp	r3, #7
 8006d30:	f240 80e6 	bls.w	8006f00 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006d34:	e05d      	b.n	8006df2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d132      	bne.n	8006daa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d918      	bls.n	8006d82 <HAL_SPI_Transmit+0x1fa>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d014      	beq.n	8006d82 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b02      	subs	r3, #2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d80:	e037      	b.n	8006df2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d90:	1c9a      	adds	r2, r3, #2
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006da8:	e023      	b.n	8006df2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006daa:	f7fc fca1 	bl	80036f0 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d803      	bhi.n	8006dc2 <HAL_SPI_Transmit+0x23a>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_Transmit+0x240>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d114      	bne.n	8006df2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fb3d 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0b3      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d19b      	bne.n	8006d36 <HAL_SPI_Transmit+0x1ae>
 8006dfe:	e086      	b.n	8006f0e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d154      	bne.n	8006eb8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d918      	bls.n	8006e4c <HAL_SPI_Transmit+0x2c4>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1e:	2b40      	cmp	r3, #64	@ 0x40
 8006e20:	d914      	bls.n	8006e4c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e32:	1d1a      	adds	r2, r3, #4
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b04      	subs	r3, #4
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e4a:	e059      	b.n	8006f00 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d917      	bls.n	8006e88 <HAL_SPI_Transmit+0x300>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d013      	beq.n	8006e88 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e64:	881a      	ldrh	r2, [r3, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b02      	subs	r3, #2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e86:	e03b      	b.n	8006f00 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3320      	adds	r3, #32
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006eb2:	e025      	b.n	8006f00 <HAL_SPI_Transmit+0x378>
 8006eb4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb8:	f7fc fc1a 	bl	80036f0 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d803      	bhi.n	8006ed0 <HAL_SPI_Transmit+0x348>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ece:	d102      	bne.n	8006ed6 <HAL_SPI_Transmit+0x34e>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d114      	bne.n	8006f00 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fab6 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e02c      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f af79 	bne.w	8006e00 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2108      	movs	r1, #8
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fb35 	bl	8007588 <SPI_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fa87 	bl	8007448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006f58:	2300      	movs	r3, #0
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop

08006f64 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	4613      	mov	r3, r2
 8006f72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3330      	adds	r3, #48	@ 0x30
 8006f86:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f88:	f7fc fbb2 	bl	80036f0 <HAL_GetTick>
 8006f8c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d001      	beq.n	8006f9e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e250      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_SPI_Receive+0x46>
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e248      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_SPI_Receive+0x58>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e241      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007014:	d108      	bne.n	8007028 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e009      	b.n	800703c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800703a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	4b95      	ldr	r3, [pc, #596]	@ (8007298 <HAL_SPI_Receive+0x334>)
 8007044:	4013      	ands	r3, r2
 8007046:	88f9      	ldrh	r1, [r7, #6]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	430b      	orrs	r3, r1
 800704e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007068:	d107      	bne.n	800707a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007078:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b0f      	cmp	r3, #15
 8007080:	d96c      	bls.n	800715c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007082:	e064      	b.n	800714e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d114      	bne.n	80070c4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070c2:	e044      	b.n	800714e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	8bfa      	ldrh	r2, [r7, #30]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d919      	bls.n	8007106 <HAL_SPI_Receive+0x1a2>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d014      	beq.n	8007106 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070e6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007104:	e023      	b.n	800714e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007106:	f7fc faf3 	bl	80036f0 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d803      	bhi.n	800711e <HAL_SPI_Receive+0x1ba>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711c:	d102      	bne.n	8007124 <HAL_SPI_Receive+0x1c0>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d114      	bne.n	800714e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f98f 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007130:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e178      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d194      	bne.n	8007084 <HAL_SPI_Receive+0x120>
 800715a:	e15e      	b.n	800741a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b07      	cmp	r3, #7
 8007162:	f240 8153 	bls.w	800740c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007166:	e08f      	b.n	8007288 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b01      	cmp	r3, #1
 800717c:	d114      	bne.n	80071a8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	8812      	ldrh	r2, [r2, #0]
 8007186:	b292      	uxth	r2, r2
 8007188:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800718e:	1c9a      	adds	r2, r3, #2
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071a6:	e06f      	b.n	8007288 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8bfa      	ldrh	r2, [r7, #30]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d924      	bls.n	8007200 <HAL_SPI_Receive+0x29c>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01f      	beq.n	8007200 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	8812      	ldrh	r2, [r2, #0]
 80071c8:	b292      	uxth	r2, r2
 80071ca:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	8812      	ldrh	r2, [r2, #0]
 80071de:	b292      	uxth	r2, r2
 80071e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b02      	subs	r3, #2
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071fe:	e043      	b.n	8007288 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d119      	bne.n	8007240 <HAL_SPI_Receive+0x2dc>
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d014      	beq.n	8007240 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	b292      	uxth	r2, r2
 8007220:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800723e:	e023      	b.n	8007288 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007240:	f7fc fa56 	bl	80036f0 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d803      	bhi.n	8007258 <HAL_SPI_Receive+0x2f4>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007256:	d102      	bne.n	800725e <HAL_SPI_Receive+0x2fa>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d114      	bne.n	8007288 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f8f2 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e0db      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f af69 	bne.w	8007168 <HAL_SPI_Receive+0x204>
 8007296:	e0c0      	b.n	800741a <HAL_SPI_Receive+0x4b6>
 8007298:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d117      	bne.n	80072e2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80072e0:	e094      	b.n	800740c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	8bfa      	ldrh	r2, [r7, #30]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d946      	bls.n	800737e <HAL_SPI_Receive+0x41a>
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d041      	beq.n	800737e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733e:	7812      	ldrb	r2, [r2, #0]
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b04      	subs	r3, #4
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800737c:	e046      	b.n	800740c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d81c      	bhi.n	80073c4 <HAL_SPI_Receive+0x460>
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d017      	beq.n	80073c4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80073c2:	e023      	b.n	800740c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c4:	f7fc f994 	bl	80036f0 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d803      	bhi.n	80073dc <HAL_SPI_Receive+0x478>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073da:	d102      	bne.n	80073e2 <HAL_SPI_Receive+0x47e>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d114      	bne.n	800740c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f830 	bl	8007448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e019      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	f47f af41 	bne.w	800729c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f814 	bl	8007448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800743e:	2300      	movs	r3, #0
  }
}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0208 	orr.w	r2, r2, #8
 8007466:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0210 	orr.w	r2, r2, #16
 8007476:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6919      	ldr	r1, [r3, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b3c      	ldr	r3, [pc, #240]	@ (8007584 <SPI_CloseTransfer+0x13c>)
 8007494:	400b      	ands	r3, r1
 8007496:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80074a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d014      	beq.n	80074de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00f      	beq.n	80074de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0220 	orr.w	r2, r2, #32
 80074dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d014      	beq.n	8007514 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00f      	beq.n	8007514 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fa:	f043 0204 	orr.w	r2, r3, #4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007512:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00f      	beq.n	800753e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00f      	beq.n	8007568 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754e:	f043 0208 	orr.w	r2, r3, #8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007566:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	fffffc90 	.word	0xfffffc90

08007588 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007598:	e010      	b.n	80075bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800759a:	f7fc f8a9 	bl	80036f0 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d803      	bhi.n	80075b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075b0:	d102      	bne.n	80075b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e00f      	b.n	80075dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4013      	ands	r3, r2
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d0df      	beq.n	800759a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3307      	adds	r3, #7
 8007602:	08db      	lsrs	r3, r3, #3
 8007604:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	fb02 f303 	mul.w	r3, r2, r3
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e049      	b.n	80076c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fb ff45 	bl	80034d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f000 f949 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e0ff      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b14      	cmp	r3, #20
 80076f2:	f200 80f0 	bhi.w	80078d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007751 	.word	0x08007751
 8007700:	080078d7 	.word	0x080078d7
 8007704:	080078d7 	.word	0x080078d7
 8007708:	080078d7 	.word	0x080078d7
 800770c:	08007791 	.word	0x08007791
 8007710:	080078d7 	.word	0x080078d7
 8007714:	080078d7 	.word	0x080078d7
 8007718:	080078d7 	.word	0x080078d7
 800771c:	080077d3 	.word	0x080077d3
 8007720:	080078d7 	.word	0x080078d7
 8007724:	080078d7 	.word	0x080078d7
 8007728:	080078d7 	.word	0x080078d7
 800772c:	08007813 	.word	0x08007813
 8007730:	080078d7 	.word	0x080078d7
 8007734:	080078d7 	.word	0x080078d7
 8007738:	080078d7 	.word	0x080078d7
 800773c:	08007855 	.word	0x08007855
 8007740:	080078d7 	.word	0x080078d7
 8007744:	080078d7 	.word	0x080078d7
 8007748:	080078d7 	.word	0x080078d7
 800774c:	08007895 	.word	0x08007895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f96a 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0208 	orr.w	r2, r2, #8
 800776a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6999      	ldr	r1, [r3, #24]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	619a      	str	r2, [r3, #24]
      break;
 800778e:	e0a5      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f9da 	bl	8007b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6999      	ldr	r1, [r3, #24]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	021a      	lsls	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	619a      	str	r2, [r3, #24]
      break;
 80077d0:	e084      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fa43 	bl	8007c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0208 	orr.w	r2, r2, #8
 80077ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0204 	bic.w	r2, r2, #4
 80077fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69d9      	ldr	r1, [r3, #28]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	61da      	str	r2, [r3, #28]
      break;
 8007810:	e064      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 faab 	bl	8007d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69d9      	ldr	r1, [r3, #28]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	021a      	lsls	r2, r3, #8
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	61da      	str	r2, [r3, #28]
      break;
 8007852:	e043      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 faf4 	bl	8007e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0204 	bic.w	r2, r2, #4
 800787e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007892:	e023      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fb38 	bl	8007f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80078d4:	e002      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75fb      	strb	r3, [r7, #23]
      break;
 80078da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a43      	ldr	r2, [pc, #268]	@ (8007a10 <TIM_Base_SetConfig+0x120>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	d00f      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a40      	ldr	r2, [pc, #256]	@ (8007a14 <TIM_Base_SetConfig+0x124>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00b      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a3f      	ldr	r2, [pc, #252]	@ (8007a18 <TIM_Base_SetConfig+0x128>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d007      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3e      	ldr	r2, [pc, #248]	@ (8007a1c <TIM_Base_SetConfig+0x12c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a20 <TIM_Base_SetConfig+0x130>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a32      	ldr	r2, [pc, #200]	@ (8007a10 <TIM_Base_SetConfig+0x120>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2f      	ldr	r2, [pc, #188]	@ (8007a14 <TIM_Base_SetConfig+0x124>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a18 <TIM_Base_SetConfig+0x128>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <TIM_Base_SetConfig+0x12c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <TIM_Base_SetConfig+0x130>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2b      	ldr	r2, [pc, #172]	@ (8007a24 <TIM_Base_SetConfig+0x134>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a2a      	ldr	r2, [pc, #168]	@ (8007a28 <TIM_Base_SetConfig+0x138>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a29      	ldr	r2, [pc, #164]	@ (8007a2c <TIM_Base_SetConfig+0x13c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a14      	ldr	r2, [pc, #80]	@ (8007a10 <TIM_Base_SetConfig+0x120>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_Base_SetConfig+0xf2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a16      	ldr	r2, [pc, #88]	@ (8007a20 <TIM_Base_SetConfig+0x130>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_Base_SetConfig+0xf2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a15      	ldr	r2, [pc, #84]	@ (8007a24 <TIM_Base_SetConfig+0x134>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_Base_SetConfig+0xf2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <TIM_Base_SetConfig+0x138>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0xf2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a13      	ldr	r2, [pc, #76]	@ (8007a2c <TIM_Base_SetConfig+0x13c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d103      	bne.n	80079ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40010000 	.word	0x40010000
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800
 8007a1c:	40000c00 	.word	0x40000c00
 8007a20:	40010400 	.word	0x40010400
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f023 0201 	bic.w	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4b37      	ldr	r3, [pc, #220]	@ (8007b38 <TIM_OC1_SetConfig+0x108>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2d      	ldr	r2, [pc, #180]	@ (8007b3c <TIM_OC1_SetConfig+0x10c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00f      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <TIM_OC1_SetConfig+0x110>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2b      	ldr	r2, [pc, #172]	@ (8007b44 <TIM_OC1_SetConfig+0x114>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b48 <TIM_OC1_SetConfig+0x118>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_OC1_SetConfig+0x7c>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a29      	ldr	r2, [pc, #164]	@ (8007b4c <TIM_OC1_SetConfig+0x11c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d10c      	bne.n	8007ac6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 0308 	bic.w	r3, r3, #8
 8007ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f023 0304 	bic.w	r3, r3, #4
 8007ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b3c <TIM_OC1_SetConfig+0x10c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00f      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b40 <TIM_OC1_SetConfig+0x110>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8007b44 <TIM_OC1_SetConfig+0x114>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a19      	ldr	r2, [pc, #100]	@ (8007b48 <TIM_OC1_SetConfig+0x118>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_OC1_SetConfig+0xbe>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <TIM_OC1_SetConfig+0x11c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d111      	bne.n	8007b12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	621a      	str	r2, [r3, #32]
}
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	fffeff8f 	.word	0xfffeff8f
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4b34      	ldr	r3, [pc, #208]	@ (8007c4c <TIM_OC2_SetConfig+0xfc>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a29      	ldr	r2, [pc, #164]	@ (8007c50 <TIM_OC2_SetConfig+0x100>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC2_SetConfig+0x68>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a28      	ldr	r2, [pc, #160]	@ (8007c54 <TIM_OC2_SetConfig+0x104>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d10d      	bne.n	8007bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c50 <TIM_OC2_SetConfig+0x100>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00f      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	@ (8007c54 <TIM_OC2_SetConfig+0x104>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1c      	ldr	r2, [pc, #112]	@ (8007c58 <TIM_OC2_SetConfig+0x108>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <TIM_OC2_SetConfig+0x10c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_OC2_SetConfig+0xac>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c60 <TIM_OC2_SetConfig+0x110>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d113      	bne.n	8007c24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	feff8fff 	.word	0xfeff8fff
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800

08007c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b33      	ldr	r3, [pc, #204]	@ (8007d5c <TIM_OC3_SetConfig+0xf8>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a28      	ldr	r2, [pc, #160]	@ (8007d60 <TIM_OC3_SetConfig+0xfc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d003      	beq.n	8007cca <TIM_OC3_SetConfig+0x66>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a27      	ldr	r2, [pc, #156]	@ (8007d64 <TIM_OC3_SetConfig+0x100>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10d      	bne.n	8007ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d60 <TIM_OC3_SetConfig+0xfc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d64 <TIM_OC3_SetConfig+0x100>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d68 <TIM_OC3_SetConfig+0x104>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1a      	ldr	r2, [pc, #104]	@ (8007d6c <TIM_OC3_SetConfig+0x108>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC3_SetConfig+0xaa>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <TIM_OC3_SetConfig+0x10c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d113      	bne.n	8007d36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	621a      	str	r2, [r3, #32]
}
 8007d50:	bf00      	nop
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	fffeff8f 	.word	0xfffeff8f
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400
 8007d70:	40014800 	.word	0x40014800

08007d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4b24      	ldr	r3, [pc, #144]	@ (8007e30 <TIM_OC4_SetConfig+0xbc>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a19      	ldr	r2, [pc, #100]	@ (8007e34 <TIM_OC4_SetConfig+0xc0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00f      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	@ (8007e38 <TIM_OC4_SetConfig+0xc4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a17      	ldr	r2, [pc, #92]	@ (8007e3c <TIM_OC4_SetConfig+0xc8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d007      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a16      	ldr	r2, [pc, #88]	@ (8007e40 <TIM_OC4_SetConfig+0xcc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_OC4_SetConfig+0x80>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <TIM_OC4_SetConfig+0xd0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d109      	bne.n	8007e08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	019b      	lsls	r3, r3, #6
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	feff8fff 	.word	0xfeff8fff
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40010400 	.word	0x40010400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4b21      	ldr	r3, [pc, #132]	@ (8007ef8 <TIM_OC5_SetConfig+0xb0>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a18      	ldr	r2, [pc, #96]	@ (8007efc <TIM_OC5_SetConfig+0xb4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00f      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <TIM_OC5_SetConfig+0xb8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a16      	ldr	r2, [pc, #88]	@ (8007f04 <TIM_OC5_SetConfig+0xbc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a15      	ldr	r2, [pc, #84]	@ (8007f08 <TIM_OC5_SetConfig+0xc0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_OC5_SetConfig+0x76>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a14      	ldr	r2, [pc, #80]	@ (8007f0c <TIM_OC5_SetConfig+0xc4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d109      	bne.n	8007ed2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	621a      	str	r2, [r3, #32]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	fffeff8f 	.word	0xfffeff8f
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400
 8007f0c:	40014800 	.word	0x40014800

08007f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4b22      	ldr	r3, [pc, #136]	@ (8007fc4 <TIM_OC6_SetConfig+0xb4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	051b      	lsls	r3, r3, #20
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a19      	ldr	r2, [pc, #100]	@ (8007fc8 <TIM_OC6_SetConfig+0xb8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00f      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a18      	ldr	r2, [pc, #96]	@ (8007fcc <TIM_OC6_SetConfig+0xbc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a17      	ldr	r2, [pc, #92]	@ (8007fd0 <TIM_OC6_SetConfig+0xc0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	@ (8007fd4 <TIM_OC6_SetConfig+0xc4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC6_SetConfig+0x78>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	@ (8007fd8 <TIM_OC6_SetConfig+0xc8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d109      	bne.n	8007f9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	feff8fff 	.word	0xfeff8fff
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800

08007fdc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_TIMEx_PWMN_Start+0x24>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e022      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b04      	cmp	r3, #4
 8008004:	d109      	bne.n	800801a <HAL_TIMEx_PWMN_Start+0x3e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	e015      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b08      	cmp	r3, #8
 800801e:	d109      	bne.n	8008034 <HAL_TIMEx_PWMN_Start+0x58>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e008      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e073      	b.n	8008136 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <HAL_TIMEx_PWMN_Start+0x82>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800805c:	e013      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b04      	cmp	r3, #4
 8008062:	d104      	bne.n	800806e <HAL_TIMEx_PWMN_Start+0x92>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800806c:	e00b      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d104      	bne.n	800807e <HAL_TIMEx_PWMN_Start+0xa2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800807c:	e003      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2204      	movs	r2, #4
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f972 	bl	8008378 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a25      	ldr	r2, [pc, #148]	@ (8008140 <HAL_TIMEx_PWMN_Start+0x164>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d022      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b6:	d01d      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a21      	ldr	r2, [pc, #132]	@ (8008144 <HAL_TIMEx_PWMN_Start+0x168>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d018      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a20      	ldr	r2, [pc, #128]	@ (8008148 <HAL_TIMEx_PWMN_Start+0x16c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1e      	ldr	r2, [pc, #120]	@ (800814c <HAL_TIMEx_PWMN_Start+0x170>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00e      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <HAL_TIMEx_PWMN_Start+0x174>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d009      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIMEx_PWMN_Start+0x178>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start+0x118>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008158 <HAL_TIMEx_PWMN_Start+0x17c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d115      	bne.n	8008120 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	4b18      	ldr	r3, [pc, #96]	@ (800815c <HAL_TIMEx_PWMN_Start+0x180>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b06      	cmp	r3, #6
 8008104:	d015      	beq.n	8008132 <HAL_TIMEx_PWMN_Start+0x156>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810c:	d011      	beq.n	8008132 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0201 	orr.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	e008      	b.n	8008132 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e000      	b.n	8008134 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	40010000 	.word	0x40010000
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	40010400 	.word	0x40010400
 8008154:	40001800 	.word	0x40001800
 8008158:	40014000 	.word	0x40014000
 800815c:	00010007 	.word	0x00010007

08008160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e06d      	b.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a30      	ldr	r2, [pc, #192]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a20      	ldr	r2, [pc, #128]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ea:	d01d      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1c      	ldr	r2, [pc, #112]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1a      	ldr	r2, [pc, #104]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a16      	ldr	r2, [pc, #88]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a15      	ldr	r2, [pc, #84]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d10c      	bne.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	4313      	orrs	r3, r2
 8008238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	40010000 	.word	0x40010000
 8008264:	40010400 	.word	0x40010400
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40001800 	.word	0x40001800
 8008278:	40014000 	.word	0x40014000

0800827c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008294:	2302      	movs	r3, #2
 8008296:	e065      	b.n	8008364 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a16      	ldr	r2, [pc, #88]	@ (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a14      	ldr	r2, [pc, #80]	@ (8008374 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d115      	bne.n	8008352 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008330:	051b      	lsls	r3, r3, #20
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	40010000 	.word	0x40010000
 8008374:	40010400 	.word	0x40010400

08008378 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	2204      	movs	r2, #4
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1a      	ldr	r2, [r3, #32]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	43db      	mvns	r3, r3
 800839a:	401a      	ands	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	fa01 f303 	lsl.w	r3, r1, r3
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	621a      	str	r2, [r3, #32]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <siprintf>:
 80083c4:	b40e      	push	{r1, r2, r3}
 80083c6:	b500      	push	{lr}
 80083c8:	b09c      	sub	sp, #112	@ 0x70
 80083ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80083cc:	9002      	str	r0, [sp, #8]
 80083ce:	9006      	str	r0, [sp, #24]
 80083d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083d4:	4809      	ldr	r0, [pc, #36]	@ (80083fc <siprintf+0x38>)
 80083d6:	9107      	str	r1, [sp, #28]
 80083d8:	9104      	str	r1, [sp, #16]
 80083da:	4909      	ldr	r1, [pc, #36]	@ (8008400 <siprintf+0x3c>)
 80083dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e0:	9105      	str	r1, [sp, #20]
 80083e2:	6800      	ldr	r0, [r0, #0]
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	a902      	add	r1, sp, #8
 80083e8:	f000 f994 	bl	8008714 <_svfiprintf_r>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	b01c      	add	sp, #112	@ 0x70
 80083f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f8:	b003      	add	sp, #12
 80083fa:	4770      	bx	lr
 80083fc:	240000b0 	.word	0x240000b0
 8008400:	ffff0208 	.word	0xffff0208

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	@ (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	240000b0 	.word	0x240000b0

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	@ (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	@ (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	@ (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	@ (8008464 <__libc_init_array+0x44>)
 8008434:	f000 fc66 	bl	8008d04 <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	0800fc4c 	.word	0x0800fc4c
 800845c:	0800fc4c 	.word	0x0800fc4c
 8008460:	0800fc4c 	.word	0x0800fc4c
 8008464:	0800fc50 	.word	0x0800fc50

08008468 <__retarget_lock_acquire_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_release_recursive>:
 800846a:	4770      	bx	lr

0800846c <_free_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4605      	mov	r5, r0
 8008470:	2900      	cmp	r1, #0
 8008472:	d041      	beq.n	80084f8 <_free_r+0x8c>
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f0c      	subs	r4, r1, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfb8      	it	lt
 800847e:	18e4      	addlt	r4, r4, r3
 8008480:	f000 f8e0 	bl	8008644 <__malloc_lock>
 8008484:	4a1d      	ldr	r2, [pc, #116]	@ (80084fc <_free_r+0x90>)
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	b933      	cbnz	r3, 8008498 <_free_r+0x2c>
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	6014      	str	r4, [r2, #0]
 800848e:	4628      	mov	r0, r5
 8008490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008494:	f000 b8dc 	b.w	8008650 <__malloc_unlock>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d908      	bls.n	80084ae <_free_r+0x42>
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	1821      	adds	r1, r4, r0
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf01      	itttt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	1809      	addeq	r1, r1, r0
 80084aa:	6021      	streq	r1, [r4, #0]
 80084ac:	e7ed      	b.n	800848a <_free_r+0x1e>
 80084ae:	461a      	mov	r2, r3
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	b10b      	cbz	r3, 80084b8 <_free_r+0x4c>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d9fa      	bls.n	80084ae <_free_r+0x42>
 80084b8:	6811      	ldr	r1, [r2, #0]
 80084ba:	1850      	adds	r0, r2, r1
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d10b      	bne.n	80084d8 <_free_r+0x6c>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	4401      	add	r1, r0
 80084c4:	1850      	adds	r0, r2, r1
 80084c6:	4283      	cmp	r3, r0
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	d1e0      	bne.n	800848e <_free_r+0x22>
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	6053      	str	r3, [r2, #4]
 80084d2:	4408      	add	r0, r1
 80084d4:	6010      	str	r0, [r2, #0]
 80084d6:	e7da      	b.n	800848e <_free_r+0x22>
 80084d8:	d902      	bls.n	80084e0 <_free_r+0x74>
 80084da:	230c      	movs	r3, #12
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	e7d6      	b.n	800848e <_free_r+0x22>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf04      	itt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	bf04      	itt	eq
 80084f0:	1809      	addeq	r1, r1, r0
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	6054      	str	r4, [r2, #4]
 80084f6:	e7ca      	b.n	800848e <_free_r+0x22>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	bf00      	nop
 80084fc:	240008f8 	.word	0x240008f8

08008500 <sbrk_aligned>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4e0f      	ldr	r6, [pc, #60]	@ (8008540 <sbrk_aligned+0x40>)
 8008504:	460c      	mov	r4, r1
 8008506:	6831      	ldr	r1, [r6, #0]
 8008508:	4605      	mov	r5, r0
 800850a:	b911      	cbnz	r1, 8008512 <sbrk_aligned+0x12>
 800850c:	f000 fba6 	bl	8008c5c <_sbrk_r>
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 fba1 	bl	8008c5c <_sbrk_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	d103      	bne.n	8008526 <sbrk_aligned+0x26>
 800851e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008522:	4620      	mov	r0, r4
 8008524:	bd70      	pop	{r4, r5, r6, pc}
 8008526:	1cc4      	adds	r4, r0, #3
 8008528:	f024 0403 	bic.w	r4, r4, #3
 800852c:	42a0      	cmp	r0, r4
 800852e:	d0f8      	beq.n	8008522 <sbrk_aligned+0x22>
 8008530:	1a21      	subs	r1, r4, r0
 8008532:	4628      	mov	r0, r5
 8008534:	f000 fb92 	bl	8008c5c <_sbrk_r>
 8008538:	3001      	adds	r0, #1
 800853a:	d1f2      	bne.n	8008522 <sbrk_aligned+0x22>
 800853c:	e7ef      	b.n	800851e <sbrk_aligned+0x1e>
 800853e:	bf00      	nop
 8008540:	240008f4 	.word	0x240008f4

08008544 <_malloc_r>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	1ccd      	adds	r5, r1, #3
 800854a:	f025 0503 	bic.w	r5, r5, #3
 800854e:	3508      	adds	r5, #8
 8008550:	2d0c      	cmp	r5, #12
 8008552:	bf38      	it	cc
 8008554:	250c      	movcc	r5, #12
 8008556:	2d00      	cmp	r5, #0
 8008558:	4606      	mov	r6, r0
 800855a:	db01      	blt.n	8008560 <_malloc_r+0x1c>
 800855c:	42a9      	cmp	r1, r5
 800855e:	d904      	bls.n	800856a <_malloc_r+0x26>
 8008560:	230c      	movs	r3, #12
 8008562:	6033      	str	r3, [r6, #0]
 8008564:	2000      	movs	r0, #0
 8008566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008640 <_malloc_r+0xfc>
 800856e:	f000 f869 	bl	8008644 <__malloc_lock>
 8008572:	f8d8 3000 	ldr.w	r3, [r8]
 8008576:	461c      	mov	r4, r3
 8008578:	bb44      	cbnz	r4, 80085cc <_malloc_r+0x88>
 800857a:	4629      	mov	r1, r5
 800857c:	4630      	mov	r0, r6
 800857e:	f7ff ffbf 	bl	8008500 <sbrk_aligned>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	4604      	mov	r4, r0
 8008586:	d158      	bne.n	800863a <_malloc_r+0xf6>
 8008588:	f8d8 4000 	ldr.w	r4, [r8]
 800858c:	4627      	mov	r7, r4
 800858e:	2f00      	cmp	r7, #0
 8008590:	d143      	bne.n	800861a <_malloc_r+0xd6>
 8008592:	2c00      	cmp	r4, #0
 8008594:	d04b      	beq.n	800862e <_malloc_r+0xea>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	4639      	mov	r1, r7
 800859a:	4630      	mov	r0, r6
 800859c:	eb04 0903 	add.w	r9, r4, r3
 80085a0:	f000 fb5c 	bl	8008c5c <_sbrk_r>
 80085a4:	4581      	cmp	r9, r0
 80085a6:	d142      	bne.n	800862e <_malloc_r+0xea>
 80085a8:	6821      	ldr	r1, [r4, #0]
 80085aa:	1a6d      	subs	r5, r5, r1
 80085ac:	4629      	mov	r1, r5
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7ff ffa6 	bl	8008500 <sbrk_aligned>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d03a      	beq.n	800862e <_malloc_r+0xea>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	442b      	add	r3, r5
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	f8d8 3000 	ldr.w	r3, [r8]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	bb62      	cbnz	r2, 8008620 <_malloc_r+0xdc>
 80085c6:	f8c8 7000 	str.w	r7, [r8]
 80085ca:	e00f      	b.n	80085ec <_malloc_r+0xa8>
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	1b52      	subs	r2, r2, r5
 80085d0:	d420      	bmi.n	8008614 <_malloc_r+0xd0>
 80085d2:	2a0b      	cmp	r2, #11
 80085d4:	d917      	bls.n	8008606 <_malloc_r+0xc2>
 80085d6:	1961      	adds	r1, r4, r5
 80085d8:	42a3      	cmp	r3, r4
 80085da:	6025      	str	r5, [r4, #0]
 80085dc:	bf18      	it	ne
 80085de:	6059      	strne	r1, [r3, #4]
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	bf08      	it	eq
 80085e4:	f8c8 1000 	streq.w	r1, [r8]
 80085e8:	5162      	str	r2, [r4, r5]
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	4630      	mov	r0, r6
 80085ee:	f000 f82f 	bl	8008650 <__malloc_unlock>
 80085f2:	f104 000b 	add.w	r0, r4, #11
 80085f6:	1d23      	adds	r3, r4, #4
 80085f8:	f020 0007 	bic.w	r0, r0, #7
 80085fc:	1ac2      	subs	r2, r0, r3
 80085fe:	bf1c      	itt	ne
 8008600:	1a1b      	subne	r3, r3, r0
 8008602:	50a3      	strne	r3, [r4, r2]
 8008604:	e7af      	b.n	8008566 <_malloc_r+0x22>
 8008606:	6862      	ldr	r2, [r4, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	bf0c      	ite	eq
 800860c:	f8c8 2000 	streq.w	r2, [r8]
 8008610:	605a      	strne	r2, [r3, #4]
 8008612:	e7eb      	b.n	80085ec <_malloc_r+0xa8>
 8008614:	4623      	mov	r3, r4
 8008616:	6864      	ldr	r4, [r4, #4]
 8008618:	e7ae      	b.n	8008578 <_malloc_r+0x34>
 800861a:	463c      	mov	r4, r7
 800861c:	687f      	ldr	r7, [r7, #4]
 800861e:	e7b6      	b.n	800858e <_malloc_r+0x4a>
 8008620:	461a      	mov	r2, r3
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	42a3      	cmp	r3, r4
 8008626:	d1fb      	bne.n	8008620 <_malloc_r+0xdc>
 8008628:	2300      	movs	r3, #0
 800862a:	6053      	str	r3, [r2, #4]
 800862c:	e7de      	b.n	80085ec <_malloc_r+0xa8>
 800862e:	230c      	movs	r3, #12
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f80c 	bl	8008650 <__malloc_unlock>
 8008638:	e794      	b.n	8008564 <_malloc_r+0x20>
 800863a:	6005      	str	r5, [r0, #0]
 800863c:	e7d6      	b.n	80085ec <_malloc_r+0xa8>
 800863e:	bf00      	nop
 8008640:	240008f8 	.word	0x240008f8

08008644 <__malloc_lock>:
 8008644:	4801      	ldr	r0, [pc, #4]	@ (800864c <__malloc_lock+0x8>)
 8008646:	f7ff bf0f 	b.w	8008468 <__retarget_lock_acquire_recursive>
 800864a:	bf00      	nop
 800864c:	240008f0 	.word	0x240008f0

08008650 <__malloc_unlock>:
 8008650:	4801      	ldr	r0, [pc, #4]	@ (8008658 <__malloc_unlock+0x8>)
 8008652:	f7ff bf0a 	b.w	800846a <__retarget_lock_release_recursive>
 8008656:	bf00      	nop
 8008658:	240008f0 	.word	0x240008f0

0800865c <__ssputs_r>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	688e      	ldr	r6, [r1, #8]
 8008662:	461f      	mov	r7, r3
 8008664:	42be      	cmp	r6, r7
 8008666:	680b      	ldr	r3, [r1, #0]
 8008668:	4682      	mov	sl, r0
 800866a:	460c      	mov	r4, r1
 800866c:	4690      	mov	r8, r2
 800866e:	d82d      	bhi.n	80086cc <__ssputs_r+0x70>
 8008670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008678:	d026      	beq.n	80086c8 <__ssputs_r+0x6c>
 800867a:	6965      	ldr	r5, [r4, #20]
 800867c:	6909      	ldr	r1, [r1, #16]
 800867e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008682:	eba3 0901 	sub.w	r9, r3, r1
 8008686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800868a:	1c7b      	adds	r3, r7, #1
 800868c:	444b      	add	r3, r9
 800868e:	106d      	asrs	r5, r5, #1
 8008690:	429d      	cmp	r5, r3
 8008692:	bf38      	it	cc
 8008694:	461d      	movcc	r5, r3
 8008696:	0553      	lsls	r3, r2, #21
 8008698:	d527      	bpl.n	80086ea <__ssputs_r+0x8e>
 800869a:	4629      	mov	r1, r5
 800869c:	f7ff ff52 	bl	8008544 <_malloc_r>
 80086a0:	4606      	mov	r6, r0
 80086a2:	b360      	cbz	r0, 80086fe <__ssputs_r+0xa2>
 80086a4:	6921      	ldr	r1, [r4, #16]
 80086a6:	464a      	mov	r2, r9
 80086a8:	f000 fae8 	bl	8008c7c <memcpy>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	6126      	str	r6, [r4, #16]
 80086ba:	6165      	str	r5, [r4, #20]
 80086bc:	444e      	add	r6, r9
 80086be:	eba5 0509 	sub.w	r5, r5, r9
 80086c2:	6026      	str	r6, [r4, #0]
 80086c4:	60a5      	str	r5, [r4, #8]
 80086c6:	463e      	mov	r6, r7
 80086c8:	42be      	cmp	r6, r7
 80086ca:	d900      	bls.n	80086ce <__ssputs_r+0x72>
 80086cc:	463e      	mov	r6, r7
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	4632      	mov	r2, r6
 80086d2:	4641      	mov	r1, r8
 80086d4:	f000 faa8 	bl	8008c28 <memmove>
 80086d8:	68a3      	ldr	r3, [r4, #8]
 80086da:	1b9b      	subs	r3, r3, r6
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	4433      	add	r3, r6
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	2000      	movs	r0, #0
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	462a      	mov	r2, r5
 80086ec:	f000 fad4 	bl	8008c98 <_realloc_r>
 80086f0:	4606      	mov	r6, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1e0      	bne.n	80086b8 <__ssputs_r+0x5c>
 80086f6:	6921      	ldr	r1, [r4, #16]
 80086f8:	4650      	mov	r0, sl
 80086fa:	f7ff feb7 	bl	800846c <_free_r>
 80086fe:	230c      	movs	r3, #12
 8008700:	f8ca 3000 	str.w	r3, [sl]
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008710:	e7e9      	b.n	80086e6 <__ssputs_r+0x8a>
	...

08008714 <_svfiprintf_r>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	4698      	mov	r8, r3
 800871a:	898b      	ldrh	r3, [r1, #12]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	b09d      	sub	sp, #116	@ 0x74
 8008720:	4607      	mov	r7, r0
 8008722:	460d      	mov	r5, r1
 8008724:	4614      	mov	r4, r2
 8008726:	d510      	bpl.n	800874a <_svfiprintf_r+0x36>
 8008728:	690b      	ldr	r3, [r1, #16]
 800872a:	b973      	cbnz	r3, 800874a <_svfiprintf_r+0x36>
 800872c:	2140      	movs	r1, #64	@ 0x40
 800872e:	f7ff ff09 	bl	8008544 <_malloc_r>
 8008732:	6028      	str	r0, [r5, #0]
 8008734:	6128      	str	r0, [r5, #16]
 8008736:	b930      	cbnz	r0, 8008746 <_svfiprintf_r+0x32>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008740:	b01d      	add	sp, #116	@ 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	2340      	movs	r3, #64	@ 0x40
 8008748:	616b      	str	r3, [r5, #20]
 800874a:	2300      	movs	r3, #0
 800874c:	9309      	str	r3, [sp, #36]	@ 0x24
 800874e:	2320      	movs	r3, #32
 8008750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008754:	f8cd 800c 	str.w	r8, [sp, #12]
 8008758:	2330      	movs	r3, #48	@ 0x30
 800875a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088f8 <_svfiprintf_r+0x1e4>
 800875e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008762:	f04f 0901 	mov.w	r9, #1
 8008766:	4623      	mov	r3, r4
 8008768:	469a      	mov	sl, r3
 800876a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876e:	b10a      	cbz	r2, 8008774 <_svfiprintf_r+0x60>
 8008770:	2a25      	cmp	r2, #37	@ 0x25
 8008772:	d1f9      	bne.n	8008768 <_svfiprintf_r+0x54>
 8008774:	ebba 0b04 	subs.w	fp, sl, r4
 8008778:	d00b      	beq.n	8008792 <_svfiprintf_r+0x7e>
 800877a:	465b      	mov	r3, fp
 800877c:	4622      	mov	r2, r4
 800877e:	4629      	mov	r1, r5
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff ff6b 	bl	800865c <__ssputs_r>
 8008786:	3001      	adds	r0, #1
 8008788:	f000 80a7 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800878c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800878e:	445a      	add	r2, fp
 8008790:	9209      	str	r2, [sp, #36]	@ 0x24
 8008792:	f89a 3000 	ldrb.w	r3, [sl]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 809f 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800879c:	2300      	movs	r3, #0
 800879e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a6:	f10a 0a01 	add.w	sl, sl, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	9307      	str	r3, [sp, #28]
 80087ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80087b4:	4654      	mov	r4, sl
 80087b6:	2205      	movs	r2, #5
 80087b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087bc:	484e      	ldr	r0, [pc, #312]	@ (80088f8 <_svfiprintf_r+0x1e4>)
 80087be:	f7f7 fd8f 	bl	80002e0 <memchr>
 80087c2:	9a04      	ldr	r2, [sp, #16]
 80087c4:	b9d8      	cbnz	r0, 80087fe <_svfiprintf_r+0xea>
 80087c6:	06d0      	lsls	r0, r2, #27
 80087c8:	bf44      	itt	mi
 80087ca:	2320      	movmi	r3, #32
 80087cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d0:	0711      	lsls	r1, r2, #28
 80087d2:	bf44      	itt	mi
 80087d4:	232b      	movmi	r3, #43	@ 0x2b
 80087d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087da:	f89a 3000 	ldrb.w	r3, [sl]
 80087de:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e0:	d015      	beq.n	800880e <_svfiprintf_r+0xfa>
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	4654      	mov	r4, sl
 80087e6:	2000      	movs	r0, #0
 80087e8:	f04f 0c0a 	mov.w	ip, #10
 80087ec:	4621      	mov	r1, r4
 80087ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f2:	3b30      	subs	r3, #48	@ 0x30
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d94b      	bls.n	8008890 <_svfiprintf_r+0x17c>
 80087f8:	b1b0      	cbz	r0, 8008828 <_svfiprintf_r+0x114>
 80087fa:	9207      	str	r2, [sp, #28]
 80087fc:	e014      	b.n	8008828 <_svfiprintf_r+0x114>
 80087fe:	eba0 0308 	sub.w	r3, r0, r8
 8008802:	fa09 f303 	lsl.w	r3, r9, r3
 8008806:	4313      	orrs	r3, r2
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	46a2      	mov	sl, r4
 800880c:	e7d2      	b.n	80087b4 <_svfiprintf_r+0xa0>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	9103      	str	r1, [sp, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	bfbb      	ittet	lt
 800881a:	425b      	neglt	r3, r3
 800881c:	f042 0202 	orrlt.w	r2, r2, #2
 8008820:	9307      	strge	r3, [sp, #28]
 8008822:	9307      	strlt	r3, [sp, #28]
 8008824:	bfb8      	it	lt
 8008826:	9204      	strlt	r2, [sp, #16]
 8008828:	7823      	ldrb	r3, [r4, #0]
 800882a:	2b2e      	cmp	r3, #46	@ 0x2e
 800882c:	d10a      	bne.n	8008844 <_svfiprintf_r+0x130>
 800882e:	7863      	ldrb	r3, [r4, #1]
 8008830:	2b2a      	cmp	r3, #42	@ 0x2a
 8008832:	d132      	bne.n	800889a <_svfiprintf_r+0x186>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	9203      	str	r2, [sp, #12]
 800883c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008840:	3402      	adds	r4, #2
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008908 <_svfiprintf_r+0x1f4>
 8008848:	7821      	ldrb	r1, [r4, #0]
 800884a:	2203      	movs	r2, #3
 800884c:	4650      	mov	r0, sl
 800884e:	f7f7 fd47 	bl	80002e0 <memchr>
 8008852:	b138      	cbz	r0, 8008864 <_svfiprintf_r+0x150>
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	eba0 000a 	sub.w	r0, r0, sl
 800885a:	2240      	movs	r2, #64	@ 0x40
 800885c:	4082      	lsls	r2, r0
 800885e:	4313      	orrs	r3, r2
 8008860:	3401      	adds	r4, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	4824      	ldr	r0, [pc, #144]	@ (80088fc <_svfiprintf_r+0x1e8>)
 800886a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800886e:	2206      	movs	r2, #6
 8008870:	f7f7 fd36 	bl	80002e0 <memchr>
 8008874:	2800      	cmp	r0, #0
 8008876:	d036      	beq.n	80088e6 <_svfiprintf_r+0x1d2>
 8008878:	4b21      	ldr	r3, [pc, #132]	@ (8008900 <_svfiprintf_r+0x1ec>)
 800887a:	bb1b      	cbnz	r3, 80088c4 <_svfiprintf_r+0x1b0>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3307      	adds	r3, #7
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	3308      	adds	r3, #8
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	4433      	add	r3, r6
 800888c:	9309      	str	r3, [sp, #36]	@ 0x24
 800888e:	e76a      	b.n	8008766 <_svfiprintf_r+0x52>
 8008890:	fb0c 3202 	mla	r2, ip, r2, r3
 8008894:	460c      	mov	r4, r1
 8008896:	2001      	movs	r0, #1
 8008898:	e7a8      	b.n	80087ec <_svfiprintf_r+0xd8>
 800889a:	2300      	movs	r3, #0
 800889c:	3401      	adds	r4, #1
 800889e:	9305      	str	r3, [sp, #20]
 80088a0:	4619      	mov	r1, r3
 80088a2:	f04f 0c0a 	mov.w	ip, #10
 80088a6:	4620      	mov	r0, r4
 80088a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ac:	3a30      	subs	r2, #48	@ 0x30
 80088ae:	2a09      	cmp	r2, #9
 80088b0:	d903      	bls.n	80088ba <_svfiprintf_r+0x1a6>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0c6      	beq.n	8008844 <_svfiprintf_r+0x130>
 80088b6:	9105      	str	r1, [sp, #20]
 80088b8:	e7c4      	b.n	8008844 <_svfiprintf_r+0x130>
 80088ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80088be:	4604      	mov	r4, r0
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f0      	b.n	80088a6 <_svfiprintf_r+0x192>
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	4638      	mov	r0, r7
 80088d0:	f3af 8000 	nop.w
 80088d4:	1c42      	adds	r2, r0, #1
 80088d6:	4606      	mov	r6, r0
 80088d8:	d1d6      	bne.n	8008888 <_svfiprintf_r+0x174>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	065b      	lsls	r3, r3, #25
 80088de:	f53f af2d 	bmi.w	800873c <_svfiprintf_r+0x28>
 80088e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088e4:	e72c      	b.n	8008740 <_svfiprintf_r+0x2c>
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	462a      	mov	r2, r5
 80088ec:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088ee:	a904      	add	r1, sp, #16
 80088f0:	4638      	mov	r0, r7
 80088f2:	f000 f879 	bl	80089e8 <_printf_i>
 80088f6:	e7ed      	b.n	80088d4 <_svfiprintf_r+0x1c0>
 80088f8:	0800fc10 	.word	0x0800fc10
 80088fc:	0800fc1a 	.word	0x0800fc1a
 8008900:	00000000 	.word	0x00000000
 8008904:	0800865d 	.word	0x0800865d
 8008908:	0800fc16 	.word	0x0800fc16

0800890c <_printf_common>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	4616      	mov	r6, r2
 8008912:	4698      	mov	r8, r3
 8008914:	688a      	ldr	r2, [r1, #8]
 8008916:	690b      	ldr	r3, [r1, #16]
 8008918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800891c:	4293      	cmp	r3, r2
 800891e:	bfb8      	it	lt
 8008920:	4613      	movlt	r3, r2
 8008922:	6033      	str	r3, [r6, #0]
 8008924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008928:	4607      	mov	r7, r0
 800892a:	460c      	mov	r4, r1
 800892c:	b10a      	cbz	r2, 8008932 <_printf_common+0x26>
 800892e:	3301      	adds	r3, #1
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	0699      	lsls	r1, r3, #26
 8008936:	bf42      	ittt	mi
 8008938:	6833      	ldrmi	r3, [r6, #0]
 800893a:	3302      	addmi	r3, #2
 800893c:	6033      	strmi	r3, [r6, #0]
 800893e:	6825      	ldr	r5, [r4, #0]
 8008940:	f015 0506 	ands.w	r5, r5, #6
 8008944:	d106      	bne.n	8008954 <_printf_common+0x48>
 8008946:	f104 0a19 	add.w	sl, r4, #25
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	6832      	ldr	r2, [r6, #0]
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	42ab      	cmp	r3, r5
 8008952:	dc26      	bgt.n	80089a2 <_printf_common+0x96>
 8008954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	3b00      	subs	r3, #0
 800895c:	bf18      	it	ne
 800895e:	2301      	movne	r3, #1
 8008960:	0692      	lsls	r2, r2, #26
 8008962:	d42b      	bmi.n	80089bc <_printf_common+0xb0>
 8008964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008968:	4641      	mov	r1, r8
 800896a:	4638      	mov	r0, r7
 800896c:	47c8      	blx	r9
 800896e:	3001      	adds	r0, #1
 8008970:	d01e      	beq.n	80089b0 <_printf_common+0xa4>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	6922      	ldr	r2, [r4, #16]
 8008976:	f003 0306 	and.w	r3, r3, #6
 800897a:	2b04      	cmp	r3, #4
 800897c:	bf02      	ittt	eq
 800897e:	68e5      	ldreq	r5, [r4, #12]
 8008980:	6833      	ldreq	r3, [r6, #0]
 8008982:	1aed      	subeq	r5, r5, r3
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	bf0c      	ite	eq
 8008988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800898c:	2500      	movne	r5, #0
 800898e:	4293      	cmp	r3, r2
 8008990:	bfc4      	itt	gt
 8008992:	1a9b      	subgt	r3, r3, r2
 8008994:	18ed      	addgt	r5, r5, r3
 8008996:	2600      	movs	r6, #0
 8008998:	341a      	adds	r4, #26
 800899a:	42b5      	cmp	r5, r6
 800899c:	d11a      	bne.n	80089d4 <_printf_common+0xc8>
 800899e:	2000      	movs	r0, #0
 80089a0:	e008      	b.n	80089b4 <_printf_common+0xa8>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4652      	mov	r2, sl
 80089a6:	4641      	mov	r1, r8
 80089a8:	4638      	mov	r0, r7
 80089aa:	47c8      	blx	r9
 80089ac:	3001      	adds	r0, #1
 80089ae:	d103      	bne.n	80089b8 <_printf_common+0xac>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	3501      	adds	r5, #1
 80089ba:	e7c6      	b.n	800894a <_printf_common+0x3e>
 80089bc:	18e1      	adds	r1, r4, r3
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	2030      	movs	r0, #48	@ 0x30
 80089c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089c6:	4422      	add	r2, r4
 80089c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089d0:	3302      	adds	r3, #2
 80089d2:	e7c7      	b.n	8008964 <_printf_common+0x58>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4622      	mov	r2, r4
 80089d8:	4641      	mov	r1, r8
 80089da:	4638      	mov	r0, r7
 80089dc:	47c8      	blx	r9
 80089de:	3001      	adds	r0, #1
 80089e0:	d0e6      	beq.n	80089b0 <_printf_common+0xa4>
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7d9      	b.n	800899a <_printf_common+0x8e>
	...

080089e8 <_printf_i>:
 80089e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	7e0f      	ldrb	r7, [r1, #24]
 80089ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089f0:	2f78      	cmp	r7, #120	@ 0x78
 80089f2:	4691      	mov	r9, r2
 80089f4:	4680      	mov	r8, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	469a      	mov	sl, r3
 80089fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089fe:	d807      	bhi.n	8008a10 <_printf_i+0x28>
 8008a00:	2f62      	cmp	r7, #98	@ 0x62
 8008a02:	d80a      	bhi.n	8008a1a <_printf_i+0x32>
 8008a04:	2f00      	cmp	r7, #0
 8008a06:	f000 80d2 	beq.w	8008bae <_printf_i+0x1c6>
 8008a0a:	2f58      	cmp	r7, #88	@ 0x58
 8008a0c:	f000 80b9 	beq.w	8008b82 <_printf_i+0x19a>
 8008a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a18:	e03a      	b.n	8008a90 <_printf_i+0xa8>
 8008a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a1e:	2b15      	cmp	r3, #21
 8008a20:	d8f6      	bhi.n	8008a10 <_printf_i+0x28>
 8008a22:	a101      	add	r1, pc, #4	@ (adr r1, 8008a28 <_printf_i+0x40>)
 8008a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a28:	08008a81 	.word	0x08008a81
 8008a2c:	08008a95 	.word	0x08008a95
 8008a30:	08008a11 	.word	0x08008a11
 8008a34:	08008a11 	.word	0x08008a11
 8008a38:	08008a11 	.word	0x08008a11
 8008a3c:	08008a11 	.word	0x08008a11
 8008a40:	08008a95 	.word	0x08008a95
 8008a44:	08008a11 	.word	0x08008a11
 8008a48:	08008a11 	.word	0x08008a11
 8008a4c:	08008a11 	.word	0x08008a11
 8008a50:	08008a11 	.word	0x08008a11
 8008a54:	08008b95 	.word	0x08008b95
 8008a58:	08008abf 	.word	0x08008abf
 8008a5c:	08008b4f 	.word	0x08008b4f
 8008a60:	08008a11 	.word	0x08008a11
 8008a64:	08008a11 	.word	0x08008a11
 8008a68:	08008bb7 	.word	0x08008bb7
 8008a6c:	08008a11 	.word	0x08008a11
 8008a70:	08008abf 	.word	0x08008abf
 8008a74:	08008a11 	.word	0x08008a11
 8008a78:	08008a11 	.word	0x08008a11
 8008a7c:	08008b57 	.word	0x08008b57
 8008a80:	6833      	ldr	r3, [r6, #0]
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6032      	str	r2, [r6, #0]
 8008a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a90:	2301      	movs	r3, #1
 8008a92:	e09d      	b.n	8008bd0 <_printf_i+0x1e8>
 8008a94:	6833      	ldr	r3, [r6, #0]
 8008a96:	6820      	ldr	r0, [r4, #0]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	6031      	str	r1, [r6, #0]
 8008a9c:	0606      	lsls	r6, r0, #24
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_i+0xbc>
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	e003      	b.n	8008aac <_printf_i+0xc4>
 8008aa4:	0645      	lsls	r5, r0, #25
 8008aa6:	d5fb      	bpl.n	8008aa0 <_printf_i+0xb8>
 8008aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008aac:	2d00      	cmp	r5, #0
 8008aae:	da03      	bge.n	8008ab8 <_printf_i+0xd0>
 8008ab0:	232d      	movs	r3, #45	@ 0x2d
 8008ab2:	426d      	negs	r5, r5
 8008ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ab8:	4859      	ldr	r0, [pc, #356]	@ (8008c20 <_printf_i+0x238>)
 8008aba:	230a      	movs	r3, #10
 8008abc:	e011      	b.n	8008ae2 <_printf_i+0xfa>
 8008abe:	6821      	ldr	r1, [r4, #0]
 8008ac0:	6833      	ldr	r3, [r6, #0]
 8008ac2:	0608      	lsls	r0, r1, #24
 8008ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ac8:	d402      	bmi.n	8008ad0 <_printf_i+0xe8>
 8008aca:	0649      	lsls	r1, r1, #25
 8008acc:	bf48      	it	mi
 8008ace:	b2ad      	uxthmi	r5, r5
 8008ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ad2:	4853      	ldr	r0, [pc, #332]	@ (8008c20 <_printf_i+0x238>)
 8008ad4:	6033      	str	r3, [r6, #0]
 8008ad6:	bf14      	ite	ne
 8008ad8:	230a      	movne	r3, #10
 8008ada:	2308      	moveq	r3, #8
 8008adc:	2100      	movs	r1, #0
 8008ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ae2:	6866      	ldr	r6, [r4, #4]
 8008ae4:	60a6      	str	r6, [r4, #8]
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	bfa2      	ittt	ge
 8008aea:	6821      	ldrge	r1, [r4, #0]
 8008aec:	f021 0104 	bicge.w	r1, r1, #4
 8008af0:	6021      	strge	r1, [r4, #0]
 8008af2:	b90d      	cbnz	r5, 8008af8 <_printf_i+0x110>
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	d04b      	beq.n	8008b90 <_printf_i+0x1a8>
 8008af8:	4616      	mov	r6, r2
 8008afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008afe:	fb03 5711 	mls	r7, r3, r1, r5
 8008b02:	5dc7      	ldrb	r7, [r0, r7]
 8008b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b08:	462f      	mov	r7, r5
 8008b0a:	42bb      	cmp	r3, r7
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	d9f4      	bls.n	8008afa <_printf_i+0x112>
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d10b      	bne.n	8008b2c <_printf_i+0x144>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	07df      	lsls	r7, r3, #31
 8008b18:	d508      	bpl.n	8008b2c <_printf_i+0x144>
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	bfde      	ittt	le
 8008b22:	2330      	movle	r3, #48	@ 0x30
 8008b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008b2c:	1b92      	subs	r2, r2, r6
 8008b2e:	6122      	str	r2, [r4, #16]
 8008b30:	f8cd a000 	str.w	sl, [sp]
 8008b34:	464b      	mov	r3, r9
 8008b36:	aa03      	add	r2, sp, #12
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f7ff fee6 	bl	800890c <_printf_common>
 8008b40:	3001      	adds	r0, #1
 8008b42:	d14a      	bne.n	8008bda <_printf_i+0x1f2>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b48:	b004      	add	sp, #16
 8008b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	f043 0320 	orr.w	r3, r3, #32
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	4833      	ldr	r0, [pc, #204]	@ (8008c24 <_printf_i+0x23c>)
 8008b58:	2778      	movs	r7, #120	@ 0x78
 8008b5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	6831      	ldr	r1, [r6, #0]
 8008b62:	061f      	lsls	r7, r3, #24
 8008b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b68:	d402      	bmi.n	8008b70 <_printf_i+0x188>
 8008b6a:	065f      	lsls	r7, r3, #25
 8008b6c:	bf48      	it	mi
 8008b6e:	b2ad      	uxthmi	r5, r5
 8008b70:	6031      	str	r1, [r6, #0]
 8008b72:	07d9      	lsls	r1, r3, #31
 8008b74:	bf44      	itt	mi
 8008b76:	f043 0320 	orrmi.w	r3, r3, #32
 8008b7a:	6023      	strmi	r3, [r4, #0]
 8008b7c:	b11d      	cbz	r5, 8008b86 <_printf_i+0x19e>
 8008b7e:	2310      	movs	r3, #16
 8008b80:	e7ac      	b.n	8008adc <_printf_i+0xf4>
 8008b82:	4827      	ldr	r0, [pc, #156]	@ (8008c20 <_printf_i+0x238>)
 8008b84:	e7e9      	b.n	8008b5a <_printf_i+0x172>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	f023 0320 	bic.w	r3, r3, #32
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	e7f6      	b.n	8008b7e <_printf_i+0x196>
 8008b90:	4616      	mov	r6, r2
 8008b92:	e7bd      	b.n	8008b10 <_printf_i+0x128>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	6825      	ldr	r5, [r4, #0]
 8008b98:	6961      	ldr	r1, [r4, #20]
 8008b9a:	1d18      	adds	r0, r3, #4
 8008b9c:	6030      	str	r0, [r6, #0]
 8008b9e:	062e      	lsls	r6, r5, #24
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	d501      	bpl.n	8008ba8 <_printf_i+0x1c0>
 8008ba4:	6019      	str	r1, [r3, #0]
 8008ba6:	e002      	b.n	8008bae <_printf_i+0x1c6>
 8008ba8:	0668      	lsls	r0, r5, #25
 8008baa:	d5fb      	bpl.n	8008ba4 <_printf_i+0x1bc>
 8008bac:	8019      	strh	r1, [r3, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	e7bc      	b.n	8008b30 <_printf_i+0x148>
 8008bb6:	6833      	ldr	r3, [r6, #0]
 8008bb8:	1d1a      	adds	r2, r3, #4
 8008bba:	6032      	str	r2, [r6, #0]
 8008bbc:	681e      	ldr	r6, [r3, #0]
 8008bbe:	6862      	ldr	r2, [r4, #4]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7f7 fb8c 	bl	80002e0 <memchr>
 8008bc8:	b108      	cbz	r0, 8008bce <_printf_i+0x1e6>
 8008bca:	1b80      	subs	r0, r0, r6
 8008bcc:	6060      	str	r0, [r4, #4]
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bd8:	e7aa      	b.n	8008b30 <_printf_i+0x148>
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	4632      	mov	r2, r6
 8008bde:	4649      	mov	r1, r9
 8008be0:	4640      	mov	r0, r8
 8008be2:	47d0      	blx	sl
 8008be4:	3001      	adds	r0, #1
 8008be6:	d0ad      	beq.n	8008b44 <_printf_i+0x15c>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	079b      	lsls	r3, r3, #30
 8008bec:	d413      	bmi.n	8008c16 <_printf_i+0x22e>
 8008bee:	68e0      	ldr	r0, [r4, #12]
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	4298      	cmp	r0, r3
 8008bf4:	bfb8      	it	lt
 8008bf6:	4618      	movlt	r0, r3
 8008bf8:	e7a6      	b.n	8008b48 <_printf_i+0x160>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	47d0      	blx	sl
 8008c04:	3001      	adds	r0, #1
 8008c06:	d09d      	beq.n	8008b44 <_printf_i+0x15c>
 8008c08:	3501      	adds	r5, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	9903      	ldr	r1, [sp, #12]
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	dcf2      	bgt.n	8008bfa <_printf_i+0x212>
 8008c14:	e7eb      	b.n	8008bee <_printf_i+0x206>
 8008c16:	2500      	movs	r5, #0
 8008c18:	f104 0619 	add.w	r6, r4, #25
 8008c1c:	e7f5      	b.n	8008c0a <_printf_i+0x222>
 8008c1e:	bf00      	nop
 8008c20:	0800fc21 	.word	0x0800fc21
 8008c24:	0800fc32 	.word	0x0800fc32

08008c28 <memmove>:
 8008c28:	4288      	cmp	r0, r1
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	eb01 0402 	add.w	r4, r1, r2
 8008c30:	d902      	bls.n	8008c38 <memmove+0x10>
 8008c32:	4284      	cmp	r4, r0
 8008c34:	4623      	mov	r3, r4
 8008c36:	d807      	bhi.n	8008c48 <memmove+0x20>
 8008c38:	1e43      	subs	r3, r0, #1
 8008c3a:	42a1      	cmp	r1, r4
 8008c3c:	d008      	beq.n	8008c50 <memmove+0x28>
 8008c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c46:	e7f8      	b.n	8008c3a <memmove+0x12>
 8008c48:	4402      	add	r2, r0
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	428a      	cmp	r2, r1
 8008c4e:	d100      	bne.n	8008c52 <memmove+0x2a>
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c5a:	e7f7      	b.n	8008c4c <memmove+0x24>

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d06      	ldr	r5, [pc, #24]	@ (8008c78 <_sbrk_r+0x1c>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7fa fab4 	bl	80031d4 <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	240008ec 	.word	0x240008ec

08008c7c <memcpy>:
 8008c7c:	440a      	add	r2, r1
 8008c7e:	4291      	cmp	r1, r2
 8008c80:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c84:	d100      	bne.n	8008c88 <memcpy+0xc>
 8008c86:	4770      	bx	lr
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c92:	4291      	cmp	r1, r2
 8008c94:	d1f9      	bne.n	8008c8a <memcpy+0xe>
 8008c96:	bd10      	pop	{r4, pc}

08008c98 <_realloc_r>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4615      	mov	r5, r2
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	b921      	cbnz	r1, 8008cae <_realloc_r+0x16>
 8008ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	4611      	mov	r1, r2
 8008caa:	f7ff bc4b 	b.w	8008544 <_malloc_r>
 8008cae:	b92a      	cbnz	r2, 8008cbc <_realloc_r+0x24>
 8008cb0:	f7ff fbdc 	bl	800846c <_free_r>
 8008cb4:	2400      	movs	r4, #0
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	f000 f81a 	bl	8008cf4 <_malloc_usable_size_r>
 8008cc0:	4285      	cmp	r5, r0
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	d802      	bhi.n	8008ccc <_realloc_r+0x34>
 8008cc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008cca:	d8f4      	bhi.n	8008cb6 <_realloc_r+0x1e>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f7ff fc38 	bl	8008544 <_malloc_r>
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d0ec      	beq.n	8008cb4 <_realloc_r+0x1c>
 8008cda:	42b5      	cmp	r5, r6
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4621      	mov	r1, r4
 8008ce0:	bf28      	it	cs
 8008ce2:	4632      	movcs	r2, r6
 8008ce4:	f7ff ffca 	bl	8008c7c <memcpy>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff fbbe 	bl	800846c <_free_r>
 8008cf0:	463c      	mov	r4, r7
 8008cf2:	e7e0      	b.n	8008cb6 <_realloc_r+0x1e>

08008cf4 <_malloc_usable_size_r>:
 8008cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf8:	1f18      	subs	r0, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfbc      	itt	lt
 8008cfe:	580b      	ldrlt	r3, [r1, r0]
 8008d00:	18c0      	addlt	r0, r0, r3
 8008d02:	4770      	bx	lr

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
